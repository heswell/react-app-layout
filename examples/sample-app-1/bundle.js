/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React 	= window.React = __webpack_require__(/*! react/addons */ 2);
	var App 	= __webpack_require__(/*! ./lib/SampleApp1 */ 1);
	
	React.render(
		React.createElement(App, null),
		document.getElementById('app')
	);
	


/***/ },
/* 1 */
/*!***************************!*\
  !*** ./lib/SampleApp1.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React 		= __webpack_require__(/*! react/addons */ 2);
	var cx 			= React.addons.classSet;
	var PropTypes	= React.PropTypes;
	
	var FlexBox 			= __webpack_require__(/*! ../../../lib/FlexBox */ 3);
	var LayoutItem 			= __webpack_require__(/*! ../../../lib/LayoutItem */ 4);
	var Component 			= __webpack_require__(/*! ../../../lib/Component */ 5);
	var DynamicContainer 	= __webpack_require__(/*! ../../../lib/DynamicContainer */ 6);
	var FixedDataTable 		= __webpack_require__(/*! fixed-data-table */ 7);
	
	var Table = FixedDataTable.Table;
	var Column = FixedDataTable.Column;
	
	var rows = [
	  ['a1', 'b1', 'c1'],
	  ['a2', 'b3', 'c2'],
	  ['a3', 'b3', 'c3']
	];
	
	function rowGetter(rowIndex) {
	  return rows[rowIndex];
	}
	
	var MyComponent = React.createClass({displayName: "MyComponent",
	
		render:function(){
	
			var className = cx('MyComponent', this.props.className);
	
			return React.createElement("div", {className: className, style: {border:'solid red 5px'}})
	
	
		}
	
	});
	
	
	var SampleApp1 = React.createClass({displayName: "SampleApp1",
	
		childContextTypes : {
			releaseSpace : PropTypes.oneOf(['close','open'])
		},
	
		getChildContext:function(){
			return {
				releaseSpace : this.state.releaseSpace
			}
		},
	
		getInitialState:function(){
			return {
				releaseSpace : 'close'
			}
		},
	
		render:function(){
	
			var style = {
	
	
			};
	
			return (
				React.createElement(FlexBox, {className: "SampleApp1", flexOrientation: "column"}, 
					React.createElement("div", {style: {height: 32, backgroundColor: 'yellow'}, header: false}, 
						React.createElement("button", {onClick: this.toggleReleaseState}, "Toggle releaseState")
					), 
					React.createElement(FlexBox, {className: "SampleApp1", flexOrientation: "row"}, 
						React.createElement(Component, {title: "test 1", width: 100, resizeable: true, header: false}), 
						React.createElement(DynamicContainer, {types: {MyComponent:MyComponent,FixedDataTable:Table,FixedDataTableColumn:Column}, 
							dragContainer: true}, 
							React.createElement(FlexBox, {className: "SampleApp1", flexOrientation: "column"}, 
								React.createElement(FlexBox, {className: "SampleApp1", flexOrientation: "row"}, 
									React.createElement(MyComponent, {title: "test 0.1"}), 
									React.createElement(Component, {title: "test 0.4", style: {backgroundColor:'green'}}), 
									React.createElement(Component, {title: "test 0.2"}), 
									React.createElement("div", {title: "A Div", style: {backgroundColor:'cornflowerblue'}})
								), 
								React.createElement(Component, {title: "test 3"}), 
								React.createElement(Component, {title: "test4", style: {backgroundColor:'green'}}), 
								React.createElement(Table, {width: 600, height: 400, 
								    rowHeight: 50, 
								    rowGetter: rowGetter, 
								    rowsCount: rows.length, 
								     headerHeight: 50}, 
								    React.createElement(Column, {label: "Col 1", width: 300, dataKey: 0}), 
								    React.createElement(Column, {label: "Col 2", width: 300, dataKey: 1})
								)
							)
						)
					), 
					React.createElement("div", {header: false, style: {height: 32, backgroundColor: 'green'}})
				)
			);
		},
	
		toggleReleaseState:function(){
			var releaseSpace = this.state.releaseSpace === 'open' ? 'close' : 'open';
			this.setState({releaseSpace:releaseSpace});
		}
	
	//							<div style={{backgroundColor:'red'}}/>
	
	});
	
	module.exports = SampleApp1;

/***/ },
/* 2 */
/*!**********************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/addons.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./lib/ReactWithAddons */ 8);


/***/ },
/* 3 */
/*!**************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/FlexBox.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	var React 			= window.React = __webpack_require__(/*! react/addons */ 2);
	var cx				= React.addons.classSet;
	var PropTypes 		= React.PropTypes;
	var cloneWithProps 	= React.addons.cloneWithProps;
	var $__0=   __webpack_require__(/*! ./FlexUtils */ 9),checkMeasurements=$__0.checkMeasurements,checkChildMeasurements=$__0.checkChildMeasurements;
	
	var shallowCloneObject		= __webpack_require__(/*! ./util/shallowCloneObject */ 10);
	
	var Splitter 		= __webpack_require__(/*! ./Splitter */ 11);
	var LayoutItem 		= __webpack_require__(/*! ./LayoutItem */ 4);
	var PlaceHolder 	= __webpack_require__(/*! ./PlaceHolder */ 12);
	var Container 		= __webpack_require__(/*! ./Container */ 13);
	var refArray        = __webpack_require__(/*! ./util/refArray */ 14);
	var indexOf         = __webpack_require__(/*! ./util/indexOf */ 15);
	
	
	var DragContainerType = PropTypes.oneOfType([PropTypes.object, PropTypes.bool]);
	
	var FlexBox = React.createClass({displayName: "FlexBox",
	
		mixins : [Container],
	
		render:function(){
	
			//onsole.log('Tower.render state.dimensions = ' + JSON.stringify(this.state.dimensions));
	
			var $__0=    this.props,flexOrientation=$__0.flexOrientation,style=$__0.style,isSelected=$__0.isSelected;
	
			var className = cx(
				this.props.className,
				'rect-layout',
				'rect-container',
				flexOrientation === 'row' ? 'rect-terrace' : 'rect-tower',
		        isSelected ? 'active' : null
			);
	
			return (
				React.createElement("div", {className: className, style: style}, 
					this.renderFlexibleChildren()
				)
			)
		},
	
		renderFlexibleChildren:function(){
	
			var $__0=   this.props,children=$__0.children,onLayout=$__0.onLayout;
	
			var $__1=     this.state,dimensions=$__1.dimensions,dragging=$__1.dragging,flexPlaceholder=$__1.flexPlaceholder,childMeasurements=$__1.childMeasurements;
	
			//onsole.log('Flexible.renderFlexibleChildren \n' + JSON.stringify(dimensions))
			 
			var splitterIdx = 1;
	
			var splitterAt = splitterPositions(children, dimensions, dragging);
			
			return children.reduce(	function(results, child, idx, arr)  {
	
				if (splitterAt[idx]){
	
					results.push(
						React.createElement(Splitter, {ref: 'splitter-' + splitterIdx, 
							key: 'splitter-' + idx, 
							idx: idx, 
							container: this, 
							onLayout: onLayout})
					);
	
					splitterIdx += 1;
	
				}
	
				// if (idx === flexPlaceholder){
				if (idx === dragging && this.context.releaseSpace !== 'close'){
					var dim = this.getManagedDimension();
					var style = {flexBasis:dimensions[idx][dim],flexGrow:0,flexShrink:0, backgroundColor: "rgb(60,60,60)"};
					results.push(
						React.createElement("div", {className: "rect-layout placeholder", style: style})
					)
				}
	
				var $__0=    child.props,json=$__0.json,children=$__0.children,childProps=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{json:1,children:1});
	
				var props = {
					ref: 'relay-' + idx, 
					key: child.props.id || idx,
					container: this,
					onLayout:onLayout,
					json: json,
					measurements : childMeasurements[idx],
					onConfigChange: this.handleConfigChange,
					dragging: idx === dragging,
					dimension: this.getManagedDimension(),
					style : Object.assign({boxSizing:'border-box'}, childProps.style || {}, dimensions[idx])
				}
	
				if (isLayout(child)){
					results.push(cloneWithProps( child, props ));
				}
				else {
					results.push(React.createElement(LayoutItem, React.__spread({},  childProps,  props), child));
				}
	
				return results;
	
			}.bind(this), []);
		},
	
		getInitialState:function(){
	
			// var measuredChildren = this.props.children.reduce(flexSizedChild,[]);
			// var childMeasurements = [];
			// measuredChildren.forEach(idx => childMeasurements[idx] = {width: 'auto', height: 'auto'});
			//onsole.log('FlexBox.getInitialState context = ', this.context);
	
			return {
				dragging: -1,
				flexPlaceholder: -1,
				dimensions : this.getDimensions(),
				childMeasurements : [],
				measurements : {}
				// childMeasurements
			};
		},
	
		getDimensions:function(){
	
			if (this.props.json){
				return this.props.json.content.map(function(c)  {return c.$size;});
			}
			else {
				return this.props.children.map(this.getComponentDimensions);
			}
	
			return 
		},
	
		// a candidate for FlexUtils
	
		getComponentDimensions:function(component){
	
			var dim = this.getManagedDimension();
			var resizeable;
	
			if (component.props.$size){
				return component.props.$size
			}
	
			var size = component.props[dim];
			if (size === undefined && component.props.style){
				size = component.props.style[dim];
			} 
	
			var resizeable = component.props.resizeable;
	
			if (size){
				return {flexShrink:0, flexGrow:0, flexBasis: size, resizeable:resizeable};
			}
	
			return {flexShrink:1,flexGrow:1,flexBasis:1};
		},
	
		componentWillReceiveProps:function(nextProps){
			// if there are more/less children, revisit measuredChildren
	
			var $__0=   nextProps,json=$__0.json,measurements=$__0.measurements;
			var $__1=   this.state,childMeasurements=$__1.childMeasurements,dimensions=$__1.dimensions;
	
			if (json !== this.props.json){
				this.setState({
					dimensions: json.content.map(function(c)  {return c.$size;})
				});
			}
	
			if (measurements = checkMeasurements(measurements, this.state.measurements, 'FlexBox')){
				this.setState({measurements:measurements});
	
				var dim = this.getManagedDimension();
				if (childMeasurements = checkChildMeasurements(measurements, dimensions, dim)){
					this.setState({childMeasurements:childMeasurements});
				}
			}
	
	
		},
	
		getManagedDimension:function(){
			return this.props.flexOrientation === 'row' ? 'width' : 'height';
		},
	
		getDragPermission:function(component){
			if (component.constructor.displayName === 'Splitter'){
				return this.props.flexOrientation === 'row' ? {y:false, x:true} : {x:false, y:true};
			}
			else {
				return {x:true,y:true}
			}
		},
	
		releaseChild:function(child, style){
	
			var children = refArray(this.refs);
			var idx = indexOf(children, function(c)  {return c === child;});
	
			var style = Object.assign({position: 'absolute'}, style);
	
			var dimensions = this.state.dimensions.slice();
	
			dimensions[idx] = Object.assign({}, dimensions[idx], style);
	
			var dim = this.getManagedDimension();
	
	        this.setState({	dimensions:dimensions, dragging: idx });
	
	 	},
	
		drop:function(component, dropTarget){
	
			this.setState({
				dragging : -1,
				dimensions: this.props.json.content.map(function(c)  {return c.$size;})
			});
	
			var $__0=  this.context,releaseSpace=$__0.releaseSpace;
	
			this.props.onLayout('drop', {component:component, dropTarget:dropTarget, releaseSpace:releaseSpace});
	
		},
	
		splitterDragStart:function(splitter){
	
			var idx = parseInt(splitter.props.idx);
			var idx1 = idx-1;
			var idx2 = idx;
	
			var child;
			var i = idx;
	
			while((child = this.child(idx1)) && !isFlexibleComponent(child)) idx1--;
			while((child = this.child(idx2)) && !isFlexibleComponent(child)) idx2++;
			
	
			this.assignExplicitSizeToFlexElements();
	
			this.splitChildren = [idx1, idx2];
	
		},
	
		splitterMoved:function(splitter, distance){
			//console.log('Flexible.splitterMoved ' + distance + '\n' + JSON.stringify(this.state.dimensions))
	
			var $__0=   this.splitChildren,idx1=$__0[0],idx2=$__0[1];
			var dim = this.getManagedDimension();
			var dimensions = this.state.dimensions.slice();
	
			var size1 = dimensions[idx1].flexBasis + distance,
				size2 = dimensions[idx2].flexBasis - distance;
	
			dimensions[idx1] = {flexGrow:1,flexShrink:1,flexBasis: size1};
			dimensions[idx2] = {flexGrow:1,flexShrink:1,flexBasis: size2};	
	
			//onsole.log('new dimension ' + JSON.stringify(dimensions));
	
			this.setState({dimensions:dimensions});
	
		},
	
		splitterDragEnd:function(splitter){
	
			var dimensions = this.state.dimensions;
			var dim = this.getManagedDimension();
			var $__0=   this.splitChildren,idx1=$__0[0],idx2=$__0[1];
	
			// let the child know it has been resized
			var childMeasurements = [];
			childMeasurements[idx1] = {};
			childMeasurements[idx2] = {};
			childMeasurements[idx1][dim] = dimensions[idx1].flexBasis; 
			childMeasurements[idx2][dim] = dimensions[idx2].flexBasis; 
	
			this.setState({childMeasurements:childMeasurements});
	
			if (this.props.onLayout){
				this.props.onLayout('splitter-resized', {container:this.props.json, dimensions:dimensions});
			}
			
			this.splitChildren = null;
	
		},
	
		assignExplicitSizeToFlexElements:function(){
			console.log('Flexible.assignExplicitSizeToFlexElements BEFORE\n' + JSON.stringify(this.state.dimensions))
			
			var boxes = this.getChildBoundingBoxes();
			
			var dim = this.getManagedDimension();
	
			var dimensions = this.state.dimensions;
	
			var dimension = dim === 'height' ? 
				function(box,idx)  {return Object.assign({},dimensions[idx], {flexBasis: Math.round(box.height)})} :
				function(box,idx)  {return Object.assign({},dimensions[idx], {flexBasis: Math.round(box.width)})}
			
	
			var dimensions = boxes.map(dimension); 
	
			console.log('Flexible.assignExplicitSizeToFlexElements explicit sizes AFTER\n' +  JSON.stringify(dimensions)  );
	
			this.setState({
				dimensions:dimensions
			});
	
			return dimensions;
	
		},
	
		handleConfigChange:function(component, $__0){var fixed=$__0.fixed;
			
			if (fixed !== 'undefined'){
				//TODO we don't need to do this if it has been done already
				this.props.onLayout('config-change', {
					dimensions: this.assignExplicitSizeToFlexElements(),
					fixed:fixed,
					component:component.props.json,
					container:this.props.json})
			}
		},
	
		positionChild:function(child, left, top){
	
			if (left !== undefined || top !== undefined){
	
				var $__0=    this.state,dimensions=$__0.dimensions,idx=$__0.dragging;
	
				dimensions = dimensions.slice();
	
				var style = shallowCloneObject(dimensions[idx]);
	
				if (left !== undefined)	style.left = left;
				if (top !== undefined)	style.top = top;
	
				dimensions[idx] = style;
	
	
		        this.setState({dimensions:dimensions});
	
			}
		},
	
	
		getChildBoundingBoxes:function(){
	
			var refs = this.refs;
			var idx = 0;
			var child;
			var boxes = [];
	
			while(child = this.child(idx)){
				boxes.push(child.getDOMNode().getBoundingClientRect());
				idx++;
			}
	
			return boxes;
	
		},
	
		child:function(idx){
			return this.refs[("relay-" + idx)] || null;
		}
	
	
	
	});
	
	module.exports = FlexBox;
	
	function splitterPositions(children, dimensions, dragging){
		
		var ret = [];
		var totalFlexCount = 0;
	
		var flexCount = 0;
		var fixed;
	
		for (var i=0;i<children.length;i++){
	
			if (isFlexible(dimensions[i])){
				totalFlexCount += 1;
			}
		}
	
		if (totalFlexCount < 2){ // no splitters needed
			return children.map(function(c)  {return false;});
		}
	
		for (var i=0;i<children.length;i++){
	
			fixed = !isFlexible(dimensions[i]);
	
			if (!fixed){
				flexCount += 1;
			}
	
			// even if flexible, if everything before is fixed, still no splitter...
			if (flexCount === 0 || (flexCount===1 && !fixed)){
				ret[i] = false;
			}
			else if (fixed && i > 0 && !isFlexible(dimensions[i-1])){
				ret[i] = false;
			}
			else if (i===0 || i === dragging || (fixed && flexCount === 0)){
				ret[i] = false;
			}
			else if (fixed && totalFlexCount === flexCount){
				ret[i] = false;
			}
			else {
				ret[i] = true;
			}			
	
		}
	
		return ret;
	
	}
	
	function isLayout(element){
		return element.type.displayName === 'FlexBox' || 
			   element.type.displayName === 'TabbedContainer' ||
			   element.type.displayName === 'DynamicContainer';
	}
	
	function isFlexible(size){
		return size.flexGrow !== 0 || size.resizeable === true; 
	}
	
	function isFlexibleComponent(component){
		return component.props.style.flexGrow !== 0 || component.props.resizeable === true; 
	}
	
	function flexSizedChild(list,component,idx){
		if (component.props.width === 'flex-width' || component.props.height === 'flex-height'){
			list.push(idx);
		} 
		return list;
	}
	
	


/***/ },
/* 4 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/LayoutItem.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	var React               	= __webpack_require__(/*! react/addons */ 2);
	var PropTypes				= React.PropTypes;
	var cx                  	= React.addons.classSet;
	var cloneWithProps      	= React.addons.cloneWithProps;
	var ComponentHeader			= __webpack_require__(/*! ./ComponentHeader */ 16);
	var ComponentContextMenu	= __webpack_require__(/*! ./ComponentContextMenu */ 17);
	var $__0= 	 __webpack_require__(/*! ./FlexUtils */ 9),checkMeasurements=$__0.checkMeasurements;
	
	var PopupService 		= __webpack_require__(/*! react-services */ 25).PopupService;
	
	//var BoxModel      		= require('./BoxModelCanvas');
	var BoxModelCanvas 		= __webpack_require__(/*! ./BoxModelHtml */ 18);
	var BoxModel 			= __webpack_require__(/*! ./BoxModel */ 19);
	
	var Draggable 			= __webpack_require__(/*! ./Draggable */ 20).Draggable;
	
	
	// need a layout prop and layout state. That way we can accept layout data both via json
	// and vis managing Flexible container
	var LayoutItem = React.createClass({displayName: "LayoutItem",
		
		propTypes : {
			children : PropTypes.oneOfType([PropTypes.object, PropTypes.bool])
		},
	
		contextTypes : {
			dragContainer : PropTypes.oneOfType([PropTypes.object, PropTypes.bool])
		},
	
		mixins : [Draggable],
	
		render:function(){
			
			var $__0=               this.props,title=$__0.title,dragging=$__0.dragging,ref=$__0.ref,flex=$__0.flex,dimension=$__0.dimension,style=$__0.style,bg=$__0.bg,onLayout=$__0.onLayout,children=$__0.children,json=$__0.json,header=$__0.header,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{title:1,dragging:1,ref:1,flex:1,dimension:1,style:1,bg:1,onLayout:1,children:1,json:1,header:1});
	
			var isSelected = this.props.isSelected;
	
			var isDraggable = Boolean(this.context.dragContainer);
	
			//onsole.log(`LayoutItem.render ${this.props.title} isDraggable=${isDraggable} dragging=${dragging}`);
	
			//title = title + ' ' + this.props.id
	
		    var className = cx(
		      'LayoutItem',
		      'rect-layout',
		      'rect-component',
		      this.state.fixed ? 'fixed' : null,
		      this.state.minimized ? 'minimized' : null,
		      this.state.maximized ? 'maximized' : null,
		      !!dragging ? 'dragging' : null,
		      isSelected ? 'active' : null,
		      isDraggable ? 'draggable' : null
		    );
	
		    var $__1=  this.state.measurements,width=$__1.width,height=$__1.height;
		    var headerHeight = header === false ? 0 : 32;
	
	
			return (
				React.createElement("div", React.__spread({className: className, style: this.state.style || style},  props), 
					header !== false 
						? React.createElement(ComponentHeader, {ref: "header", 
							title: title, 
							draggable: isDraggable, 
							onAction: this.handleAction, 
							onClick: this.handleHeaderClick, 
							fixed: this.state.fixed, 
							minimized: this.state.minimized, 
							maximized: this.state.maximized, 
							json: this.state.header})
						: null, 
	
					width && height ? 
						cloneWithProps(children,{
							width:width,
							height:height-headerHeight,
							onLayout:onLayout}) : null
				)
			);
		},
	
	
		getDefaultProps:function(){
			return {
				onConfigChange : function()  {}
			}
		},
	
		getInitialState: function () {
	
			//onsole.log('LayoutItem.getInitialState context = ', this.context);
	
			var fixed = this.props.style.flexGrow === 0; 
		    return {
		      header : {title: this.props.title},	
		      color: null,
		      colors: [],
		      fixed:fixed,
		      minimized: false,
		      measurements : {}
		    }
		},
	
		componentDidMount:function(){
			var $__0=   this.getDOMNode().getBoundingClientRect(),width=$__0.width,height=$__0.height;
			console.log(("%cLayoutItem " + this.props.title + " setState with measurements"),'color:green;font-weight:bold');
			this.setState({measurements:{width:width,height:height}});
		},
	
		componentWillReceiveProps:function(nextProps){
				
			var $__0=   nextProps,style=$__0.style,measurements=$__0.measurements;	
	
			if (style && style.flexGrow !== this.props.style.flexGrow){
				var fixed = style.flexGrow === 0; 
				this.setState({
					fixed:fixed,
					header : {title: this.props.title, fixed:fixed}
				});
			}
	
			if (measurements = checkMeasurements(measurements, this.state.measurements)){
				this.setState({measurements:measurements});
			}
	
		},
	
		getDraggable:function(){
			return this;
		},
	
		handleAction:function(key, opts){
	
			if (key === 'menu'){
				
				var $__0=  opts,left=$__0.left,top=$__0.top;
	
				PopupService.showPopup({
					left:left, 
					top:top,
					component: React.createElement(ComponentContextMenu, {component: this, 
							doAction: this.handleContextMenuAction})
				});
			}
	
			else if (key === 'pin'){
				var fixed = this.state.fixed;
				this.setState({fixed: !fixed});
				this.props.onConfigChange(this, {fixed:!fixed})
			}
	
		},
	
		handleHeaderClick:function(e){
	
			var x = e.clientX;
			var y = e.clientY;
	
			var pctX = 50;
			var pctY = 5;
			var SCALE_FACTOR = 0.4;
	
	
			var $__0=  this.getDOMNode().getBoundingClientRect(),top=$__0.top,left=$__0.left,width=$__0.width,height=$__0.height
			var $__1=  this.getDOMNode().offsetParent.getBoundingClientRect(),top1=$__1.top,left1=$__1.left
	
			var pctX = ((x - left) / width) * 100;
			var pctY = ((y - top) / height) * 100;
	
			console.log(("pctX = " + pctX + " pctY = " + pctY));
	
	
	//	    var webkitTransformOrigin =  pctX + "% " + pctY + "%";
		    var webkitTransformOrigin =  pctX + "% " + pctY + "%";
	    	var webkitTransform = ("scale(" + SCALE_FACTOR + "," + SCALE_FACTOR + ")");
	
	    	var style = Object.assign({},this.props.style, {position:'absolute',top:top-top1,left:left-left1,width:width,height:height, webkitTransform:webkitTransform, webkitTransformOrigin:webkitTransformOrigin})
	
	    	this.setState({style:style});
	
	
		},
	
		handleContextMenuAction:function(action,data){
			if (action === 'pin'){
				var fixed = this.state.fixed;
				this.setState({fixed: !fixed});
				this.props.onConfigChange(this, {fixed:!fixed})
			}
			else if (action === 'remove'){
				this.props.onLayout('remove', {component:this});
			}
			else if (action === 'minimize'){
				this.props.onLayout('minimize', {component:this});
				this.setState({minimized:true});
			}
			else if (action === 'maximize'){
				this.props.onLayout('maximize', {component:this});
				this.setState({maximized:true});
			}
			else if (action === 'restore'){
				this.props.onLayout('restore', {component:this});
				this.setState({minimized:false,maximized:false});
			}
	
		}
	
	
	
	});
	
	module.exports = LayoutItem;

/***/ },
/* 5 */
/*!****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/Component.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	var React               	= __webpack_require__(/*! react/addons */ 2);
	var PropTypes				= React.PropTypes;
	var cx                  	= React.addons.classSet;
	var cloneWithProps      	= React.addons.cloneWithProps;
	var ComponentHeader			= __webpack_require__(/*! ./ComponentHeader */ 16);
	var ComponentContextMenu	= __webpack_require__(/*! ./ComponentContextMenu */ 17);
	
	var PopupService 		= __webpack_require__(/*! react-services */ 25).PopupService;
	
	var BoxModelCanvas 		= __webpack_require__(/*! ./BoxModelHtml */ 18);
	var BoxModel 			= __webpack_require__(/*! ./BoxModel */ 19);
	
	// need a layout prop and layout state. That way we can accept layout data both via json
	// and vis managing Flexible container
	var Component = React.createClass({displayName: "Component",
		
		propTypes : {
			children : PropTypes.element
		},
	
		contextTypes : {
			dragContainer : PropTypes.object
		},
	
		render:function(){
			
			var $__0=         this.props,title=$__0.title,style=$__0.style,bg=$__0.bg,children=$__0.children,json=$__0.json,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{title:1,style:1,bg:1,children:1,json:1});
	
		    var className = cx(
		      'Component'
		    );
	
			return (
				React.createElement("div", {className: className}, 
	
					children ? cloneWithProps(children, Object.assign({},props,{
						doCommand: this.doCommand
					})) : null
	
				)
			);
		},
	
	
		getDraggable:function(){
			return this;
		},
	
		doCommand:function(command){
			if (command === 'draw-boxes'){
				var boxModel = new BoxModelCanvas()
				boxModel.draw(this.context.dragContainer)
			}
			else if (command === 'measure-boxes'){
				BoxModel.annotateWithMeasurements(this.context.dragContainer)
			}
			else if (command === 'measure-this'){
				BoxModel.annotateWithMeasurements(this)
			}
			else if (command === 'draw-this'){
				var boxModel = new BoxModelCanvas()
				boxModel.draw(this)
			}
		}
	
	});
	
	module.exports = Component;

/***/ },
/* 6 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/DynamicContainer.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React          		= __webpack_require__(/*! react/addons */ 2);
	var cx             		= React.addons.classSet;
	var PropTypes	   		= React.PropTypes;
	var cloneWithProps 		= React.addons.cloneWithProps;
	var Layout 				= __webpack_require__(/*! ./Layout */ 21);
	var componentFromJSON 	= __webpack_require__(/*! ./util/componentFromJson */ 22);
	var shallowCloneObject  = __webpack_require__(/*! ./util/shallowCloneObject */ 10);
	var $__0=			 __webpack_require__(/*! ./util/pathUtils */ 23),addPaths=$__0.addPaths;
	var serialize 			= __webpack_require__(/*! ./serialize */ 24);
	var $__1= 				 __webpack_require__(/*! react-utils */ 26),uuid=$__1.uuid;
	
	var DynamicContainer = React.createClass({displayName: "DynamicContainer",
	
		propTypes : {
			json : PropTypes.object,
			onLayout : PropTypes.func,
			types : PropTypes.object
		},
	
		contextTypes :{
			dragContainer : PropTypes.oneOfType([PropTypes.object, PropTypes.bool])
		},
	
		childContextTypes : {
			dragContainer : PropTypes.oneOfType([PropTypes.object, PropTypes.bool])
		},
	
		getChildContext:function(){
			
			var $__0=  this.context,dragContainer=$__0.dragContainer; 
			
			if (!dragContainer){
				dragContainer = this.props.dragContainer === true ? this : false
			}
	
			return {
				dragContainer:dragContainer
			}
		},
	
		render:function(){
	
			addPaths(this.state.json);
	
			var $__0=     this.props,json=$__0.json,style=$__0.style,children=$__0.children,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{json:1,style:1,children:1});
			var props = Object.assign(props, {
				ref : 'relay-0',
				key: 'root',
				container: this,
				onLayout : this.handleLayout
			});
	
			for (var prop in props){
				if (typeof props[prop] === 'undefined'){
					delete props[prop];
					console.log('deleted ' + prop);
				}
			}
	
			var className=cx(
				"relay-app rect-tower",
				this.props.className
			);
	
			return (
				React.createElement("div", {className: className, style: style}, 
					cloneWithProps(componentFromJSON(this.state.json, this.props.types),props)
				)
			);
		},
	
		getInitialState:function(){
	
			console.log('DynamicContainer.getInitialState context = ', this.context);
	
			var json = this.props.json || jsonFromComponent(this.props.children, this); 
	
			//onsole.log(JSON.stringify(json,null,2));
	
			return {json:json};
		},
	
		componentWillReceiveProps:function($__0){var json=$__0.json;
			if (typeof json === 'object' && json !== this.state.json){
				this.setState({json:json});
			}
		},
	
		// shouldComponentUpdate(nextProps){
		// 	return nextProps.json !== this.state.json;
		// },
	
		handleLayout:function(command, options){
	
			var json = this.state.json;
	
			if (command === 'splitter-resized'){
				json = Layout.resize(json, options);
			}
			else if (command === 'config-change'){
				json = Layout.config(json, options);
			}
			else if (command === 'switch-tab'){
				json = Layout.tab(json, options);
			}
			else if (command === 'remove'){
				json = Layout.remove(json, options);
			}
			else if (command === 'minimize'){
				json = Layout.minimize(json, options);
			}
			else if (command === 'restore'){
				json = Layout.restore(json, options);
			}
			else {	
				json = Layout.drop(json, options);
			}
	
			console.log('%c' + serialize(json),'font-weight:bold;color:blue;')
	
			this.setState({json:json});
	
			if (this.props.onChange){
				this.props.onChange(json);
			}
	
		}
	
	});
	
	module.exports = DynamicContainer;
	
	
	function jsonFromComponent(component, parent){
	
		var props = component.props;
		var parentType = (parent.type || parent.constructor).displayName;
		var dim = parent.props.flexOrientation === 'row' ? 'width' : 'height';
		var $size;
		var flexBasis;
	
		if (isLayoutType(parentType)){
			if (flexBasis = props[dim] || (props.style && props.style[dim])){
				$size = {flexShrink:0, flexGrow:0, flexBasis:flexBasis}
			}
			else {
				$size = {flexShrink:1, flexGrow:1, flexBasis:1}
			}
		}
	
		var json = {
			type: component.type.displayName || component.type,
			id : uuid(),
			$size:$size
		};
	
		var props = component.props;
		var propertyNames = Object.getOwnPropertyNames(props);
	
		propertyNames.forEach(function(property)  {
			if (property === 'children'){
				var content = json.content = [];
				React.Children.forEach(props.children, function(child)  
					{return content.push(jsonFromComponent(child,component));}
				);
			}
			else if (property === 'style'){
				json.style = shallowCloneObject(props.style);
			}
			else if (typeof props[property] !== 'object'){
				json[property] = props[property];
			}
		});
	
		return json;
	}
	
	function isLayoutType(type){
		return type === 'FlexBox' || type === 'Tabs' || type === 'DynamicContainer';
	}
	
	/*
	
	function getComponentDimensions(component){
	
		var dim = this.getManagedDimension();
	
		if (component.props.$size){
			return component.props.$size
		}
	
		var size = component.props[dim];
		if (size === undefined && component.props.style){
			size = component.props.style[dim];
		} 
		if (size){
			return {flexShrink:0, flexGrow:0,flexBasis: size};
		}
	
		return {flexShrink:1,flexGrow:1,flexBasis:1};
	}
	
	*/


/***/ },
/* 7 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/main.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./internal/FixedDataTableRoot */ 45);


/***/ },
/* 8 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactWithAddons.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */
	
	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */
	
	"use strict";
	
	var LinkedStateMixin = __webpack_require__(/*! ./LinkedStateMixin */ 34);
	var React = __webpack_require__(/*! ./React */ 35);
	var ReactComponentWithPureRenderMixin =
	  __webpack_require__(/*! ./ReactComponentWithPureRenderMixin */ 36);
	var ReactCSSTransitionGroup = __webpack_require__(/*! ./ReactCSSTransitionGroup */ 37);
	var ReactTransitionGroup = __webpack_require__(/*! ./ReactTransitionGroup */ 38);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	
	var cx = __webpack_require__(/*! ./cx */ 40);
	var cloneWithProps = __webpack_require__(/*! ./cloneWithProps */ 41);
	var update = __webpack_require__(/*! ./update */ 42);
	
	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,
	
	  batchedUpdates: ReactUpdates.batchedUpdates,
	  classSet: cx,
	  cloneWithProps: cloneWithProps,
	  update: update
	};
	
	if ("production" !== process.env.NODE_ENV) {
	  React.addons.Perf = __webpack_require__(/*! ./ReactDefaultPerf */ 43);
	  React.addons.TestUtils = __webpack_require__(/*! ./ReactTestUtils */ 44);
	}
	
	module.exports = React;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 9 */
/*!****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/FlexUtils.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	var React 					= __webpack_require__(/*! react/addons */ 2);
	var cloneWithProps 			= React.addons.cloneWithProps;
	var refArray                = __webpack_require__(/*! ./util/refArray */ 14);
	var indexOf                 = __webpack_require__(/*! ./util/indexOf */ 15);
	var shallowCloneObject		= __webpack_require__(/*! ./util/shallowCloneObject */ 10);
	
	function checkMeasurements(nextMeasurements, myMeasurements, label){
	
		if (nextMeasurements){
			var $__0=  nextMeasurements,width=$__0.width,height=$__0.height;
	
			if (height === undefined){ height  = myMeasurements.height}
			if (width === undefined){ width  = myMeasurements.width}
			
			if (width !== myMeasurements.width || height !== myMeasurements.height){
				
				return { width:width,height:height };
			}
		}
	
	}
	
	function checkChildMeasurements(measurements, dimensions, dim){
	
		if (dim === 'height' && measurements.width){
			return dimensions.map(function()  {
				return {width : measurements.width}
			});
		}
		else if (dim === 'width' && measurements.height){
			return dimensions.map(function()  {
				return {height : measurements.height}
			});
		}
	
	}
	
	module.exports = {checkMeasurements:checkMeasurements, checkChildMeasurements:checkChildMeasurements}
	
	
	
	
	
	
	


/***/ },
/* 10 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/util/shallowCloneObject.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	"use strict";
	
	function shallowCloneObject(obj) {
	  var result = {};
	  for (var k in obj) {
	    if (obj.hasOwnProperty(k)) {
	      result[k] = obj[k];
	    }
	  }
	  return result;
	}
	
	module.exports = shallowCloneObject;


/***/ },
/* 11 */
/*!***************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/Splitter.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	
	var React = __webpack_require__(/*! react/addons */ 2);
	var cx    = React.addons.classSet;
	
	var _splitter,
	    _mousedown = false,
	    _direction,
	    _diff = 0;
	
	
	var Splitter = React.createClass({displayName: "Splitter",
	
		render:function(){
	
		    var className = cx(
		      'rect-Splitter',
		      this.props.className
		    );
	
			return React.createElement("div", {className: className})
		},
	
		componentDidMount:function(){
		    this.getDOMNode().addEventListener('mousedown',this.handleMousedown,false);
		},
	
		componentWillUnmount:function(){
		    this.getDOMNode().removeEventListener('mousedown',this.handleMousedown,false);
		},
	
		handleMousedown:function(e){
	
	       _splitter = this;
	       _mousedown = true;
	       _diff = 0;
	
	       initDrag.call(this, e);
	
	       window.addEventListener("mousemove", mouseMoved, false);
	       window.addEventListener("mouseup",mouseUp, false);
	
	        e.preventDefault();
		}
	
	});
	
	module.exports = Splitter;
	
	function mouseMoved(evt){
	    return onDrag.call(_splitter, evt)
	}
	
	function mouseUp(evt){
	    return onDragEnd.call(_splitter, evt)
	}
	
	
	function initDrag(e){
	
		_direction = this.props.container.props.flexOrientation === 'column' ? 'vertical' : 'horizontal';
	
	    var vertical = _direction === "vertical";
	    var dim = vertical ? "height" : "width";
	
	    var pos = this.lastPos = (vertical ? e.clientY : e.clientX);
	
	    var el = this.getDOMNode();
	
	    //todo can we delegate most of this to container
	    this.props.container.splitterDragStart(this);
	
	}
	
	function onDrag(evt){
	
	    var clientPos,
	        dimension;
	
	    if (_direction === 'vertical'){
	        clientPos = "clientY";
	        dimension = "height";
	    }  
	    else {
	        clientPos = "clientX";
	        dimension = "width";
	    }  
	
	    var pos = evt[clientPos],
	        diff = pos - this.lastPos;
	
	
	    // we seem to get a final value of zero
	    if (pos && (pos !== this.lastPos)){
	
		    this.props.container.splitterMoved(this, diff);    
	
	    }
	
	    this.lastPos = pos;
	
	}
	
	function onDragEnd(evt){
	
	    _mousedown = false;   
	    _splitter = null;     
	
	    window.removeEventListener("mousemove", mouseMoved, false);
	    window.removeEventListener("mouseup", mouseUp, false);
	
	    // this is not right, when we have events ready, we will raise an event
	    this.props.container.splitterDragEnd(this);
	
	}


/***/ },
/* 12 */
/*!******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/PlaceHolder.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(/*! react/addons */ 2);
	var cx    = React.addons.classSet;
	
	var PlaceHolder = React.createClass({displayName: "PlaceHolder",
	
		render:function(){
	
			var className = cx(
				"PlaceHolder",
				this.props.className
			);
	
			var style = {
	//			...this.props.style,
				backgroundColor: 'rgb(60,60,60)'
			}
	
	
	
			return (
				React.createElement("div", {className: className, style: style}, 
					React.createElement("div", {className: "close icon-arrow", onClick: this.handleClose}, 
						React.createElement("span", null, "Close")
					)
				)
			);
		},
	
		handleClose:function(){
			this.props.onLayout('remove', {component:this});
		}
	
	
	});
	
	
	module.exports = PlaceHolder;

/***/ },
/* 13 */
/*!****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/Container.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(/*! react/addons */ 2);
	var PropTypes = React.PropTypes;
	
	var DragContainerType = PropTypes.oneOfType([PropTypes.object, PropTypes.bool]);
	
	var ContainerMixin = {
	
		contextTypes :{
			dragContainer : DragContainerType,
			releaseSpace : PropTypes.oneOf(['close','open']) 
		},
	
		childContextTypes : {
			dragContainer : DragContainerType
		},
	
		getChildContext:function(){
			
			var $__0=  this.context,dragContainer=$__0.dragContainer; 
			
			if (!dragContainer){
				dragContainer = this.props.dragContainer === true ? this : false
			}
	
			return { dragContainer:dragContainer };
		}
	
	}
	
	module.exports = ContainerMixin;

/***/ },
/* 14 */
/*!********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/util/refArray.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	"use strict";
	
	function refArray(refs, includeSplitters){
	    
	    var i=0;
	    var ret = [];
	    var ref;
	
	    if (!refs) return ret;
	
	    while(ref = refs['relay-' + i]){
	        ret.push(ref);
	        i++;
	    }
	
	    if (includeSplitters){
	        i=1;
	        while(ref = refs['splitter-' + i]){
	            ret.push(ref);
	            i++;
	        }
	    }
	
	    return ret;
	
	}
	
	
	module.exports = refArray;

/***/ },
/* 15 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/util/indexOf.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	module.exports = function(arr, test){
	
		for (var i=0;i<arr.length;i++){
			if (test(arr[i])){
				return i;
			}
		}
		return -1;
	
	};

/***/ },
/* 16 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/ComponentHeader.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	var React 		= __webpack_require__(/*! react */ 27);
	var cx			= React.addons.classSet;
	
	var ComponentHeader = React.createClass({displayName: "ComponentHeader",
	
		render:function(){
	
			var $__0=  this.props,fixed=$__0.fixed,minimized=$__0.minimized,maximized=$__0.maximized; 
	
			return (
				React.createElement("header", {className: "header"}, 
					React.createElement("span", {className: "title"}, this.props.title), 
					fixed && !minimized ? React.createElement("span", {className: "icon-pushpin"}) : null, 
					React.createElement("button", {className: "icon-menu", "data-key": "menu", onClick: this.handleMenuClick})
				)
			);
		},
	
		handleMenuClick:function(e){
			if (this.props.onAction){
				this.props.onAction('menu', {left: e.clientX, top: e.clientY});
			}
		}
	
	
	});
	
	module.exports = ComponentHeader;

/***/ },
/* 17 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/ComponentContextMenu.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(/*! react/addons */ 2);
	var $__0= 	 __webpack_require__(/*! react-controls */ 47),ContextMenu=$__0.ContextMenu,MenuItem=$__0.MenuItem;
	
	var ComponentContextMenu = React.createClass({displayName: "ComponentContextMenu",
	
		propTypes : {
			component : React.PropTypes.element.isRequired
		},
	
		render:function(){
	
			return (
				React.createElement(ContextMenu, {doAction: this.props.doAction}, 
					this.menuItems()
				)
			);
	
		},
	
		menuItems:function(){
	
			var $__0=  this.props.component.state,minimized=$__0.minimized,maximized=$__0.maximized;
			var normal = !(maximized || minimized);
	
			console.log(("ComponentContextMenu.menuItems minimized=" + minimized))
	
			var menuItems = [];
	
				menuItems.push(	React.createElement(MenuItem, {action: "pin", label: "Fix Size"}) );
				menuItems.push(	React.createElement(MenuItem, {action: "remove", label: "Remove"}) );
				if (normal){
					menuItems.push( React.createElement(MenuItem, {action: "minimize", label: "Minimize"}) );
					menuItems.push( React.createElement(MenuItem, {action: "maximize", label: "Maximize"}) );
				}
				else {
					menuItems.push( React.createElement(MenuItem, {action: "restore", label: "Restore"}) );
				} 	
	
			return menuItems;
		}
	
	
	});
	
	module.exports = ComponentContextMenu;

/***/ },
/* 18 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/BoxModelHtml.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var refArray  		= __webpack_require__(/*! ./util/refArray */ 14);
	
	
	
	
	
	
		function BoxModelCanvas(){
	
			var canvas = document.body.querySelector('.boxmodel-canvas');
			if (canvas === null){
				canvas = document.createElement('div');
				canvas.className= 'boxmodel-canvas';
				canvas.style.cssText = 'position:absolute;top:0;left:0;width:0;height:0;overflow:visible;';
				document.body.appendChild(canvas);
			}
			this.canvas = canvas;
	
		}
	
		BoxModelCanvas.prototype.draw=function(container){
	   		draw(container, this.canvas)
		};
	
		BoxModelCanvas.prototype.clear=function(){
			var canvas = document.body.querySelector('.boxmodel-canvas');
			canvas.innerHTML = '';
		};
	
	
	
	module.exports = BoxModelCanvas;
	
	
	function draw(component, canvas){
	
		if (component.props.json.$clientRect == null) return;
		if (component.props.isHidden || component.props.dragging) return;
	
	    var size = 6;    
	
		var children = refArray(component.refs);
		if (children.length){
			
			if (component.refs.tabstrip){
				var $__0=       roundedRect(component.refs.tabstrip.props.json.$clientRect),t=$__0.t,l=$__0.l,w=$__0.w,h=$__0.h,r=$__0.r,b=$__0.b;
				addEdge(canvas, t,l, w, h, 'rgba(190,190,120,0.7)');
			}
	
			children.forEach( function(child)  {return draw(child, canvas);}); 
		}
		else {
	
		    var $__1=       roundedRect(component.props.json.$clientRect),t=$__1.t,l=$__1.l,w=$__1.w,h=$__1.h,r=$__1.r,b=$__1.b;
	
		    addEdge(canvas, t,l+size, w-size, size, 'lime');
		    addEdge(canvas, t+size, r-size, size, h-size, 'red');
		    addEdge(canvas, b-size, l, w-size, size, 'yellow');
		    addEdge(canvas, t, l, size, h-size, 'purple');
	
		    if (component.refs.header){
		    	var $__2=       roundedRect(component.refs.header.props.json.$clientRect),t=$__2.t,l=$__2.l,w=$__2.w,h=$__2.h,r=$__2.r,b=$__2.b;
		    	addEdge(canvas, t+size,l+size, w-(size*2), h-size, 'rgba(190,190,190,0.9)');
		    }
	
		}
	
	
	
	
	}
	
	function roundedRect(rect){
		var $__0=      rect,top=$__0.top,left=$__0.left,width=$__0.width,height=$__0.height,right=$__0.right,bottom=$__0.bottom;
		var rnd = Math.round;
	
		return {
			t : rnd(top),
		    l : rnd(left),
		    w : rnd(width),
		    h : rnd(height),
		    r : rnd(right),
		    b : rnd(bottom)
		};
	
	}
	
	function addEdge(canvas, t, l, w, h, bg){
	
		var div = canvas.appendChild(document.createElement("div"));
		div.style.cssText = ("position:absolute;top:" + t + "px;left:" + l + "px;width:" + w + "px;height:" + h + "px;background-color:" + bg);
	
	}

/***/ },
/* 19 */
/*!***************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/BoxModel.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** *@jsx React.DOM */
	var refArray  		= __webpack_require__(/*! ./util/refArray */ 14);
	var Layout          = __webpack_require__(/*! ./Layout */ 21);
	
	"use strict";
	
	var NORTH = Layout.position.North,
	    SOUTH = Layout.position.South,
	    EAST = Layout.position.East,
	    WEST = Layout.position.West,
	    HEADER = Layout.position.Header,
	    CENTRE = Layout.position.Centre;
	
	function BoxModel(){"use strict";}
	
		BoxModel.annotateWithMeasurements=function(component){"use strict";
			return addMeasurements(component);
		};
	
		BoxModel.smallestBoxContainingPoint=function(component,x,y){"use strict";
			return smallestBoxContainingPoint(component,x,y);
		};
	
		BoxModel.pointPositionWithinComponent=function(x,y,component){"use strict";
	
			var rect = getJson(component).$clientRect
	        if (rect.height === 0){ // non-selected child in TabbedContainer
	            rect = getJson(component.props.container).$clientRect;
	        }
	
		    var posX = x - rect.left,
		        posY = y - rect.top,
		        pctX = posX / rect.width,
		        pctY = posY / rect.height,
		        closeToTheEdge,
		        position;
	
		    var borderZone = 30;
	
		    var header = component.refs && (component.refs.header || component.refs.tabstrip);
		    if (header && containsPoint(header,x,y)){
		        position = HEADER;
		    }
		    else {
	
	
		    	if (component.type === "PlaceHolder"){
		    		debugger;
		    	}
	
		        var quadrant  = (pctY < 0.5  ? "north" : "south") + (pctX < 0.5 ? "west" : "east");
	
		        switch (quadrant){
		            case "northwest":  position = (pctX > pctY) ? NORTH : WEST; break;
		            case "northeast":  position = ((1-pctX) > pctY) ? NORTH : EAST; break;
		            case "southeast":  position = (pctX > pctY) ? EAST : SOUTH; break;
		            case "southwest":  position = ((1-pctX) > pctY) ? WEST : SOUTH; break;
		        }
	
		        if (typeof borderZone === 'number'){
		            var closeToTheEdge = 0;
		            if (posX < borderZone)  closeToTheEdge += 8;
		            if (posX > rect.width - borderZone) closeToTheEdge += 2;
		            if (posY < borderZone) closeToTheEdge += 1;
		            if (posY > rect.height - borderZone) closeToTheEdge += 4;
		        }
	
		    }
	
	
		    // we might want to also know if we are in the center - this will be used to allow
		    // stack default option
	
		    return {position:position, x:x, y:y, pctX:pctX, pctY:pctY, closeToTheEdge:closeToTheEdge};
	
		};
	
	
	
	
	module.exports = BoxModel;
	
	function smallestBoxContainingPoint(component,x,y){
	
		//onsole.log('smallestBoxContainingPoint in ' + component.constructor.displayName);
	
	    if (!containsPoint(component,x,y)) return null;
	
	    if (!component.refs){
	    	return component;
	    }
	
	    var $__0=    component.refs,header=$__0.header,tabstrip=$__0.tabstrip,childRefs=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{header:1,tabstrip:1});
	    header = header || tabstrip;
	
	    if (header && containsPoint(header,x,y)) {
	    	console.log('%cIts all in the header','font-weight:bold;color:red;');
	    	return component;
	    }
	    var children = refArray(childRefs);
	    if (children.length === 0) return component;
	
	    var child;
	
	    for (var i=0;i<children.length;i++){
	        if (child = smallestBoxContainingPoint(children[i],x,y)){
	            return child;
	        }
	    }
	
	    return component;
	}
	
	
	function containsPoint(component, x, y){
	
		if (!component) throw "containsPoint called without box";
		if (!component.isMounted()) throw "containsPoint called on component that is not mounted";
	
		if (component.props.isHidden || component.props.dragging === true) return false;
	
		var box = getJson(component).$clientRect;
	
	    return  x >= box.left && x < box.right && y >= box.top && y < box.bottom;
	
	}
	
	
	function addMeasurements(component){
	
		if (component){
	
			// if (window.gogo === true && component.props.title === "Test 2.B"){
			// 	debugger;
			// }
	
			if (component.props.dragging) return component;
	
			addClientMeasurements(component);
	
			addHeaderMeasurements(component);
	
			return addChildMeasurements(component);
	
		}
	
	}
	
	function addClientMeasurements(component){
		var json = getJson(component);
		var rn = Math.round;
		var $__0=       component.getDOMNode().getBoundingClientRect(),t=$__0.top,l=$__0.left,w=$__0.width,h=$__0.height,b=$__0.bottom,r=$__0.right;
		json.$clientRect = {top: rn(t), left: rn(l), width:rn(w), height:rn(h), bottom:rn(b), right:rn(r)};
	}
	
	function addHeaderMeasurements(component){
		if (component.refs){
			var header = (component.refs.header || component.refs.tabstrip);
			if (header){
				addClientMeasurements(header);
			}
		}
	}
	
	function addChildMeasurements(container){
	
		var components = refArray(container.refs, false)
			.map(addMeasurements)
			.sort(byClientPosition);
	
		components.forEach(function(component, idx, components)  {
			var previousComponent = components[idx-1];
			var gap;
	
			if (previousComponent && (gap = gapBetweenClients(previousComponent, component))){
				console.log('Gap of ' + gap.size + ' between ' + previousComponent.constructor.displayName + ' and ' + component.constructor.displayName);
	
				var val1 = (Math.floor(gap.size/2)),
					val2 = gap.size - val1;
	
				if (gap.dimension === 'width'){
					stretchClients(previousComponent, 'right', val1);
					stretchClients(component, 'left',val2)
				}
				else {
					stretchClients(previousComponent, 'down', val1);
					stretchClients(component, 'up', val2)
				}
			}
	
		});
	
		return container;
	
	}
	
	function boxPrintId(name){ return ("$" + this.id + " <" + (name||this.name) + "> " + maybe(this.title));}
	
	function flexboxPrintId(){return boxPrintId.call(this,((this.flexOrientation === 'column' ? 'Tower' : 'Terrace')));}
	
	function maybe(val){
		return val ? '.' + val : ''
	}
	
	function stretchClients(component, direction, amount){
	
	
		var header = component.refs && (component.refs.header || component.refs.tabstrip);
		if (header){
			if (direction === 'up'){
				var headerBox = header.props.json.$clientRect;
				headerBox.top -= amount;
				headerBox.height += amount;
			}
			if (direction === 'right' || direction === 'left'){
				stretchClients(header, direction, amount);
			}
		}
	
		var children = refArray(component.refs);
		if (children.length){
			children.forEach(function(child)  {return stretchClients(child, direction, amount);});
		}
	
	
		var box = getJson(component).$clientRect;
		
		if (direction === 'right'){
			box.width += amount;
			box.right += amount;
		}
		else if (direction === 'left'){
			box.width += amount;
			box.left -= amount;
		}
		else if (direction === 'down'){
			box.height += amount;
			box.bottom += amount;
		}
		else if (direction === 'up'){
			box.height += amount;
			box.top -= amount;
		}
	
	
	}
	
	
	function gapBetween(box1, box2){
	
		if (box1.right < box2.left){
			return {dimension: 'width', size: box2.left - box1.right};
		}
		else if (box1.bottom < box2.top){
			return {dimension: 'height', size: box2.top - box1.bottom};
		}
	}
	
	function gapBetweenClients(c1, c2){
		return gapBetween(getJson(c1).$clientRect, getJson(c2).$clientRect);
	}
	
	
	function nonDragging(component){
		return component.props.dragging !== true;
	}
	
	function byPosition(c1, c2){
	
		if (c1.top < c2.top || c1.left < c2.left) return -1;
		if (c1.top > c2.top || c1.left > c2.left) return 1;
		return 0;
	
	}
	
	function byClientPosition(c1, c2){
		return byPosition(getJson(c1).$clientRect, getJson(c2).$clientRect);
	}
	
	function getJson(component){
		if (component.state && component.state.json){
			return component.state.json;
		}
		return component.props.json;
	}
	
	function toJson(box){
	
		var $__0=      this,name=$__0.name,top=$__0.top,left=$__0.left,width=$__0.width,height=$__0.height;
	
		return {
			name:name, top:top, left:left, width:width, height:height
		}
	}


/***/ },
/* 20 */
/*!****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/Draggable.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var Layout                  = __webpack_require__(/*! ./Layout */ 21);
	var DropTargetCanvas        = __webpack_require__(/*! ./DropTargetCanvas */ 28);
	var refArray                = __webpack_require__(/*! ./util/refArray */ 14);
	var BoxModel                = __webpack_require__(/*! ./BoxModel */ 19);
	var BoxModelCanvas          = __webpack_require__(/*! ./BoxModelHtml */ 18);
	var DragState               = __webpack_require__(/*! ./DragState */ 29);
	var serialize               = __webpack_require__(/*! ./serialize */ 24);
	
	var _draggee;
	var _dragContainer;
	var _mouseDownElement;
	var _dragState;
	var _dragThreshold = 5;
	var _dropTarget = null;
	var _mousedown;
	var _annotated = false;
	
	var _sketchpad = document.getElementById("sketchpad");
	var _boxModelCanvas = new BoxModelCanvas();
	var _dropTargetCanvas = new DropTargetCanvas();
	//var _boxModel = null;
	
	var SCALE_FACTOR = 0.4;
	
	var DEFAULT_DRAG_THRESHOLD = 5;
	    
	var DEFAULT_OPTIONS = {};
	
	var NORTH = Layout.position.North,
	    SOUTH = Layout.position.South,
	    EAST = Layout.position.East,
	    WEST = Layout.position.West,
	    HEADER = Layout.position.Header;
	
	var Draggable = {
	
	    componentDidMount:function(){
	
	        var header = this.refs.header || this.refs.tabstrip;
	        if (header && header.props.draggable){
	            header.getDOMNode().addEventListener('mousedown',this.handleMousedown,false);
	        }
	        else if (this.props.draggable){
	            this.getDOMNode().addEventListener('mousedown',this.handleMousedown,false);
	        }
	    },
	
	    componentWillUnmount:function(){
	        var header = this.refs.header || this.refs.tabstrip;
	        if (header && header.props.draggable){
	            console.log(("Draggable " + this.props.title + " REM mousedown listener"));
	            header.getDOMNode().removeEventListener('mousedown',this.handleMousedown,false);
	        }
	        else if (this.props.draggable){
	            this.getDOMNode().removeEventListener('mousedown',this.handleMousedown,false);
	        }
	
	    },
	
	    handleMousedown:function(e) {
	
	       _mouseDownElement = e.target;
	
	        _draggee = this;
	
	        _mousedown = true;
	
	        this.x = e.clientX;
	        this.y = e.clientY;
	
	        window.addEventListener("mousemove", preDragMousemoveHandler, false);
	        window.addEventListener("mouseup",preDragMouseupHandler, false);
	
	        e.preventDefault();
	    }
	
	};
	
	
	module.exports = {Draggable:Draggable};
	
	function preDragMousemoveHandler(e){
	
	    var $__0=  _draggee.props.container.getDragPermission(_draggee),x=$__0.x,y=$__0.y;
	
	    var x_diff = x ? e.clientX - _draggee.x : 0,
	        y_diff = y ? e.clientY - _draggee.y : 0,
	        mouseMoveDistance = Math.max(Math.abs(x_diff),Math.abs(y_diff));
	
	    // when we do finally move the draggee, we are going to 'jump' by the amount of the drag threshold, should we
	    // attempt to animate this ?    
	    if (mouseMoveDistance > _dragThreshold){
	
	        window.removeEventListener("mousemove", preDragMousemoveHandler, false);
	        window.removeEventListener("mouseup",preDragMouseupHandler, false);
	
	        if (initDrag(e) !== false){
	            window.addEventListener("mousemove", dragMousemoveHandler, false);
	            window.addEventListener("mouseup",dragMouseupHandler, false);
	        }
	
	    }
	
	}
	
	function preDragMouseupHandler(evt){
	
	    window.removeEventListener("mousemove", preDragMousemoveHandler, false);
	    window.removeEventListener("mouseup",preDragMouseupHandler, false);
	
	}
	
	function initDrag(evt){
	
	    _annotated = false;
	
	    _draggee = _draggee.getDraggable(_mouseDownElement);
	
	    // No, just measure the outer perimeter of the draggable zone of dragCOntainer
	    if (_draggee.context){
	        _dragContainer = _draggee.context.dragContainer;    
	    }
	    /* === true ? _draggee.props.container : _draggee.context.dragContainer*/;
	
	    if (!_dragContainer) return false;
	
	    var dragBox = _dragContainer.getDragBoundingRect ? _dragContainer.getDragBoundingRect() : _dragContainer.getDOMNode().getBoundingClientRect();  
	
	    //TODO ask the container for it's DragZone, so a Tabbedcontainer can give an area excluding tabstrip
	    var $__0=    dragBox,width=$__0.width,height=$__0.height,dragZone=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{width:1,height:1});
	
	    var start = window.performance.now();
	    BoxModel.annotateWithMeasurements(_dragContainer);
	    var end = window.performance.now();
	    console.log('%cannotateWithMeasurements took ' + (end-start) + ' ms','color:brown;font-weight:bold;');
	
	    _dragState = new DragState(dragZone, _draggee, evt.clientX, evt.clientY);
	
	    var pctX = Math.round(_dragState.x.mousePct * 100);
	    var pctY = Math.round(_dragState.y.mousePct * 100);
	
	
	    var webkitTransformOrigin =  pctX + "% " + pctY + "%";
	    var webkitTransform = ("scale(" + SCALE_FACTOR + "," + SCALE_FACTOR + ")");
	
	    console.log(("%cDraggable.initDrag TransformOrigin=" + webkitTransformOrigin),'font-weight:bold;color:blue;');
	
	    var dragRect = _draggee.props.json.$clientRect;
	    if (dragRect.height === 0){
	        dragRect = _draggee.props.container.props.json.$clientRect;
	    }
	
	    var $__1=  dragRect,left=$__1.left,top=$__1.top,width=$__1.width,height=$__1.height;
	
	    var offsetParent = _draggee.getDOMNode().offsetParent;
	    if (offsetParent !== document.body){
	        var offsetRect = offsetParent.getBoundingClientRect();
	        __offsetLeft = offsetRect.left;
	        __offsetTop = offsetRect.top;
	    }
	    else {
	        __offsetLeft = 0;
	        __offsetTop = 0;
	    }
	
	    var dragStyle = {left:left-__offsetLeft,top:top-__offsetTop,width:width,height:height, webkitTransform:webkitTransform, webkitTransformOrigin:webkitTransformOrigin, visibility:'visible'}; 
	
	    _draggee.props.container.releaseChild(_draggee, dragStyle);
	
	    _dropTargetCanvas.prepare();
	
	   return true;
	
	}
	
	var __offsetLeft;
	var __offsetTop;
	
	function measureDragContainer(container){
	    
	    if (typeof container.getDragBoundingRect === 'function'){
	        return container.getDragBoundingRect();
	    }
	    else {
	        return container.getDOMNode().getBoundingClientRect();
	    }
	}
	
	function dragMousemoveHandler(evt){
	
	    if (_annotated === false){
	        BoxModel.annotateWithMeasurements(_draggee.context.dragContainer);
	        //_boxModelCanvas.draw(_draggee.props.dragContainer);
	        _annotated = true;
	    }
	
	
	    var x = evt.clientX,
	        y = evt.clientY,
	        dragState = _dragState,
	        currentDropTarget = _dropTarget,
	        dropTarget;
	        
	    var newX, newY;
	
	    if (dragState.update('x', x)){
	        newX = dragState.x.pos-__offsetLeft;
	    }
	    
	    if (dragState.update('y', y)){
	        newY = dragState.y.pos-__offsetTop;
	    }
	
	    _draggee.props.container.positionChild(_draggee, newX, newY);
	
	    if (dragState.inBounds()){
	
	        dropTarget = identifyDropTarget(x,y, _dragContainer);
	
	    }
	    else {
	        //onsole.log('%coutOfBounds, do our best to position dropTarget','color:cyan')
	        dropTarget = identifyDropTarget(dragState.dropX(), dragState.dropY(), _dragContainer);
	    }
	
	    // did we have an existing droptarget which is no longer such ...
	    if (currentDropTarget){
	        if (dropTarget == null || dropTarget.box !== currentDropTarget.box){
	            _dropTarget = null;
	        }
	    }
	
	    if (dropTarget){
	
	        if (currentDropTarget && 
	            currentDropTarget.component === dropTarget.component &&
	            currentDropTarget.pos.position === dropTarget.pos.position &&
	            // experiment...
	            currentDropTarget.pos.closeToTheEdge === dropTarget.pos.closeToTheEdge){
	            // no change from last turn, don't assign to _dropTarget, we might lose settings
	
	            //onsole.log('%cSame Drop Target/Position','color:green');
	
	        }
	        else {
	            if (currentDropTarget && currentDropTarget.pos.position === dropTarget.pos.position){
	                console.log('Same drop target/position, just closeToTheEdge/extremePos changed');
	            }
	
	            // redraw position marker
	            //onsole.log('%cNew Drop Target/Position','color:red;font-weight:bold;');
	            _dropTargetCanvas.draw(dropTarget);
	
	            _dropTarget = dropTarget;
	
	        }
	
	    }
	 }
	
	function dragMouseupHandler(evt){
	   
	    onDragEnd(evt);
	}
	
	function constrain(value, min, max){
	    return Math.max(min,Math.min(value,max));
	}
	
	function onDragEnd(evt){
	    _mousedown = false;   
	
	    if (_dropTarget){
	
	        var dropTarget = getActiveDropTarget(_dropTarget);
	
	        _draggee.props.container.drop(_draggee, dropTarget);
	
	        _dropTarget = null;
	    }
	
	    _draggee = null; 
	
	    _dragContainer = null; 
	
	    _mouseDownElement = null;
	
	    _boxModelCanvas.clear();
	
	    _dropTargetCanvas.clear();
	
	    window.removeEventListener("mousemove", dragMousemoveHandler, false);
	
	    window.removeEventListener("mouseup", dragMouseupHandler, false);
	
	}
	
	function getActiveDropTarget(dropTarget){
	    return dropTarget.active ? dropTarget : getActiveDropTarget(dropTarget.nextDropTarget);
	}
	
	
	
	    function DropTarget($__0   ){"use strict";var component=$__0.component,pos=$__0.pos,closeToTheEdge=$__0.closeToTheEdge,nextDropTarget=$__0.nextDropTarget;
	        this.component = component; 
	        this.pos = pos;
	        this.nextDropTarget = nextDropTarget;
	        this.active = false;       
	    }
	
	    DropTarget.prototype.activate=function(){"use strict";
	        this.active=true;
	        return this;
	    };
	
	
	
	
	    // Initial entry to this method is always via the app (may be it should be *on* the app)
	function identifyDropTarget(x, y, container){
	
	     var dropTarget = null;
	   
	    //onsole.log('Draggable.identifyDropTarget for component  ' + box.name + ' (' + box.nestedBoxes.length + ' children)') ;
	    var component = BoxModel.smallestBoxContainingPoint(container,x,y);
	    
	    if (component){
	        var pos = BoxModel.pointPositionWithinComponent(x,y,component);
	        var nextDropTarget = getNextDropTarget(component, pos, _dragState.constraint.zone);
	        dropTarget = new DropTarget({component:component, pos:pos, nextDropTarget:nextDropTarget}).activate()
	    }
	
	    return dropTarget;
	}
	
	
	// must be cleared when we end the drag
	function getNextDropTarget(component, pos, zone){
	
	    // valueOf comparison, do not change to ===
	    if (pos.position.Header || pos.closeToTheEdge == pos.position){
	 
	        var childComponent = component;
	        var nextDropTarget = false;
	
	        while (component = component._owner){
	           
	            if (!positionedAtOuterContainerEdge(component, pos.position, childComponent)) return;
	
	            if (/*component.props.dragContainer === true ||*/ !inTheZone(component, zone)) return;
	
	           if (component.constructor.displayName === 'TabbedContainer' && pos.closeToTheEdge){
	                nextDropTarget = true;
	            }
	
	            else if (isVBox(component) && (pos.closeToTheEdge === 2 || pos.closeToTheEdge === 8)){
	                
	                if (component.props.json.content.length === 2 && component.state.dragging !== -1){ // Two Child FlexBox, one of which is the draggee 
	                    return getNextDropTarget(component, pos, zone);
	                }
	
	                nextDropTarget = true;
	                pos.width = 120;
	            }
	            else if (isHBox(component) && (pos.position.Header || pos.closeToTheEdge === 1 || pos.closeToTheEdge === 4)){
	                
	                if (component.props.json.content.length === 2 && component.state.dragging !== -1){
	                    return getNextDropTarget(component, pos, zone);
	                }
	                
	                nextDropTarget = true;
	                pos.height = 120;
	            }
	
	            if (nextDropTarget){
	
	                if (pos.position.Header){
	                    pos = Object.assign({},pos,{position:NORTH});    
	                }
	
	                return new DropTarget({component:component, pos:pos, nextDropTarget: getNextDropTarget(component, pos, zone)})
	            }
	
	            if (component.props.dragContainer === true) break;
	
	            childComponent = component;
	        }
	
	    } 
	}
	
	function isVBox(box){
	    return box.constructor.displayName === 'FlexBox' &&  box.props.flexOrientation === "column";
	}
	
	function isHBox(box){
	    return box.constructor.displayName === 'FlexBox' &&  box.props.flexOrientation === "row";
	}
	
	function positionedAtOuterContainerEdge(containingComponent, position, component){
	    
	    if (component.props.dragContainer === true) return false;
	
	    var containingBox = containingComponent.props.json.$clientRect;
	    var box = component.props.json.$clientRect;
	
	    if (position.North || position.Header) return box.top === containingBox.top;
	    if (position.East) return box.right === containingBox.right;
	    if (position.South) return box.bottom === containingBox.bottom;
	    if (position.West) return box.left === containingBox.left;
	}
	
	function inTheZone(component, zone){
	    var box = component.props.json.$clientRect;
	    return within(zone.x.lo, zone.x.hi, box.left, box.right)
	        && within(zone.y.lo, zone.y.hi, box.top, box.bottom); 
	}
	
	function within(lowerBound, upperBound ){for (var values=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) values.push(arguments[$__0]);
	    for (var i=0;i<values.length;i++){
	        var value = values[i];
	        if (value < lowerBound || value > upperBound) return false;
	    }
	    return true;
	}
	
	
	
	


/***/ },
/* 21 */
/*!*************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/Layout.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var shallowCloneObject = __webpack_require__(/*! ./util/shallowCloneObject */ 10);
	var transform           = __webpack_require__(/*! ./util/jsonUtils */ 30).transform;
	var $__0=     __webpack_require__(/*! ./util/pathUtils */ 23),adjustPath=$__0.adjustPath,followPath=$__0.followPath,followPathToParent=$__0.followPathToParent;
	
	
	var positionValues = {
	    "north" : 1,
	    "east"  : 2,
	    "south" : 4,
	    "west"  : 8,
	    "header": 16,
	    "centre": 32       
	};
	
	var position = Object.freeze({
	    "North" : _position("north"),
	    "East"  : _position("east"),
	    "South" : _position("south"),
	    "West"  : _position("west"),
	    "Header": _position("header"),
	    "Centre": _position("centre")
	});
	
	function _position(str){
	    return Object.freeze({
	            offset : str === "north" || str === "west" ? 0 : str === "south" || str === "east" ? 1 : NaN,
	            valueOf : function(){return positionValues[str];},
	            toString : function(){return str;},
	            North : str === "north",
	            South : str === "south",
	            East : str === "east",
	            West : str === "west",
	            Header : str === "header",
	            NorthOrSouth : str === "north" || str === "south",
	            EastOrWest : str === "east" || str === "west",
	            NorthOrWest : str === "north" || str === "west",
	            SouthOrEast : str === "east" || str === "south"
	    });
	}
	
	function Layout(){
	
	}
	
	Layout.position = position;
	Layout.drop = drop;
	Layout.resize = resize;
	Layout.minimize = minimize;
	Layout.restore = restore;
	Layout.remove = remove;
	Layout.config = config;
	Layout.tab = tab;
	
	module.exports = Layout;
	
	var Dimensions = {
	    row : 'width',
	    column : 'height'
	}
	
	
	function config(json, $__0   ){var fixed=$__0.fixed,dimensions=$__0.dimensions,component=$__0.component,container=$__0.container;
	
	    var idx = container.content.indexOf(component);
	
	    dimensions = dimensions.slice();
	    dimensions[idx] = shallowCloneObject(dimensions[idx]);
	    dimensions[idx].flexGrow = fixed ? 0 : 1;
	
	    var newContainer = shallowCloneObject(container);
	
	    newContainer.content = container.content.map(function(child, i)  
	        {return Object.assign({}, child, {$size:dimensions[i]});}
	    );
	
	    return transform(json, { replace: {node: container, replacement: newContainer} });
	
	}
	
	function tab(json, $__0  ){var container=$__0.container,idx=$__0.idx,nextIdx=$__0.nextIdx;
	
	    var content = container.content;
	    var newContainer = shallowCloneObject(container);
	    newContainer.activeTab = nextIdx;
	
	    var selectedTab = shallowCloneObject(content[idx]);
	    var nextSelectedTab = shallowCloneObject(content[nextIdx]);
	
	    selectedTab.$size = {flexShrink:0, flexGrow:0, flexBasis:0};
	    nextSelectedTab.$size = {flexShrink:1, flexGrow:1, flexBasis:1};
	
	    content[idx] = selectedTab;
	    content[nextIdx] = nextSelectedTab;
	
	    return transform(json, { replace: {node: container, replacement: newContainer} });
	
	}
	
	function resize(json, $__0 ){var container=$__0.container,dimensions=$__0.dimensions;
	
	    var newContainer = shallowCloneObject(container);
	
	    newContainer.content = container.content.map(function(child, idx)  
	        {return Object.assign({}, child, {$size:dimensions[idx]});}
	    );
	
	    return transform(json, { replace: {node: container, replacement: newContainer} });
	
	}
	
	function minimize(json, $__0){var component=$__0.component;
	
	    var target = component.props.json;
	    var $__1=    target.$size,flexBasis=$__1.flexBasis,flexShrink=$__1.flexShrink,flexGrow=$__1.flexGrow;
	    var $origin = {flexBasis:flexBasis, flexGrow:flexGrow, flexShrink:flexShrink};
	
	    return transform(json,{configure: {
	        target:target, 
	        config: {$size:{flexGrow:0,flexShrink:0,flexBasis:32}, $origin:$origin}
	    }});
	}
	
	function restore(json, $__0){var component=$__0.component;
	
	    var target = component.props.json;
	
	    return transform(json,{configure: {
	        target:target, 
	        config: {$size:{flexGrow:1,flexShrink:1,flexBasis:1}}
	    }});
	}
	
	function remove(json, $__0){var component=$__0.component;
	    return transform(json,{
	        remove: {node: component.props.json}
	    });
	}
	
	function drop(json, $__0   ){var component=$__0.component,$__1=$__0.dropTarget,targetComponent=$__1.component,pos=$__1.pos,releaseSpace=$__0.releaseSpace;
	
	    //TODO insert a placeholder if there is no flexibility in the remaining peers of a draggee
	    var droppedContainer = component.props.container;
	
	    var source = component.props.json;
	    var target = targetComponent.props.json;
	    var sourceContainer = droppedContainer.props.json;
	    var targetContainer = targetComponent.props.container.props.json;
	
	    if (sourceContainer === target){
	        return dropComponentOntoOwnContainer(json, pos, sourceContainer, targetContainer, source, target);
	    }
	    else if (pos.position.Header){
	
	        if (target.type === 'Tabs'){ console.log('CASE 2 Works)');
	            // We have dropped a Component onto a sibling within the same container. The sibling is a TabbedContainer 
	            // and we have dropped the Component onto its Tabstrip.
	             return transform(json,{
	                insert: {node: source, container: target},
	                remove: {node:source}
	            });
	        }
	        else { console.log('CASE 3 Works)'); 
	            // We have dropped a Component onto the header of a sibling Component within the same Container.
	            return transform(json, { wrap: {target:target, source:source, pos:pos }}); 
	        }
	    }
	    else if (sourceContainer === targetContainer){
	        return dropWithinContainer(json, pos, sourceContainer, source, target);
	    }
	    else { 
	        return dropIntoDifferentContainer(json, pos, source, sourceContainer, target, targetContainer, releaseSpace);
	    }  
	
	}
	
	function dropWithinContainer(json, pos, container, source, target){
	
	    if (againstTheGrain(pos, container)){
	
	        if (container.content.length === 2 && withTheGrain(pos, containerOf(json, container))){console.log('CASE 4) Works');
	            // We have two Components in  container and have dropped one onto the other, reversing the original orientation
	            // of the container, but aligned with the orientation of the parent container. eg 2 components in a Row, nested
	            // inside a Column. Drop one component North of ther other - both components can now be managed as items in the 
	            // Column layout, we can dispose of the intervening Row layout.
	            var content = pos.position.SouthOrEast ? [target, source] : [source, target];
	            return transform(json, { replace: {node: container, replacement: content}});
	        }
	        else { console.log('CASE 6 Works)');
	            // Drop a Component onto one of its siblings against the grain of their shared container - both Component and 
	            // target need to be wrapped in a nested 'contra-container', within the original container.    
	            return transform(json, { wrap: {target:target, source:source, pos:pos }}); 
	        }
	    }
	    else { 
	        
	        return moveComponentWithinContainer(json, pos, container, source, target);
	
	    }
	    
	}
	
	function dropIntoDifferentContainer(json, pos, source, sourceContainer, target, targetContainer, releaseSpace){
	
	    if (target === json || isDraggableRoot(json, target)){ 
	        // Can only be against the grain...
	        if (withTheGrain(pos, target)){
	            throw('How the hell did we do this');
	        }
	        else { console.log('CASE 14.c) Works');
	            return transform(json, { wrap: {target:target, source:source, pos:pos }, releaseSpace:releaseSpace}); 
	        }
	    }
	    else if (withTheGrain(pos, targetContainer)){
	        // Insert into a new container, with the grain
	        if (pos.position.SouthOrEast){ console.log('CASE 15) Works');
	            return transform(json,{
	                releaseSpace:releaseSpace,
	                insert: {node: source, after: target, pos:pos},
	                remove: {node:source}});
	            //json = insertAfter(json, target, source);
	        }
	        else { console.log('CASE 16) Works');
	            return transform(json,{
	                releaseSpace:releaseSpace,
	                insert: {node: source, before: target},
	                remove: {node:source, from:sourceContainer}});
	        }
	    }
	    else if (againstTheGrain(pos, targetContainer)){ console.log('CASE 17) Works.');
	        return transform(json, { wrap: {target:target, source:source, pos:pos }, releaseSpace:releaseSpace}); 
	    }
	    else {
	        console.log('no support right now for position = ' + pos.position);
	    }
	    return json;
	}
	
	function dropComponentOntoOwnContainer(json, pos, sourceContainer, targetContainer, source, target){
	    // If we have pulled a Component out of a container and are now dropping to split that container
	    // we have to be very careful about the sequence of steps. If we first removed the source from 
	    // our model - it's container would also be replaced and we would not be able to locate it in a subsequent
	    // replace step;
	    if (targetContainer === sourceContainer){
	        if (pos.position.Header){
	            // We have dragged a Tab from a TabbedContainer and are now dropping it back onto the original Tabstrip.
	            console.log('CASE 1) Works'); // still needs to deal with selected tab
	            return json;
	        }
	        // beyond here means have accepted the nextDropTarget, navigating up layout structure
	        else if (withTheGrain(pos, sourceContainer)){
	
	            var content = sourceContainer.content;
	            target = pos.position.SouthOrEast ?  content[content.length-1] : content[0];
	            return moveComponentWithinContainer(json, pos, sourceContainer, source, target);
	
	        }
	        else if (againstTheGrain(pos, sourceContainer)){
	            // ???
	            return json;
	
	        }
	    }
	
	    if (target === json || againstTheGrain(pos, containerOf(json,sourceContainer))){console.log('CASE 9) Works');
	        return transform(json, { wrap: {target:sourceContainer, source:source, pos:pos }}); 
	    }
	    else if (pos.position.SouthOrEast){ console.log('CASE 10) Works');
	        return transform(json,{ insert: {node: source, after: sourceContainer, pos:pos}, remove: {node:source}});
	    }
	    else { console.log('CASE 11) Works.');
	        return transform(json,{ insert: {node: source, before: sourceContainer}, remove: {node:source}});
	    }
	}
	
	function moveComponentWithinContainer(json, pos, container, source, target){
	
	    // We're moving a component within its Container
	    var idx1 = container.content.indexOf(source);
	    var targetIdx = container.content.indexOf(target);
	
	    if ((pos.position.SouthOrEast && idx1 - targetIdx === 1) || (pos.position.NorthOrWest && idx1 - targetIdx === -1)){
	        // Dropping component back into original position
	        return json;
	    }
	    else if (pos.position.SouthOrEast){  console.log('CASE 7 Works)');
	        return transform(json, { move: {source:source, after: target}});
	    }
	    else if (pos.position.NorthOrWest){ console.log('CASE 8) Works');
	        return transform(json,{ move: {source:source, before: target}});
	    }
	    else {
	        console.log('#1   Do not currently support dropping at position ' + pos.position);
	        return json;
	    }
	
	}
	
	function isDraggableRoot(json,component){
	    var container = containerOf(json, component);
	    if (container){
	        return container.type === 'App';
	    }
	    else {
	        debugger;
	    }
	}
	
	// Note: withTheGrain is not the negative of againstTheGrain - the difference lies in the 
	// handling of non-Flexible containers, the response for which is always false;
	function withTheGrain(pos, container){
	
	    return pos.position.NorthOrSouth ?  isTower(container)    
	         : pos.position.EastOrWest   ?  isTerrace(container)
	         : false;
	}
	
	function againstTheGrain(pos, container){
	    
	    return pos.position.EastOrWest   ?  isTower(container)  || isTabset(container)  
	         : pos.position.NorthOrSouth ?  isTerrace(container) || isTabset(container) 
	         : false;
	
	}
	
	function isTabset(container){
	    return container.type === "Tabs";
	}
	
	function isTower(container){
	    return container.type === "FlexBox" && container.flexOrientation === "column";
	}
	
	function isTerrace(container){
	    return container.type === "FlexBox" && container.flexOrientation === "row";
	}
	
	function containerOf(json, target){
	
	
	    if (typeof target !== 'object' || Array.isArray(target)){
	        throw "containerOf can only be used to find Object types";
	    }
	
	    if (typeof json.content === undefined || !Array.isArray(json.content)){
	        return null;
	    }
	
	    var found = false;
	    var result;
	    var content = json.content;
	
	    if (content.indexOf(target) !== -1){
	        return json;
	    }
	
	    for (var i=0;i<content.length;i++){
	        if (contains(content[i],target)){
	            return containerOf(content[i],target);
	        }
	    }
	
	    return null;
	
	}
	
	function contains($__0, target){var content=$__0.content;
	        
	    if (Array.isArray(content)){
	        for (var i=0;i<content.length;i++){
	            if (content[i] === target){
	                return true;
	            }
	            else if (contains(content[i],target)){
	                return true;
	            }
	        }
	    }
	    
	    return false;
	
	}

/***/ },
/* 22 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/util/componentFromJson.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	"use strict";
	
	var React = __webpack_require__(/*! react */ 27);
	
	var Container 	= __webpack_require__(/*! ../Container */ 13);
	var Component 	= __webpack_require__(/*! ../Component */ 5);
	var FlexBox 	= __webpack_require__(/*! ../FlexBox */ 3);
	var LayoutItem 	= __webpack_require__(/*! ../LayoutItem */ 4);
	var PlaceHolder = __webpack_require__(/*! ../PlaceHolder */ 12);
	var Tabs		= __webpack_require__(/*! ../TabbedContainer */ 31);
	
	var primaryTypes = __webpack_require__(/*! ../../examples/sample-components/types */ 32);
	var components = __webpack_require__(/*! ../../examples/sample-components/components */ 33);
	
	var LayoutTypes = {Container:Container, Component:Component, FlexBox:FlexBox, Tabs:Tabs, TabbedContainer:Tabs,PlaceHolder:PlaceHolder, LayoutItem:LayoutItem};
	
	var Types = {};
	
	function componentFromJSON(json, types){
	
		Types = types || {};
	
		var component = _componentFromJSON(json);
	
		Types = null;
	
		return component;
	}
	
	function _componentFromJSON(json, idx){
	
		if (Array.isArray(json)){
			return json.map(componentFromJSON);
		}
		else if (json == null){
			return null
		}
	
		var $__0=    json,type=$__0.type,content=$__0.content,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{type:1,content:1});
		var ReactType, BoxedType, boxedComponent;
	
		ReactType = LayoutTypes[type];
	
		if (ReactType === undefined){
			if (React.DOM[type]){
				ReactType = type;
			}
			else if (Types[type]){
				ReactType = Types[type];
			}
			else if (primaryTypes[type]){
				ReactType = primaryTypes[type];
			}
			else {
				ReactType = Component;
				BoxedType = components[type];
				if (BoxedType === undefined){
					throw "componentFromJSON: unknown component type: " + type;
				}
			}
		}
	
		var children = content ? content.map(_componentFromJSON) : null;
		if (BoxedType){
			boxedComponent = React.createElement(BoxedType, null, children);
		}
	
		return (
			React.createElement(ReactType, React.__spread({key: idx | 0},  props, {json: json}), 
				boxedComponent || children
			)
		);
	}
	
	
	module.exports = componentFromJSON;

/***/ },
/* 23 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/util/pathUtils.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	function addPaths (json, path){
		json.$path = path || (path = '0');
		if (json.content){
			json.content.forEach(function(json,idx)  {return addPaths(json, path + '.' + idx);})
		}
	}
	
	
	
	function followPath(json, path){
		var paths = path.split('.');
		for (var i=1; i < paths.length ;i++){
			json = (json.content || json.nestedBoxes)[paths[i]];
		}
		return json;
	}
	
	function followPathToParent(json, path){
		if (path === '0') return null;
		return followPath(json, path.replace(/.\d+$/,''));
	}
	
	function adjustPath(path, removedPath, containerRemoved){
	
		var steps = path.split('.');
		var rem = removedPath.split('.');
	
	
		// pos needs to be first point at which paths differ, not necessarily last pos
		var pos = forkPoint(steps, rem);
		var remIdx = parseInt(rem[pos]);
		var stepIdx = parseInt(steps[pos]);
	
		if (pos === rem.length-1){
	
			if (containerRemoved === 1){
				steps.splice(pos,1);
				return steps.join('.');
			}
			else if (containerRemoved === 2){
				steps.splice(pos-1,2);
				var topLevelIdx = parseInt(rem[pos-1],10);
				steps[pos-1] = parseInt(steps[pos-1]) + topLevelIdx;
	
				return steps.join('.');
			}
	
			if (remIdx < stepIdx){
				steps[pos] = parseInt(steps[pos]) - 1;
				return steps.join('.')
			}
	
		}
	
		if (containerRemoved && remIdx === stepIdx){
			return path.replace(/.\d+$/,'');
		}
		else {
			return path;
		}
	
	
	}
	
	module.exports = {addPaths:addPaths, followPath:followPath, followPathToParent:followPathToParent, adjustPath:adjustPath}
	
	function forkPoint(path1,path2){
		var len = Math.min(path1.length, path2.length);
	
		for (var i=0;i<len;i++){
			if (path1[i] !== path2[i]){
				return i;
			}
		}
		return -1;
	}


/***/ },
/* 24 */
/*!****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/serialize.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	var React = __webpack_require__(/*! react */ 27);
	
	function serialize(source){
		
		function toString(json, d){
			return [
				("$" + json.$path + ": <" + type(json) + ">" + (json.title ? ' ' + json.title:'') + " " + clientRect(json))
			].concat(
				json.content === undefined ? [] :
				json.content.map(function(j)  {return tabs(d) + toString(j,d+1);})).join('\n');
		}
	
		if (React.isValidElement(source)){
			return toString(source.props.json,1);
		}
		else {
			return toString(source,1);
		}
	
	
	}
	
	function type(json){
		if (json.type === 'FlexBox'){
			return json.flexOrientation === 'column' ? 'Tower' : 'Terrace';
		}
		else {
			return json.type;
		}
	}
	
	function tabs(length){
		return Array.apply(null,Array(length)).map(function(i)  {return '\t';}).join('');
	}
	
	function layout(json){
		if (json.layout === undefined) return '';
	
		return ['layout:['].concat([json.layout.map(function(l)  {return (l.flexGrow + ":" + l.flexShrink + ":" + l.flexBasis);}).join(' ')]).concat(']').join('');
	}
	
	function clientRect(json){
		var cr = json.$clientRect;
	
		if (cr === undefined) return '';
	
		return ("clientRect:[" + cr.top + "," + cr.right + "," + cr.bottom + "," + cr.left + " " + cr.width + "x" + cr.height + "]");
	
	}
	
	
	module.exports = serialize;
	
	


/***/ },
/* 25 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-services/lib/index.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $__0=    __webpack_require__(/*! ./PopupService */ 48),DialogService=$__0.DialogService,PopupService=$__0.PopupService,Popup=$__0.Popup;
	
	module.exports = {
		DialogService:DialogService,
		PopupService:PopupService,
		Popup:Popup
	}

/***/ },
/* 26 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/index.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var indexOf 			= __webpack_require__(/*! ./indexOf */ 52);
	var markEventAsHandled 	= __webpack_require__(/*! ./markEventAsHandled */ 53);
	var padDecimal 			= __webpack_require__(/*! ./padDecimal */ 54);
	var SelectionModel 		= __webpack_require__(/*! ./SelectionModel */ 55);
	var ExpansionModel 		= __webpack_require__(/*! ./ExpansionModel */ 56);
	var KeyboardHandler 	= __webpack_require__(/*! ./KeyboardHandler */ 57);
	var Draggable 			= __webpack_require__(/*! ./Draggable */ 58);
	var emptyFunction 		= __webpack_require__(/*! ./emptyFunction */ 59);
	var shallowEqual 		= __webpack_require__(/*! ./shallowEqual */ 60);
	var shallowCloneObject 	= __webpack_require__(/*! ./shallowCloneObject */ 61);
	var isFunction 			= __webpack_require__(/*! ./isFunction */ 62);
	var parseInt			= __webpack_require__(/*! ./parseInt */ 63);
	var parseFloat			= __webpack_require__(/*! ./parseFloat */ 64);
	var uuid				= __webpack_require__(/*! ./uuid */ 65);
	var evt 				= __webpack_require__(/*! ./evt */ 66);
	var merge 				= __webpack_require__(/*! ./merge */ 67);
	var mergeInto 			= __webpack_require__(/*! ./mergeInto */ 68);
	var invariant			= __webpack_require__(/*! ./invariant */ 69);
	var copyProperties 		= __webpack_require__(/*! ./copyProperties */ 70);
	var toLocaleString		= __webpack_require__(/*! ./toLocaleString */ 71);
	
	module.exports = {
		indexOf:indexOf,
		markEventAsHandled:markEventAsHandled,
		padDecimal:padDecimal,
		SelectionModel:SelectionModel,
		ExpansionModel:ExpansionModel,
		KeyboardHandler:KeyboardHandler,
		Draggable:Draggable,
		emptyFunction:emptyFunction,
		shallowEqual:shallowEqual,
		shallowCloneObject:shallowCloneObject,
		isFunction:isFunction,
		parseInt:parseInt,
		parseFloat:parseFloat,
		uuid:uuid,
		evt:evt,
		merge:merge,
		mergeInto:mergeInto,
		invariant:invariant,
		copyProperties:copyProperties,
		toLocaleString:toLocaleString
	}

/***/ },
/* 27 */
/*!*********************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/react.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./lib/React */ 35);


/***/ },
/* 28 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/DropTargetCanvas.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	"use strict";
	
	var Layout          = __webpack_require__(/*! ./Layout */ 21);
	var DropMenu        = __webpack_require__(/*! ./DropMenu */ 49);
	var PopupService    = __webpack_require__(/*! react-services */ 25).PopupService;
	
	var NORTH = Layout.position.North,
	    SOUTH = Layout.position.South,
	    EAST = Layout.position.East,
	    WEST = Layout.position.West,
	    HEADER = Layout.position.Header;
	
	var _rootDropTarget;
	var _multiDropOptions = false;
	var _currentDropTarget;   
	var _multiDropLoopTime = 1500;
	var _dropMenu = false;
	
	
	
		function DropTargetCanvas(){
			var canvas = document.createElement('canvas');
			canvas.className = 'fullscreen';
	
	
			document.body.appendChild(canvas);
	
			this.canvas = canvas;
	
			this.w = document.body.clientWidth;
			this.h = document.body.clientHeight;
		}
	
	
		DropTargetCanvas.prototype.prepare=function(){
	
	       this.canvas.classList.add("ready");
	
		};;
	
	
		DropTargetCanvas.prototype.clear=function(){
	        this.canvas.classList.remove("ready");
	        if (_dropMenu){
	            PopupService.hidePopup();
	            _dropMenu = false;
	        }
		};
	
		DropTargetCanvas.prototype.draw=function(dropTarget){
	
	        //onsole.log('DropTargetCanvas.draw ', JSON.stringify(layout));
	
			_rootDropTarget = dropTarget;
			_currentDropTarget = null;
			_multiDropOptions = typeof dropTarget.nextDropTarget === 'object';
	
	        console.log('draw, _multiDropOptions = ' + _multiDropOptions);
	
	        if (_dropMenu){
	            PopupService.hidePopup();
	            _dropMenu = false;
	        }
	
			draw(this.canvas, dropTarget, this.w, this.h);
	
		};
	
	
	
	
	module.exports = DropTargetCanvas;
	
	
	function setWidth(canvas,w,h){
	
		canvas.width = w;
		canvas.height = h;
	}
	
	
	
	function draw(canvas, dropTarget, w, h, skipDropOptions){
	
		setWidth(canvas, w, h);
	
		var ctx = canvas.getContext('2d');
	
	    if (_currentDropTarget){
	    	_currentDropTarget.active = false;
	    }    
	
		//onsole.log('activate drop target',dropTarget);	    
	    _currentDropTarget = dropTarget;
	    dropTarget.active = true;
	
	    var refs = dropTarget.component.refs;
	    var header = refs && (refs.header || refs.tabstrip);
		if (dropTarget.pos.position === HEADER && header){
	
		    drawTabbedOutline(ctx, dropTarget, w, h);
		}
		else {
		    drawOutline(ctx, dropTarget, w, h);
		}
	
	    if (_multiDropOptions){
		    var nextPos = dropTarget.nextDropTarget || _rootDropTarget;
	        if (skipDropOptions !== true){
	            drawDropOptions(canvas, dropTarget, w, h);
	        }
	    }
	
	}
	
	function drawTabbedOutline(ctx, dropTarget, w, h){
	
	    console.log('draw TabbedOitline of ' + dropTarget.component.constructor.displayName);
	
	    var box = dropTarget.component.props.json.$clientRect,
	        header = dropTarget.component.refs.header || dropTarget.component.refs.tabstrip,
	        headerBox = header.props.json.$clientRect;
	
	    var t = Math.round(headerBox.top),
	        l = /*header.name === 'Tabstrip' ? Math.round(header.tabRight) :*/ Math.round(headerBox.left),
	        r = Math.round(headerBox.right),
	        b = Math.round(headerBox.bottom);
	
	    
	    ctx.beginPath();
	
	    var lineWidth = 6;
	    var inset = 0;
	    var headOffset = (header.top - box.top) + header.height;
	    
	    var gap = Math.round(lineWidth/2) + inset;
	    var $__0=   box,top=$__0.top,left=$__0.left,right=$__0.right,bottom=$__0.bottom;
	    
	    setCanvasStyles(ctx, {lineWidth:lineWidth,  strokeStyle:'yellow'});
	    
	 
	    drawTab(ctx,l+gap, t+gap, r, b, top, left+gap, right-gap, bottom-gap);
	
	    ctx.stroke();
	
	}
	
	function drawTab(ctx, l, t, r, b, top, left, right, bottom){
	
	    var radius = 5;
	
	    var x = l;
	    var y = t;
	    var width = 100;
	    var height = b - t;
	    var fill = false;
	    var stroke = true;
	
	    ctx.lineJoin = 'round';
	
	      ctx.beginPath();
	      
	      ctx.moveTo(x, y + height);
	      ctx.lineTo(x, y + radius);
	      ctx.quadraticCurveTo(x,y,x + radius, y);
	      ctx.lineTo(x + width - radius, y);
	      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
	      ctx.lineTo(x + width, y + height);
	
	      ctx.lineTo(right, y + height);
	      ctx.lineTo(right, bottom);
	      ctx.lineTo(left, bottom);
	      ctx.lineTo(left, y+height);
	
	
	       ctx.closePath();
		
	      if (stroke) {
	        ctx.stroke();
	      }
	      if (fill) {
	        ctx.fill();
	      }        
	
	}
	
	function drawOutline(ctx, dropTarget, w, h){
	
	    var component = dropTarget.component, 
	        targetPosition = dropTarget.pos.position;
	
	    var size = null;
	    
	    //onsole.log(`layout=${JSON.stringify(layout)}`);
	
	    if (dropTarget.pos.width){
	        size = {width: dropTarget.pos.width}
	    }
	    else if (dropTarget.pos.height){
	        size = {height: dropTarget.pos.height}
	    }
	
	//    var rect = component.getDOMNode().getBoundingClientRect();
	    var rect = component.props.json.$clientRect;
	
	    var t = Math.round(rect.top),
	        l = Math.round(rect.left),
	        r = Math.round(rect.right),
	        b = Math.round(rect.bottom);
	
	    var lineWidth = 6;
	
	    setCanvasStyles(ctx, {
	    	lineWidth:lineWidth,
	    	strokeStyle:'yellow'
	    });
	
	    ctx.beginPath();
	
	    var inset = 0;
	    var gap = Math.round(lineWidth/2) + inset;
	 
	    switch(targetPosition){
	
	        case NORTH:
	        case HEADER:
	            var halfHeight = Math.round((b-t)/2);
	            var sizeHeight = (size && size.height) ? size.height : 0;
	            var height = sizeHeight ? Math.min(halfHeight,Math.round(sizeHeight)) : halfHeight;            
	            drawRect(ctx, l+gap, t + gap, r-gap, t + gap + height);
	            break;
	
	        case WEST:
	            var halfWidth = Math.round((r-l)/2);
	            var sizeWidth = (size && size.width) ? size.width : 0; 
	            var width = sizeWidth ? Math.min(halfWidth,Math.round(sizeWidth)) : halfWidth;
	            drawRect(ctx, l + gap, t+gap, l + gap + width, b-gap);
	            break;
	
	        case EAST:
	            var halfWidth = Math.round((r-l)/2);
	            var sizeWidth = (size && size.width) ? size.width : 0; 
	            var width = sizeWidth ? Math.min(halfWidth,Math.round(sizeWidth)) : halfWidth;
	            drawRect(ctx, (r-gap) - width, t+gap, r-gap, b-gap);
	            break;	        
	        
	        case SOUTH:
	            var halfHeight = Math.round((b-t)/2);
	            var sizeHeight = (size && size.height) ? size.height : 0;
	            var height = sizeHeight ? Math.min(halfHeight,Math.round(sizeHeight)) : halfHeight;            
	        
	            drawRect(ctx, l+gap, (b - gap) -height, r-gap, b - gap);
	            break;
	        
	        default:
	
	            console.log('DropTargetCanvas what are we doing here ?');
	    }
	
	    ctx.closePath();
	    ctx.stroke();
	
	
	    // if (dropTarget.pos.closeToTheEdge == dropTarget.pos.position){
	
	    // 	var zone = 30;
	
	    //     ctx.beginPath();
	    //     ctx.fillStyle = 'rgba(0,0,0,.25)';
	
	    //     //TODO if op is 'insert' we may not be at the edge - may be 
	    //     // somewhere in middle of a tower or terrace - look at index
	    //     var g = 6;
	
	    //     zone = zone - gap;
	
	    //     console.log(_rootDropTarget.pos.position , dropTarget.pos.position);
	    //     switch (_rootDropTarget.pos.position ){
	    //         case NORTH: drawRect(ctx,l+g,t+g,r-g,t+g+zone); break;
	    //         case SOUTH: drawRect(ctx,l+g,b-g-zone,r-g,b-g); break;
	    //         case EAST: drawRect(ctx,r-g-zone,t+g,r-g,b-g); break;
	    //         case WEST: drawRect(ctx,l+g,t+g,l+zone,b-g); break;
	    //     }
	
	    //     ctx.closePath();
	    //     ctx.fill();
	
	    // }
	}
	
	function drawDropOptions(canvas, dropTarget, w, h){
	
	    console.log('draw Drop Options');
	
	    PopupService.showPopup({component : (
	            React.createElement(DropMenu, {dropTarget: dropTarget, 
	                onMouseOver: handleMouseOver(canvas, w, h)}) )});
	
	    _dropMenu = true;
	
	}
	
	function handleMouseOver(canvas, w, h){
	    return function(dropTarget){
	        draw(canvas, dropTarget, w, h, true);
	    };
	}
	
	
	function setCanvasStyles(ctx, styles){
		ctx.strokeStyle = styles.strokeStyle || 'black';
		ctx.lineWidth = styles.lineWidth || 2;
		ctx.fillStyle = styles.fillStyle || 'rgba(255,0,0,.5)';
	
		// if (_multiDropOptions){
		// 	ctx.setLineDash([15,10]);
		// }
	}
	
	function drawRect(ctx, x1, y1, x2, y2){
	
	    ctx.moveTo(x1,y1);
	    ctx.lineTo(x2,y1);
	    ctx.lineTo(x2,y2);
	    ctx.lineTo(x1,y2);
	
	
	}
	
	


/***/ },
/* 29 */
/*!****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/DragState.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var BoxModel = __webpack_require__(/*! ./BoxModel */ 19);
	
	var SCALE_FACTOR = 0.4;
	
	
	
	    function DragState(zone, component, mouseX, mouseY){
	        this.init(zone, component, mouseX, mouseY);
	    }
	
	    DragState.prototype.init=function(zone, component, mouseX, mouseY){
	        
	        var json = component.state.json || component.props.json;
	        var rect = json.$clientRect;
	        if (rect.height === 0){ // non-selected child in TabbedContainer
	            rect = component.props.container.props.json.$clientRect;
	        }
	
	        var $__0=     rect,x=$__0.left,y=$__0.top;
	
	        var mousePosition = BoxModel.pointPositionWithinComponent(mouseX,mouseY,component);
	
	        // We are applying a scale factor of 0.4 to the draggee. This is purely a visual
	        // effect - the actual box size remains the original size. The 'leading' values 
	        // represent the difference between the visual scaled down box and the actual box.
	
	        var scaleFactor = SCALE_FACTOR;
	
	        var leadX = mousePosition.pctX * rect.width;
	        var trailX = rect.width - leadX;
	        var leadY = mousePosition.pctY * rect.height;
	        var trailY = rect.height - leadY;
	
	        // When we assign position to rect using css. positioning units are applied to the 
	        // unscaled shape, so we have to adjust values to take scaling into account.
	        var scaledWidth = rect.width * scaleFactor,
	            scaledHeight = rect.height * scaleFactor;
	
	        var scaleDiff = 1 - scaleFactor;
	        var leadXScaleDiff = leadX * scaleDiff; 
	        var leadYScaleDiff = leadY * scaleDiff; 
	        var trailXScaleDiff = trailX * scaleDiff; 
	        var trailYScaleDiff = trailY * scaleDiff; 
	
	        this.constraint = {
	            zone : {
	                x : {
	                    lo: zone.left,
	                    hi: zone.right
	                },
	                y : {
	                    lo: zone.top,
	                    hi: zone.bottom
	                }
	            },
	
	            pos : {
	                x : {
	                    lo: /* left */ zone.left - leadXScaleDiff,
	                    hi: /* right */ zone.right - rect.width + trailXScaleDiff
	                },
	                y : {
	                    lo: /* top */ zone.top - leadYScaleDiff,
	                    hi: /* bottom */ zone.bottom - rect.height + trailYScaleDiff
	                }
	            },
	            mouse :{
	                x : {
	                    lo: /* left */ zone.left + scaledWidth * mousePosition.pctX,
	                    hi: /* right */ zone.right - scaledWidth * (1-mousePosition.pctX)
	                },
	                y: {
	                    lo: /* top */ zone.top + scaledHeight * mousePosition.pctY,
	                    hi: /* bottom */ zone.bottom - scaledHeight * (1-mousePosition.pctY)
	                }
	            }
	        };
	
	        //onsole.log(JSON.stringify(this.constraint,null,2));
	
	        this.x = {pos:x, lo: false, hi: false, mousePos: mouseX, mousePct: mousePosition.pctX};
	        this.y = {pos:y, lo: false, hi: false, mousePos: mouseY, mousePct: mousePosition.pctY};
	
	    };
	
	    DragState.prototype.outOfBounds=function(){
	        return this.x.lo || this.x.hi || this.y.lo || this.y.hi;
	    };
	
	    DragState.prototype.inBounds=function(){
	        return !this.outOfBounds();
	    };
	
	    DragState.prototype.dropX=function(){
	        return dropXY.call(this,'x');
	    };
	
	    DragState.prototype.dropY=function(){
	        return dropXY.call(this,'y');
	    };
	
	
	    /*
	     *  diff = mouse movement, signed int
	     *  xy = 'x' or 'y'
	     */
	     //todo, diff can be calculated in here
	    DragState.prototype.update=function(xy, mousePos){
	
	        var state = this[xy],
	            mouseConstraint = this.constraint.mouse[xy],
	            posConstraint = this.constraint.pos[xy],
	            previousPos = state.pos;
	
	       var diff = mousePos - state.mousePos;
	
	       //xy==='x' && console.log(`update: state.lo=${state.lo}, mPos=${mousePos}, mC.lo=${mouseConstraint.lo}, prevPos=${previousPos}, diff=${diff} `  );
	
	        if (diff < 0){
	            if (state.lo) {/* do nothing */}
	
	            else if (mousePos < mouseConstraint.lo){
	                state.lo = true;
	                state.pos =  posConstraint.lo;
	            }
	            else if (state.hi){
	                if (mousePos < mouseConstraint.hi){
	                    state.hi = false;
	                    state.pos += diff;
	                }
	            }
	            else {
	                state.pos += diff;
	            }
	        }
	        else if (diff > 0){
	            if (state.hi){/* do nothing */}
	
	            else if (mousePos > mouseConstraint.hi){
	                state.hi = true;
	                state.pos =  posConstraint.hi;
	            }
	            else if (state.lo){
	                if (mousePos > mouseConstraint.lo){
	                    state.lo = false;
	                    state.pos += diff;
	                }
	            }
	            else {
	                state.pos += diff;
	            }
	        }
	
	        state.mousePos = mousePos;
	
	        return previousPos !== state.pos;
	
	    };
	
	
	
	module.exports = DragState;
	
	function dropXY(dir){
	
	    var pos = this[dir],
	        rect = this.constraint.zone[dir];
	        // why not do the rounding +/- 1 on the rect initially - this is all it is usef for
	    return pos.lo ? Math.max(rect.lo,pos.mousePos) : pos.hi ? Math.min(pos.mousePos, Math.round(rect.hi) -1) : pos.mousePos;
	
	}
	


/***/ },
/* 30 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/util/jsonUtils.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shallowCloneObject = __webpack_require__(/*! ./shallowCloneObject */ 10);
	var $__0=    __webpack_require__(/*! ./pathUtils */ 23),addPaths=$__0.addPaths,adjustPath=$__0.adjustPath,followPath=$__0.followPath;
	
	
	function transform(json,options){
	
		var nodeToBeMoved;
		var nodeToBeRemoved;
		var containerOfNodeToBeRemoved;
		var pathToBeReplaced;
		var replacementNode;
	    var nodeToBeInserted;
		var nodeToBeConfigured;
		var containerIntoWhichToInsert;
		var nodeAfterWhichToInsert;
		var nodeBeforeWhichToInsert;
		var wrappedNode1;
		var wrappedNode2;
		var nodeSize;
	    var config;
	    var containerRemoved;
	    var placeHolderUsed = true;
	    var releaseSpace = 'close';
	    var pos;
	
		for (var op in options){
			var opts = options[op];
			switch(op){
	
	            case 'releaseSpace':
	                releaseSpace = opts;
	                break;
	
				case 'move':
	
					nodeToBeMoved = opts.source;
					if (opts.before){
						console.log(("transform: move before ") + opts.before.$path);
						nodeBeforeWhichToInsert = opts.before.$path;
					}
					else if (opts.after){
						console.log(("transform: move after ") + opts.after.$path);
						nodeAfterWhichToInsert = opts.after.$path;
					}
					break;
	
	            case 'configure':
	                nodeToBeConfigured = opts.target;
	                config = opts.config;
	                break;
	
				case 'wrap':
	                pos = opts.pos;
					nodeToBeRemoved = opts.source;
					wrappedNode1 = opts.target;
					wrappedNode2 = opts.source;
					break;
	
				case 'insert':
					nodeToBeInserted = opts.node;
	
					nodeSize = opts.pos ? (opts.pos.width || opts.pos.height): undefined;
	
					if (opts.container){
						console.log(("transform: insert into container ") + opts.container.$path);
						containerIntoWhichToInsert = opts.container.$path;
					}
					else if (opts.before){
						console.log(("transform: insert before ") + opts.before.$path);
						nodeBeforeWhichToInsert = opts.before.$path;
					}
					else if (opts.after){
						console.log(("transform: insert after ") + opts.after.$path);
						nodeAfterWhichToInsert = opts.after.$path;
					}
					break;
	
				case 'replace':
					console.log(("transform: replace node at ") + opts.node.$path);
					pathToBeReplaced = opts.node.$path;
					replacementNode = opts.replacement;
					break;
	
				case 'remove' :
					console.log(("transform: remove node at ") + opts.node.$path);
					nodeToBeRemoved = opts.node;
					containerOfNodeToBeRemoved = opts.from;
					break;
			}
		}
	
		if (nodeToBeRemoved){
	        if (nodeToBeRemoved.type === 'PlaceHolder' || releaseSpace === 'close'){
	            var ret = remove(json, nodeToBeRemoved.$path);
	            containerRemoved = ret.containerRemoved;
	            json = ret.json;
	            placeHolderUsed = false;
	        }
	        else {
	            var ret = removeWithPlaceholder(json, nodeToBeRemoved.$path);
	            containerRemoved = ret.containerRemoved;
	            json = ret.json;
	        }
	
	
		}
	
		if (wrappedNode1 && wrappedNode2){
	
	        if (placeHolderUsed){
	            pathToBeReplaced = wrappedNode1.$path;
	        }
	        else {
	            pathToBeReplaced = adjustPath(wrappedNode1.$path, nodeToBeRemoved.$path, containerRemoved);
	        }
			replacementNode = wrap(pos, wrappedNode2, followPath(json, pathToBeReplaced));
		
	    }
	
	    if (nodeToBeConfigured){
	        json = configure(json,nodeToBeConfigured.$path, config);
	    }
	
	
		if (nodeToBeMoved){
	
			var path;
			var pos;
	
			if (path = nodeBeforeWhichToInsert){
				pos = parseInt(path.slice(path.lastIndexOf('.')+1));
			}
			else if (path = nodeAfterWhichToInsert){
				pos = parseInt(path.slice(path.lastIndexOf('.')+1)) + 1;
			}
	
			json = move(json, nodeToBeMoved.$path, pos);
		}
	
		if (pathToBeReplaced){
			json = replace(json, pathToBeReplaced, replacementNode);
		}
	
		if (nodeToBeInserted){
	
			if (nodeToBeRemoved){
	
	            if (!placeHolderUsed){
	                if (nodeAfterWhichToInsert){
	                    nodeAfterWhichToInsert = adjustPath(nodeAfterWhichToInsert, nodeToBeRemoved.$path, containerRemoved);
	                }
	                else if (nodeBeforeWhichToInsert){
	                    nodeBeforeWhichToInsert = adjustPath(nodeBeforeWhichToInsert, nodeToBeRemoved.$path, containerRemoved);
	                }
	                else {
	                    containerIntoWhichToInsert = adjustPath(containerIntoWhichToInsert, nodeToBeRemoved.$path, containerRemoved);
	                }
	            }
			}
	
			json = insert(json, nodeToBeInserted, containerIntoWhichToInsert, nodeBeforeWhichToInsert, nodeAfterWhichToInsert, nodeSize);
	
		}
	
	
		addPaths(json);
	
		return json;
	
	}
	
	function move(json, path, pos){
		var paths = path.split('.').slice(1).map(function(n)  {return parseInt(n,10);});
		var idx = paths[0];
	    var newJson = {};
	    var content;
	
	    for (var property in json){
	        if (property === 'content'){
	        	content = json.content;
	            newJson.content = content.slice();
	            if (paths.length === 1){
	            	newJson.content.splice(pos,0,newJson.content[idx]);
	            	if (pos < idx) idx += 1
	            	newJson.content.splice(idx,1);
	            }
	            else {
	            	newJson.content[idx] = move(content[idx], paths.join('.'), pos);
	            }
	        }
	        else {
	            newJson[property] = json[property];
	        }
	    }        
	
	    return newJson;
	
	
	}
	
	function insert(json, node, container, before, after, nodeSize){
	
		if (nodeSize){
			node = shallowCloneObject(node);
			var $__0=  node.$size,flexGrow=$__0.flexGrow,flexShrink=$__0.flexShrink;
			node.$size = {flexGrow:flexGrow,flexShrink:flexShrink,flexBasis:nodeSize};
		}
	
		if (after){
			return insertAfter(json, after, node, nodeSize);
		}
		else if (before){
			return insertBefore(json, before, node, nodeSize);
		}
		else {
			return insertInto(json, container, node, nodeSize);
		}
	}
	
	
	
	function insertInto(json, path, node, nodeSize){
	
		var paths = path.split('.').slice(1).map(function(n)  {return parseInt(n,10);});
		var idx = paths[0];
	    var newJson = {};
	    var content;
	
	    for (var property in json){
	        if (property === 'content'){
	        	content = json.content;
	            newJson.content = content.slice();
	            if (paths.length === 0){
	            	newJson.content.push(node);
	            }
	            else {
	            	newJson.content[idx] = insertInto(content[idx],paths.join('.'), node);
	            }
	        }
	        else {
	            newJson[property] = json[property];
	        }
	    }        
	
	    return newJson;
	    
	}
	
	function insertBefore(json, path, node, nodeSize){
	
		var paths = path.split('.').slice(1).map(function(n)  {return parseInt(n,10);});
		var idx = paths[0];
	    var newJson = {};
	    var content;
	
	    for (var property in json){
	        if (property === 'content'){
	        	content = json.content;
	            newJson.content = content.slice();
	            if (paths.length === 1){
	            	newJson.content.splice(idx,0,node);
	            }
	            else {
	            	newJson.content[idx] = insertBefore(content[idx],paths.join('.'), node);
	            }
	        }
	        else {
	            newJson[property] = json[property];
	        }
	    }        
	
	    return newJson;
	    
	}
	
	function insertAfter(json, path, node, nodeSize){
	
		var paths = path.split('.').slice(1).map(function(n)  {return parseInt(n,10);});
		var idx = paths[0];
	    var newJson = {};
	    var content;
	
	    for (var property in json){
	        if (property === 'content'){
	        	content = json.content;
	            if (paths.length === 1){
	            	if (nodeSize){
			       		var dimension = json.flexOrientation === 'column' ? 'height' : 'width';
			            newJson.content = assignBoxSizes(dimension, content);
		            	newJson.content.splice(idx+1,0,node);
	            	}
	            	else {
			       		var dimension = json.flexOrientation === 'column' ? 'height' : 'width';
			            newJson.content = assignBoxSizes(dimension, content);
		            	var size = Math.round(newJson.content[idx].$size.flexBasis/2);
		            	newJson.content.splice(idx+1,0,node);
		            	newJson.content[idx].$size.flexBasis = size;
		            	newJson.content[idx+1].$size.flexBasis = size;
	            	}
	            }
	            else {
	            	newJson.content = content.slice();
	            	newJson.content[idx] = insertAfter(content[idx],paths.join('.'), node, nodeSize);
	            }
	        }
	        else {
	            newJson[property] = json[property];
	        }
	    }        
	
	    return newJson;
	    
	}
	
	
	function replace(json, path, node){
	
		var paths = path.split('.').slice(1).map(function(n)  {return parseInt(n,10);});
		var idx = paths[0];
	    var newJson = {};
	    var content;
	
	    // replacing the root...
	    if (paths.length === 0){
	    	return node;
	    }
	
	    for (var property in json){
	        if (property === 'content'){
	            newJson.content = json.content.slice();
	            if (paths.length === 1){
	            	if (Array.isArray(node)){
	            		[].splice.apply(newJson.content,[idx,1].concat(node));
	            	}
	            	else {
	            		newJson.content[idx] = node;
	            	}
	            }
	            else {
	            	newJson.content[idx] = replace(json.content[idx],paths.join('.'), node);
	            }
	        }
	        else {
	            newJson[property] = json[property];
	        }
	    }        
	
	    return newJson;
	
	}
	
	
	function configure(json, path, config){
	
	    var paths = path.split('.').slice(1).map(function(n)  {return parseInt(n,10);});
	    var idx = paths[0];
	    var newJson = {};
	    var content;
	
	    // replacing the root...
	    if (paths.length === 0){
	        return Object.assign({}, node, config);
	    }
	
	    for (var property in json){
	        if (property === 'content'){
	            newJson.content = json.content.slice();
	            if (paths.length === 1){
	                newJson.content[idx] = Object.assign({},json.content[idx], config);
	            }
	            else {
	                newJson.content[idx] = configure(json.content[idx], paths.join('.'), config);
	            }
	        }
	        else {
	            newJson[property] = json[property];
	        }
	    }        
	
	    return newJson;
	
	}
	
	
	function removeWithPlaceholder(json, path){
	
	    var paths = path.split('.').slice(1).map(function(n)  {return parseInt(n,10);});
	    var idx = paths[0];
	    var newJson = {};
	    var content;
	    var result;
	    var containerRemoved = 0;
	
	    var activeTab = null;
	
	    for (var property in json){
	        if (property === 'content'){
	            content = json.content;
	            newJson.content = content.slice();
	            if (paths.length === 2 && content[idx].content.length === 2 && content[idx].type === 'Tabs'){
	
	                // our target is a twin, we need to unwrap the parent
	                var parentOfTwins = content[idx];
	                var remainingTwin = parentOfTwins.content[paths[1] === 0 ? 1 : 0];
	
	                // is remainingTwin itself a container, aligned with its new parent ?
	                if (alignedFlexBoxes(newJson, remainingTwin)){
	
	                    //TODO should clone here
	                    remainingTwin.content.forEach(function(c)  {
	                        c.$size.flexBasis = c.$clientRect[newJson.flexOrientation === 'column' ? 'height' :'width'];
	                    });
	
	                    [].splice.apply(newJson.content,[idx,1].concat(remainingTwin.content));
	                    containerRemoved = 2;
	                }
	                else {
	                    newJson.content[idx] = remainingTwin;
	
	                    //TODO should clone here
	                    remainingTwin.$size = parentOfTwins.$size;  
	                    containerRemoved = 1;
	                }
	
	            }
	            else if (paths.length === 1){
	                newJson.content[idx] = {
	                    type :'PlaceHolder',
	                    header: false,
	                    $size : shallowCloneObject(json.content[idx].$size)
	                };
	                if (json.type === 'Tabs' && json.activeTab === idx){
	                    if (typeof newJson.activeTab === 'number'){
	                        newJson.activeTab = 1;
	                    }
	                    else {
	                        activeTab = 1;
	                    }
	                }
	            }
	            else {
	                result = removeWithPlaceholder(content[idx],paths.join('.'));
	                newJson.content[idx] = result.json;
	                containerRemoved = result.containerRemoved;
	            }
	        }
	        else if (property === 'activeTab' && activeTab !== null){
	            newJson[property] = activeTab;
	        }
	        else {
	            newJson[property] = json[property];
	        }
	    }  
	
	    return {json:newJson, containerRemoved:containerRemoved};
	}
	
	
	function remove(json, path){
	
		var paths = path.split('.').slice(1).map(function(n)  {return parseInt(n,10);});
		var idx = paths[0];
	    var newJson = {};
	    var content;
	    var result;
	    var containerRemoved = 0;
	
	    var activeTab = null;
	
	    for (var property in json){
	        if (property === 'content'){
	        	content = json.content;
	            newJson.content = content.slice();
	            if (paths.length === 2 && content[idx].content.length === 2){
	
	            	// our target is a twin, we need to unwrap the parent
	            	var parentOfTwins = content[idx];
	            	var remainingTwin = parentOfTwins.content[paths[1] === 0 ? 1 : 0];
	
	            	// is remainingTwin itself a container, aligned with its new parent ?
	            	if (alignedFlexBoxes(newJson, remainingTwin)){
	
	            		//TODO should clone here
	            		remainingTwin.content.forEach(function(c)  {
	            			c.$size.flexBasis = c.$clientRect[newJson.flexOrientation === 'column' ? 'height' :'width'];
	            		});
	
	            		[].splice.apply(newJson.content,[idx,1].concat(remainingTwin.content));
		            	containerRemoved = 2;
	            	}
	            	else {
	    	        	newJson.content[idx] = remainingTwin;
	
	            		//TODO should clone here
	    	        	remainingTwin.$size = parentOfTwins.$size;  
	    	        	containerRemoved = 1;
	            	}
	
	            }
	            else if (paths.length === 1){
	            	newJson.content.splice(idx,1);
	            	if (json.type === 'Tabs' && json.activeTab === idx){
	            		if (typeof newJson.activeTab === 'number'){
	            			newJson.activeTab = 1;
	            		}
	            		else {
	            			activeTab = 1;
	            		}
	            	}
	            }
	            else {
	            	result = remove(content[idx],paths.join('.'));
	            	newJson.content[idx] = result.json;
	            	containerRemoved = result.containerRemoved;
	            }
	        }
	        else if (property === 'activeTab' && activeTab !== null){
	        	newJson[property] = activeTab;
	        }
	        else {
	            newJson[property] = json[property];
	        }
	    }  
	
	    return {json:newJson, containerRemoved:containerRemoved};
	
	}
	
	
	module.exports = {transform:transform};
	
	function wrap(pos, source, target){
	
	    source = shallowCloneObject(source);
	    target = shallowCloneObject(target);
	
	    var dragContainer = target.dragContainer;
	    target.dragContainer = undefined;
	
	    var type = pos.position.Header ? 'Tabs' : 'FlexBox';
	    var flexOrientation = pos.position.EastOrWest ? 'row' : 'column'
	    var activeTab = pos.position.Header ? 1 : undefined;
	    var $size = Object.assign({},target.$size);
	    var content = positionedContent(pos, source, target);
	
	    // changing the $size means we should clone the object
	    if (pos.position.EastOrWest && pos.width){
	    	source.$size = {flexGrow:1, flexShrink:1,flexBasis:pos.width}; 
	    	target.$size = {flexGrow:1, flexShrink:1,flexBasis:target.$clientRect.width - pos.width}; 
	    }
	    else if (pos.position.NorthOrSouth && pos.height){
	    	source.$size = {flexGrow:1, flexShrink:1,flexBasis:pos.height}; 
	    	target.$size = {flexGrow:1, flexShrink:1,flexBasis:target.$clientRect.height - pos.height}; 
	    }
	    else if (target.$size.flexBasis > 1){
	    	var flexBasis = Math.round(target.$size.flexBasis/2);
	    	source.$size = {flexGrow:1, flexShrink:1,flexBasis:flexBasis}; 
	    	target.$size = {flexGrow:1, flexShrink:1,flexBasis:flexBasis}; 
	    }
	    else if (source.$size.flexBasis === 0){
	    	source.$size = {flexGrow:1, flexShrink:1, flexBasis:1};
	    }
	
	    return {type:type, flexOrientation:flexOrientation, activeTab:activeTab, dragContainer:dragContainer, $size:$size, content:content};
	}
	
	function positionedContent(pos, source, target){
	
	    if (pos.position.Header){
	        // target.$size = {flexGrow:1,flexShrink:1,flexBasis:1};
	        // source.$size = {flexGrow:1,flexShrink:1,flexBasis:1};
	        return [target, source];
	    }
	    else if (pos.position.SouthOrEast){
	        return [target, source];
	    }
	    else {
	        return [source, target];
	    }
	
	}
	
	function alignedFlexBoxes(c1, c2){
		return c1.type === 'FlexBox' && c2.type === 'FlexBox' &&
			   c1.flexOrientation === c2.flexOrientation;
	}
	
	function assignBoxSizes(dimension, components){
	
		var flexGrow = 1;
		var flexShrink = 1;
	
		return components.map(function(component)  {
			if (component.$clientRect){
				var c = shallowCloneObject(component);
				c.$size = {flexBasis: c.$clientRect[dimension], flexGrow:flexGrow, flexShrink:flexShrink};
				return c;
			}
			else {
				return component;
			}
		});
	
	}
	


/***/ },
/* 31 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/TabbedContainer.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var React 				= window.React = __webpack_require__(/*! react/addons */ 2);
	var cx					= React.addons.classSet;
	var PropTypes 			= React.PropTypes;
	var Tabstrip 			= __webpack_require__(/*! ./Tabstrip */ 50);
	var Tab 				= __webpack_require__(/*! ./Tab */ 51)
	var Draggable 			= __webpack_require__(/*! ./Draggable */ 20).Draggable;
	var indexOf             = __webpack_require__(/*! ./util/indexOf */ 15);
	var refArray            = __webpack_require__(/*! ./util/refArray */ 14);
	var shallowCloneObject	= __webpack_require__(/*! ./util/shallowCloneObject */ 10);
	var cloneWithProps 		= React.addons.cloneWithProps;
	var LayoutItem 			= __webpack_require__(/*! ./LayoutItem */ 4);
	var Container 			= __webpack_require__(/*! ./Container */ 13);
	
	
	var TabbedContainer = React.createClass({displayName: "TabbedContainer",
	
		mixins : [Container, Draggable],
	
		contextTypes : {
			dragContainer : PropTypes.oneOfType([PropTypes.object, PropTypes.bool])
		},
	
		render:function(){
	
			//onsole.log('TabbedContainer.render state.dimensions = ' + JSON.stringify(this.state.dimensions));
	
			var style;
	
			var $__0=        this.props,dimension=$__0.dimension,bg=$__0.bg,style=$__0.style,isSelected=$__0.isSelected,children=$__0.children,onLayout=$__0.onLayout,tabsDragging=$__0.dragging;
	
			var $__1=     this.state,selected=$__1.selected,dragging=$__1.dragging,dimensions=$__1.dimensions,childMeasurements=$__1.childMeasurements;
	
			var props = {selected:[selected||0], dragging:dragging, container:this};
	
			// Don't allow either the tabs or the tabstrip itself to be dragged unless it is inside
			// the DragZone. We might further config-enable this eg. allow tabs but not the tabstrip
			// to be dragged when the TabbedContainer IS the DragZOne.
			var isDraggable = Boolean(this.context.dragContainer);
	
	//		if (dragContainer === true) (dragContainer = this);
	
			var tabs = children.map(function(child,idx)  {return React.createElement(Tab, {key: 'tab-' + idx, text: titleFor(child)});})
	
			var components = children.map(function(child, idx)  {
	
				var isSelected = selected === idx;
	
				var $__0=    child.props,json=$__0.json,children=$__0.children,childProps=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{json:1,children:1});
	
				var props = {
					ref: 'relay-' + idx, 
					key: child.props.id || idx,
					container: this,
					onLayout:onLayout,
					isSelected:isSelected,
					json: json,
					measurements : childMeasurements[idx],
					onConfigChange: this.handleConfigChange,
					dragging: idx === dragging,
					style : Object.assign({boxSizing:'border-box'}, childProps.style || {}, dimensions[idx])
				};
	
				if (isLayout(child)){
					return cloneWithProps( child, props );
				}
				else {
					return React.createElement(LayoutItem, React.__spread({},  childProps,  props), child);
				}
			}.bind(this));
	
			var className = cx(
				'rect-layout',
				'rect-container',
				'rect-tabset',
				this.props.className,
		        tabsDragging ? 'dragging' : null
			);
	
			return (
				React.createElement("div", {className: className, style: style}, 
					React.createElement(Tabstrip, React.__spread({key: "tabstrip", 
						ref: "tabstrip", 
						json: this.state.header, 
						draggable: isDraggable},  
						props, 
						{onSelectionChange: this.handleTabSelection}), tabs), 
					components
				)
			);
		},
	
		getInitialState:function(){
			return {
		        header : {},	
				selected : this.props.activeTab || 0,
				dragging: -1,
				dimensions : this.getDimensions(),
				childMeasurements:[]
			};
		},
	
		componentWillReceiveProps:function(nextProps){
			//onsole.log('TabbedContainer.componentWillReceiveProps...');
			if (nextProps.json !== this.props.json){
				console.log('...' + nextProps.json.content.length + ' children');
	
				var dimensions = nextProps.json.content.map(function(c,idx)  {
					if (idx === nextProps.json.activeTab){
						return {flexShrink:1,flexGrow:1,flexBasis:1};
					}
					else {
						return {flexShrink:1,flexGrow:1,flexBasis:0};
					}
				});
	
				this.setState({
					selected : nextProps.json.activeTab,
					dimensions:dimensions});
			}
	
		},
	
		getDimensions:function(){
	
			var selectedIdx = this.props.activeTab || 0;
	
			if (this.props.json){
				return this.props.json.content.map(dimension);
			}
			else {
				return this.props.children.map(dimension);
			}
	
			function dimension(c,idx){
				if (idx === selectedIdx){
					return {flexGrow:1,flexShrink:1,flexBasis:1}
				}
				else {
					return {flexGrow:0,flexShrink:0,flexBasis:0}
				}
			}
		},
	
		renderChildren:function(){
			return null;
		},
	
		getManagedDimension:function(){
			return null;
		},
	
		getDragPermission:function(component){
			return {x:true,y:true}
		},
	
		getDragBoundingRect:function(){
			
			var $__0=      this.getDOMNode().getBoundingClientRect(),top=$__0.top,left=$__0.left,width=$__0.width,height=$__0.height,right=$__0.right,bottom=$__0.bottom;
			
			var tabstripHeight = this.refs.tabstrip.getDOMNode().clientHeight;
	
			if (this.props.dragContainer === true){
				return {top: top+tabstripHeight, left:left, width:width, height: height-tabstripHeight, right:right, bottom:bottom};
			}
			else {
				return {top:top, left:left, width:width, height:height, right:right, bottom:bottom};
			}
		},
	
		handleTabSelection:function(selected, idx){
	
			var prevIdx = this.state.selected;
	//		this.setState({selected:idx, dimensions:newDimensions});
			if (this.props.onLayout){
				this.props.onLayout('switch-tab', {container: this.props.json, idx:this.state.selected, nextIdx:idx});
			}
			else {
				this.setState({selected: idx});
			}
		},
	
		getDraggable:function(el){
	
	        if (el.classList.contains("rect-tab-caption")){
	            var idx = parseInt(el.dataset.idx,10);
	            return this.refs['relay-' + idx];
	        }
	        else {
	            return this;
	        }
		},
	
		releaseChild:function(child, style){
	
			var children = refArray(this.refs);
			var idx = indexOf(children, function(c)  {return c === child;});
			var selected = this.state.selected;
			var dimensions = this.state.dimensions.slice();
	
			var style = Object.assign({position: 'absolute'}, style);
	
			if (idx === selected){
				var len = children.length;
				selected = idx < len - 1 ? idx+1 : idx - 1;
				dimensions[selected] = dimensions[idx];
			}
	
			dimensions[idx] = Object.assign({}, dimensions[idx], style);
	
	        this.setState({
	        	dragging: idx,
	        	selected:selected,
	        	dimensions:dimensions
	        });
	
		},
	
		positionChild:function(child, left, top){
	
			if (left !== undefined || top !== undefined){
	
				var $__0=    this.state,dimensions=$__0.dimensions,idx=$__0.dragging;
	
				dimensions = dimensions.slice();
	
				var style = shallowCloneObject(dimensions[idx]);
	
				if (left !== undefined)	style.left = left;
				if (top !== undefined)	style.top = top;
	
				dimensions[idx] = style;
	
		        this.setState({dimensions:dimensions});
	
			}
		},
	
		drop:function(component, dropTarget, boxModel){
	
			this.setState({
				dragging : -1
			});
	
			this.props.onLayout('drop', {component:component, dropTarget:dropTarget, boxModel:boxModel});
	
		}
	
	});
	
	module.exports = TabbedContainer;
	
	function titleFor(component){
		return component.props.title || computeTitle(component.props.json);
	}
	
	
	function computeTitle(component){
	
		var ret;
	
		if (component.content){
			ret = trawlForTitles(component);
		}
	
		return ret || component.type;
	}
	
	function trawlForTitles(component){
		
		function f(c,list){
			if (c.content){
				c.content.forEach(function(child)  {
					if (child.title) list.push(child.title);
					else f(child,list);
				});
			}	
			return list;		
		}
		var flatten = function(listOfLists)  {return [].concat.apply([],listOfLists);};
	
		var lol = flatten(f(component,[]));
	
		return lol[0] + (lol.length > 1 ? '...' : '');
	
	}
	
	function isLayout(element){
		return element.type.displayName === 'FlexBox' || 
			   element.type.displayName === 'TabbedContainer' ||
			   element.type.displayName === 'DynamicContainer';
	}
	
	
	
	


/***/ },
/* 32 */
/*!*************************************!*\
  !*** ../sample-components/types.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(/*! react/addons */ 2);
	var cx    = React.addons.classSet;
	
	var AppHeader = React.createClass({displayName: "AppHeader",
	
		render:function(){
	
			var className = cx(
				"app-header",
				this.props.className
			);
	
			var style ={
				backgroundColor: 'rgb(90,90,90)',
				height: this.props.height
			}
	
	
	
			return (
				React.createElement("div", {className: className, style: style}, 
					this.props.children
				)
			);
		},
	
		getDefaultProps:function(){
			return {style:{}}
		}
	
	
	});
	
	
	module.exports = {AppHeader:AppHeader}

/***/ },
/* 33 */
/*!******************************************!*\
  !*** ../sample-components/components.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(/*! react/addons */ 2);
	
	var AppHeader = React.createClass({displayName: "AppHeader",
	
		render:function(){
	
			return (
				React.createElement("div", {className: "app-header"})
			);
		}
	
	
	});
	
	var Component1 = React.createClass({displayName: "Component1",
	
		render:function(){
	
			var bg = this.props.bg;
	
			var style= Object.assign(this.props.style, {
				width: '100%',
				height:'100%',
				backgroundColor: bg
			});
	
			return (
	
				React.createElement("div", {className: "Component1", style: style}, 
	
					React.createElement("button", {onClick: this.handleClickMeasure}, "Measure Boxes"), 
					React.createElement("button", {onClick: this.handleClickDraw}, "Show Boxes"), 
					React.createElement("button", {onClick: this.handleClickDrawThis}, "Draw This"), 
					React.createElement("button", {onClick: this.handleClickMeasureThis}, "Measure This")
	
				)
	
	
	
			);
		},
	
		getDefaultProps:function(){
			return {
				style : {}
			}
		},
	
		handleClickMeasure:function(){
			this.props.doCommand('measure-boxes');
		},
	
		handleClickDraw:function(){
			this.props.doCommand('draw-boxes');
		},
	
		handleClickMeasureThis:function(){
			this.props.doCommand('measure-this');
		},
	
		handleClickDrawThis:function(){
			this.props.doCommand('draw-this');
		}
	
	});
	
	module.exports = {AppHeader:AppHeader, Component1:Component1}

/***/ },
/* 34 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/LinkedStateMixin.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactLink = __webpack_require__(/*! ./ReactLink */ 72);
	var ReactStateSetters = __webpack_require__(/*! ./ReactStateSetters */ 73);
	
	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function(key) {
	    return new ReactLink(
	      this.state[key],
	      ReactStateSetters.createStateKeySetter(this, key)
	    );
	  }
	};
	
	module.exports = LinkedStateMixin;


/***/ },
/* 35 */
/*!*************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/React.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	"use strict";
	
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 74);
	var EventPluginUtils = __webpack_require__(/*! ./EventPluginUtils */ 75);
	var ReactChildren = __webpack_require__(/*! ./ReactChildren */ 76);
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 77);
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactContext = __webpack_require__(/*! ./ReactContext */ 79);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 80);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactElementValidator = __webpack_require__(/*! ./ReactElementValidator */ 82);
	var ReactDOM = __webpack_require__(/*! ./ReactDOM */ 83);
	var ReactDOMComponent = __webpack_require__(/*! ./ReactDOMComponent */ 84);
	var ReactDefaultInjection = __webpack_require__(/*! ./ReactDefaultInjection */ 85);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 86);
	var ReactLegacyElement = __webpack_require__(/*! ./ReactLegacyElement */ 87);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var ReactMultiChild = __webpack_require__(/*! ./ReactMultiChild */ 89);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 90);
	var ReactPropTypes = __webpack_require__(/*! ./ReactPropTypes */ 91);
	var ReactServerRendering = __webpack_require__(/*! ./ReactServerRendering */ 92);
	var ReactTextComponent = __webpack_require__(/*! ./ReactTextComponent */ 93);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var deprecated = __webpack_require__(/*! ./deprecated */ 95);
	var onlyChild = __webpack_require__(/*! ./onlyChild */ 96);
	
	ReactDefaultInjection.inject();
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	
	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	}
	
	// TODO: Drop legacy elements once classes no longer export these factories
	createElement = ReactLegacyElement.wrapCreateElement(
	  createElement
	);
	createFactory = ReactLegacyElement.wrapCreateFactory(
	  createFactory
	);
	
	var render = ReactPerf.measure('React', 'render', ReactMount.render);
	
	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactCompositeComponent.createClass,
	  createElement: createElement,
	  createFactory: createFactory,
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidClass: ReactLegacyElement.isValidClass,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,
	
	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign,
	
	  // Deprecations (remove for 0.13)
	  renderComponent: deprecated(
	    'React',
	    'renderComponent',
	    'render',
	    this,
	    render
	  ),
	  renderComponentToString: deprecated(
	    'React',
	    'renderComponentToString',
	    'renderToString',
	    this,
	    ReactServerRendering.renderToString
	  ),
	  renderComponentToStaticMarkup: deprecated(
	    'React',
	    'renderComponentToStaticMarkup',
	    'renderToStaticMarkup',
	    this,
	    ReactServerRendering.renderToStaticMarkup
	  ),
	  isValidComponent: deprecated(
	    'React',
	    'isValidComponent',
	    'isValidElement',
	    this,
	    ReactElement.isValidElement
	  )
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    Component: ReactComponent,
	    CurrentOwner: ReactCurrentOwner,
	    DOMComponent: ReactDOMComponent,
	    DOMPropertyOperations: DOMPropertyOperations,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    MultiChild: ReactMultiChild,
	    TextComponent: ReactTextComponent
	  });
	}
	
	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'http://fb.me/react-devtools'
	        );
	      }
	    }
	
	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,
	
	      // shams
	      Object.create,
	      Object.freeze
	    ];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'http://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}
	
	// Version exists only in the open-source version of React, not in Facebook's
	// internal version.
	React.version = '0.12.0';
	
	module.exports = React;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 36 */
/*!*****************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactComponentWithPureRenderMixin.js ***!
  \*****************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/
	
	"use strict";
	
	var shallowEqual = __webpack_require__(/*! ./shallowEqual */ 98);
	
	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};
	
	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 37 */
/*!*******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactCSSTransitionGroup.js ***!
  \*******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */
	
	"use strict";
	
	var React = __webpack_require__(/*! ./React */ 35);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	
	var ReactTransitionGroup = React.createFactory(
	  __webpack_require__(/*! ./ReactTransitionGroup */ 38)
	);
	var ReactCSSTransitionGroupChild = React.createFactory(
	  __webpack_require__(/*! ./ReactCSSTransitionGroupChild */ 99)
	);
	
	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',
	
	  propTypes: {
	    transitionName: React.PropTypes.string.isRequired,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool
	  },
	
	  getDefaultProps: function() {
	    return {
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },
	
	  _wrapChild: function(child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return ReactCSSTransitionGroupChild(
	      {
	        name: this.props.transitionName,
	        enter: this.props.transitionEnter,
	        leave: this.props.transitionLeave
	      },
	      child
	    );
	  },
	
	  render: function() {
	    return (
	      ReactTransitionGroup(
	        assign({}, this.props, {childFactory: this._wrapChild})
	      )
	    );
	  }
	});
	
	module.exports = ReactCSSTransitionGroup;


/***/ },
/* 38 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactTransitionGroup.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */
	
	"use strict";
	
	var React = __webpack_require__(/*! ./React */ 35);
	var ReactTransitionChildMapping = __webpack_require__(/*! ./ReactTransitionChildMapping */ 100);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var cloneWithProps = __webpack_require__(/*! ./cloneWithProps */ 41);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	
	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',
	
	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },
	
	  getDefaultProps: function() {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },
	
	  getInitialState: function() {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },
	
	  componentWillReceiveProps: function(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
	      nextProps.children
	    );
	    var prevChildMapping = this.state.children;
	
	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(
	        prevChildMapping,
	        nextChildMapping
	      )
	    });
	
	    var key;
	
	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }
	
	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }
	
	    // If we want to someday check for reordering, we could do it here.
	  },
	
	  componentWillMount: function() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },
	
	  componentDidUpdate: function() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);
	
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },
	
	  performEnter: function(key) {
	    this.currentlyTransitioningKeys[key] = true;
	
	    var component = this.refs[key];
	
	    if (component.componentWillEnter) {
	      component.componentWillEnter(
	        this._handleDoneEntering.bind(this, key)
	      );
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },
	
	  _handleDoneEntering: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }
	
	    delete this.currentlyTransitioningKeys[key];
	
	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );
	
	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },
	
	  performLeave: function(key) {
	    this.currentlyTransitioningKeys[key] = true;
	
	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },
	
	  _handleDoneLeaving: function(key) {
	    var component = this.refs[key];
	
	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }
	
	    delete this.currentlyTransitioningKeys[key];
	
	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );
	
	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      var newChildren = assign({}, this.state.children);
	      delete newChildren[key];
	      this.setState({children: newChildren});
	    }
	  },
	
	  render: function() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = {};
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender[key] = cloneWithProps(
	          this.props.childFactory(child),
	          {ref: key}
	        );
	      }
	    }
	    return React.createElement(
	      this.props.component,
	      this.props,
	      childrenToRender
	    );
	  }
	});
	
	module.exports = ReactTransitionGroup;


/***/ },
/* 39 */
/*!********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactUpdates.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
	
	"use strict";
	
	var CallbackQueue = __webpack_require__(/*! ./CallbackQueue */ 102);
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 103);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 80);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 90);
	var Transaction = __webpack_require__(/*! ./Transaction */ 104);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}
	
	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}
	
	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b);
	}
	
	/**
	 * Array comparator for ReactComponents by owner depth
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountDepthComparator(c1, c2) {
	  return c1._mountDepth - c2._mountDepth;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountDepthComparator);
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, ignore them
	    // TODO: Queue unmounts in the same list to avoid this happening at all
	    var component = dirtyComponents[i];
	    if (component.isMounted()) {
	      // If performUpdateIfNecessary happens to enqueue any new updates, we
	      // shouldn't execute the callbacks until the next render happens, so
	      // stash the callbacks first
	      var callbacks = component._pendingCallbacks;
	      component._pendingCallbacks = null;
	      component.performUpdateIfNecessary(transaction.reconcileTransaction);
	
	      if (callbacks) {
	        for (var j = 0; j < callbacks.length; j++) {
	          transaction.callbackQueue.enqueue(
	            callbacks[j],
	            component
	          );
	        }
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  function() {
	    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	    // array and perform any updates enqueued by mount-ready handlers (i.e.,
	    // componentDidUpdate) but we need to check here too in order to catch
	    // updates enqueued by setState callbacks and asap calls.
	    while (dirtyComponents.length || asapEnqueued) {
	      if (dirtyComponents.length) {
	        var transaction = ReactUpdatesFlushTransaction.getPooled();
	        transaction.perform(runBatchedUpdates, null, transaction);
	        ReactUpdatesFlushTransaction.release(transaction);
	      }
	
	      if (asapEnqueued) {
	        asapEnqueued = false;
	        var queue = asapCallbackQueue;
	        asapCallbackQueue = CallbackQueue.getPooled();
	        queue.notifyAll();
	        CallbackQueue.release(queue);
	      }
	    }
	  }
	);
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !callback || typeof callback === "function",
	    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
	    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	    'isn\'t callable.'
	  ) : invariant(!callback || typeof callback === "function"));
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
	    return;
	  }
	
	  dirtyComponents.push(component);
	
	  if (callback) {
	    if (component._pendingCallbacks) {
	      component._pendingCallbacks.push(callback);
	    } else {
	      component._pendingCallbacks = [callback];
	    }
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 40 */
/*!**********************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/cx.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cx
	 */
	
	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */
	function cx(classNames) {
	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    }).join(' ');
	  } else {
	    return Array.prototype.join.call(arguments, ' ');
	  }
	}
	
	module.exports = cx;


/***/ },
/* 41 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/cloneWithProps.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule cloneWithProps
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactPropTransferer = __webpack_require__(/*! ./ReactPropTransferer */ 107);
	
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var CHILDREN_PROP = keyOf({children: null});
	
	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {object} child child component you'd like to clone
	 * @param {object} props props you'd like to modify. They will be merged
	 * as if you used `transferPropsTo()`.
	 * @return {object} a clone of child with props merged in.
	 */
	function cloneWithProps(child, props) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      !child.ref,
	      'You are calling cloneWithProps() on a child with a ref. This is ' +
	      'dangerous because you\'re creating a new child which will not be ' +
	      'added as a ref to its parent.'
	    ) : null);
	  }
	
	  var newProps = ReactPropTransferer.mergeProps(props, child.props);
	
	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
	      child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }
	
	  // The current API doesn't retain _owner and _context, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}
	
	module.exports = cloneWithProps;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 42 */
/*!**************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/update.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */
	
	"use strict";
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}
	
	var COMMAND_PUSH = keyOf({$push: null});
	var COMMAND_UNSHIFT = keyOf({$unshift: null});
	var COMMAND_SPLICE = keyOf({$splice: null});
	var COMMAND_SET = keyOf({$set: null});
	var COMMAND_MERGE = keyOf({$merge: null});
	var COMMAND_APPLY = keyOf({$apply: null});
	
	var ALL_COMMANDS_LIST = [
	  COMMAND_PUSH,
	  COMMAND_UNSHIFT,
	  COMMAND_SPLICE,
	  COMMAND_SET,
	  COMMAND_MERGE,
	  COMMAND_APPLY
	];
	
	var ALL_COMMANDS_SET = {};
	
	ALL_COMMANDS_LIST.forEach(function(command) {
	  ALL_COMMANDS_SET[command] = true;
	});
	
	function invariantArrayCase(value, spec, command) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(value),
	    'update(): expected target of %s to be an array; got %s.',
	    command,
	    value
	  ) : invariant(Array.isArray(value)));
	  var specValue = spec[command];
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(specValue),
	    'update(): expected spec of %s to be an array; got %s. ' +
	    'Did you forget to wrap your parameter in an array?',
	    command,
	    specValue
	  ) : invariant(Array.isArray(specValue)));
	}
	
	function update(value, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec === 'object',
	    'update(): You provided a key path to update() that did not contain one ' +
	    'of %s. Did you forget to include {%s: ...}?',
	    ALL_COMMANDS_LIST.join(', '),
	    COMMAND_SET
	  ) : invariant(typeof spec === 'object'));
	
	  if (spec.hasOwnProperty(COMMAND_SET)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Object.keys(spec).length === 1,
	      'Cannot have more than one key in an object with %s',
	      COMMAND_SET
	    ) : invariant(Object.keys(spec).length === 1));
	
	    return spec[COMMAND_SET];
	  }
	
	  var nextValue = shallowCopy(value);
	
	  if (spec.hasOwnProperty(COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    ("production" !== process.env.NODE_ENV ? invariant(
	      mergeObj && typeof mergeObj === 'object',
	      'update(): %s expects a spec of type \'object\'; got %s',
	      COMMAND_MERGE,
	      mergeObj
	    ) : invariant(mergeObj && typeof mergeObj === 'object'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      nextValue && typeof nextValue === 'object',
	      'update(): %s expects a target of type \'object\'; got %s',
	      COMMAND_MERGE,
	      nextValue
	    ) : invariant(nextValue && typeof nextValue === 'object'));
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }
	
	  if (spec.hasOwnProperty(COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function(item) {
	      nextValue.push(item);
	    });
	  }
	
	  if (spec.hasOwnProperty(COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function(item) {
	      nextValue.unshift(item);
	    });
	  }
	
	  if (spec.hasOwnProperty(COMMAND_SPLICE)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(value),
	      'Expected %s target to be an array; got %s',
	      COMMAND_SPLICE,
	      value
	    ) : invariant(Array.isArray(value)));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(spec[COMMAND_SPLICE]),
	      'update(): expected spec of %s to be an array of arrays; got %s. ' +
	      'Did you forget to wrap your parameters in an array?',
	      COMMAND_SPLICE,
	      spec[COMMAND_SPLICE]
	    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
	    spec[COMMAND_SPLICE].forEach(function(args) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        Array.isArray(args),
	        'update(): expected spec of %s to be an array of arrays; got %s. ' +
	        'Did you forget to wrap your parameters in an array?',
	        COMMAND_SPLICE,
	        spec[COMMAND_SPLICE]
	      ) : invariant(Array.isArray(args)));
	      nextValue.splice.apply(nextValue, args);
	    });
	  }
	
	  if (spec.hasOwnProperty(COMMAND_APPLY)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof spec[COMMAND_APPLY] === 'function',
	      'update(): expected spec of %s to be a function; got %s.',
	      COMMAND_APPLY,
	      spec[COMMAND_APPLY]
	    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }
	
	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }
	
	  return nextValue;
	}
	
	module.exports = update;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 43 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDefaultPerf.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 109);
	var ReactDefaultPerfAnalysis = __webpack_require__(/*! ./ReactDefaultPerfAnalysis */ 110);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 90);
	
	var performanceNow = __webpack_require__(/*! ./performanceNow */ 111);
	
	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}
	
	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}
	
	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,
	
	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }
	
	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },
	
	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },
	
	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },
	
	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },
	
	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },
	
	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },
	
	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },
	
	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },
	
	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },
	
	  measure: function(moduleName, fnName, func) {
	    return function() {var args=Array.prototype.slice.call(arguments,0);
	      var totalTime;
	      var rv;
	      var start;
	
	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (moduleName === 'ReactDOMIDOperations' ||
	        moduleName === 'ReactComponentBrowserEnvironment') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (fnName === 'mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || // TODO: receiveComponent()?
	        fnName === '_renderValidatedComponent')) {
	
	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';
	
	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];
	
	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }
	
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }
	
	        entry.displayNames[rootNodeID] = {
	          current: this.constructor.displayName,
	          owner: this._owner ? this._owner.constructor.displayName : '<root>'
	        };
	
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};
	
	module.exports = ReactDefaultPerf;


/***/ },
/* 44 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactTestUtils.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 113);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 114);
	var React = __webpack_require__(/*! ./React */ 35);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 115);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var ReactTextComponent = __webpack_require__(/*! ./ReactTextComponent */ 93);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 116);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function Event(suffix) {}
	
	/**
	 * @class ReactTestUtils
	 */
	
	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function(instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return React.render(instance, div);
	  },
	
	  isElement: function(element) {
	    return ReactElement.isValidElement(element);
	  },
	
	  isElementOfType: function(inst, convenienceConstructor) {
	    return (
	      ReactElement.isValidElement(inst) &&
	      inst.type === convenienceConstructor.type
	    );
	  },
	
	  isDOMComponent: function(inst) {
	    return !!(inst && inst.mountComponent && inst.tagName);
	  },
	
	  isDOMComponentElement: function(inst) {
	    return !!(inst &&
	              ReactElement.isValidElement(inst) &&
	              !!inst.tagName);
	  },
	
	  isCompositeComponent: function(inst) {
	    return typeof inst.render === 'function' &&
	           typeof inst.setState === 'function';
	  },
	
	  isCompositeComponentWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponent(inst) &&
	             (inst.constructor === type.type));
	  },
	
	  isCompositeComponentElement: function(inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return (
	      typeof prototype.render === 'function' &&
	      typeof prototype.setState === 'function'
	    );
	  },
	
	  isCompositeComponentElementWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
	             (inst.constructor === type));
	  },
	
	  isTextComponent: function(inst) {
	    return inst instanceof ReactTextComponent.type;
	  },
	
	  findAllInRenderedTree: function(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    var ret = test(inst) ? [inst] : [];
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      var renderedChildren = inst._renderedChildren;
	      var key;
	      for (key in renderedChildren) {
	        if (!renderedChildren.hasOwnProperty(key)) {
	          continue;
	        }
	        ret = ret.concat(
	          ReactTestUtils.findAllInRenderedTree(renderedChildren[key], test)
	        );
	      }
	    } else if (ReactTestUtils.isCompositeComponent(inst)) {
	      ret = ret.concat(
	        ReactTestUtils.findAllInRenderedTree(inst._renderedComponent, test)
	      );
	    }
	    return ret;
	  },
	
	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function(root, className) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      var instClassName = inst.props.className;
	      return ReactTestUtils.isDOMComponent(inst) && (
	        instClassName &&
	        (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1
	      );
	    });
	  },
	
	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function(root, className) {
	    var all =
	      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for class:' + className);
	    }
	    return all[0];
	  },
	
	
	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isDOMComponent(inst) &&
	            inst.tagName === tagName.toUpperCase();
	    });
	  },
	
	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },
	
	
	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isCompositeComponentWithType(
	        inst,
	        componentType
	      );
	    });
	  },
	
	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(
	      root,
	      componentType
	    );
	    if (all.length !== 1) {
	      throw new Error(
	        'Did not find exactly one match for componentType:' + componentType
	      );
	    }
	    return all[0];
	  },
	
	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function(module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || "div";
	
	    var ConvenienceConstructor = React.createClass({displayName: 'ConvenienceConstructor',
	      render: function() {
	        return React.createElement(
	          mockTagName,
	          null,
	          this.props.children
	        );
	      }
	    });
	
	    module.mockImplementation(ConvenienceConstructor);
	
	    module.type = ConvenienceConstructor.type;
	    module.isReactLegacyFactory = true;
	
	    return this;
	  },
	
	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on an `Element` node.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
	      topLevelType,
	      fakeNativeEvent
	    );
	  },
	
	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on the `ReactDOMComponent` `comp`.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
	   * @param comp {!ReactDOMComponent}
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function(
	      topLevelType,
	      comp,
	      fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(
	      topLevelType,
	      comp.getDOMNode(),
	      fakeNativeEvent
	    );
	  },
	
	  nativeTouchData: function(x, y) {
	    return {
	      touches: [
	        {pageX: x, pageY: y}
	      ]
	    };
	  },
	
	  Simulate: null,
	  SimulateNative: {}
	};
	
	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function(domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = domComponentOrNode.getDOMNode();
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }
	
	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(
	      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
	      ReactMount.getID(node),
	      fakeNativeEvent
	    );
	    assign(event, eventData);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	
	    ReactUpdates.batchedUpdates(function() {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue();
	    });
	  };
	}
	
	function buildSimulators() {
	  ReactTestUtils.Simulate = {};
	
	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element || ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}
	
	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function() {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function() {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};
	
	buildSimulators();
	
	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */
	
	function makeNativeSimulator(eventType) {
	  return function(domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    } else if (!!domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    }
	  };
	}
	
	var eventType;
	for (eventType in topLevelTypes) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ?
	    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element || ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] =
	    makeNativeSimulator(eventType);
	}
	
	module.exports = ReactTestUtils;


/***/ },
/* 45 */
/*!******************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableRoot.js ***!
  \******************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableRoot
	 */
	
	"use strict";
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 117);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    if (!Object.assign) {
	      console.error(
	        'FixedDataTable expected an ES6 compatible `Object.assign` polyfill.'
	      );
	    }
	  }
	}
	
	var FixedDataTable = __webpack_require__(/*! ./FixedDataTable.react */ 118);
	var FixedDataTableColumn = __webpack_require__(/*! ./FixedDataTableColumn.react */ 119);
	var FixedDataTableColumnGroup = __webpack_require__(/*! ./FixedDataTableColumnGroup.react */ 120);
	
	var FixedDataTableRoot = {
	  Column: FixedDataTableColumn,
	  ColumnGroup: FixedDataTableColumnGroup,
	  Table: FixedDataTable,
	};
	
	FixedDataTableRoot.version = '0.1.0';
	
	module.exports = FixedDataTableRoot;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 46 */
/*!**********************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/process/browser.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser
	
	var process = module.exports = {};
	
	process.nextTick = (function () {
	    var canSetImmediate = typeof window !== 'undefined'
	    && window.setImmediate;
	    var canMutationObserver = typeof window !== 'undefined'
	    && window.MutationObserver;
	    var canPost = typeof window !== 'undefined'
	    && window.postMessage && window.addEventListener
	    ;
	
	    if (canSetImmediate) {
	        return function (f) { return window.setImmediate(f) };
	    }
	
	    var queue = [];
	
	    if (canMutationObserver) {
	        var hiddenDiv = document.createElement("div");
	        var observer = new MutationObserver(function () {
	            var queueList = queue.slice();
	            queue.length = 0;
	            queueList.forEach(function (fn) {
	                fn();
	            });
	        });
	
	        observer.observe(hiddenDiv, { attributes: true });
	
	        return function nextTick(fn) {
	            if (!queue.length) {
	                hiddenDiv.setAttribute('yes', 'no');
	            }
	            queue.push(fn);
	        };
	    }
	
	    if (canPost) {
	        window.addEventListener('message', function (ev) {
	            var source = ev.source;
	            if ((source === window || source === null) && ev.data === 'process-tick') {
	                ev.stopPropagation();
	                if (queue.length > 0) {
	                    var fn = queue.shift();
	                    fn();
	                }
	            }
	        }, true);
	
	        return function nextTick(fn) {
	            queue.push(fn);
	            window.postMessage('process-tick', '*');
	        };
	    }
	
	    return function nextTick(fn) {
	        setTimeout(fn, 0);
	    };
	})();
	
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};


/***/ },
/* 47 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-controls/lib/index.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $__0=    __webpack_require__(/*! ./ContextMenu */ 121),ContextMenu=$__0.ContextMenu,MenuItem=$__0.MenuItem,Separator=$__0.Separator;
	var SelectBox 	= __webpack_require__(/*! ./SelectBox */ 122);
	var CheckBox 	= __webpack_require__(/*! ./CheckBox */ 123);
	//var Dialog 		= require('./dialog/Dialog');
	var TextInput	= __webpack_require__(/*! ./TextInput */ 124);
	
	module.exports = {
		ContextMenu:ContextMenu,
		MenuItem:MenuItem,
		Separator:Separator,
		SelectBox:SelectBox,
		CheckBox:CheckBox,
	//	Dialog,
		TextInput:TextInput
	}

/***/ },
/* 48 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-services/lib/PopupService.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var React 			= __webpack_require__(/*! react/addons */ 2);
	var cx 				= React.addons.classSet;
	var cloneWithProps	= React.addons.cloneWithProps;
	var PropTypes		= React.PropTypes;
	
	var _dialogOpen = false;
	var _popups = [];
	
	function specialKeyHandler(e){
	
		if (e.keyCode === 27 /* ESC */){
	
			if (_popups.length){
				closeAllPopups();
				console.log('unmount the open popup(s)');
			}
			else if (_dialogOpen){
				console.log('unmount the open dialog');
				React.unmountComponentAtNode(document.body.querySelector('.react-dialog'));
			}
		}
	}
	
	function outsideClickHandler(e){
		if (_popups.length){
			var popupContainers = document.body.querySelectorAll('.react-popup');
			for (var i=0;i<popupContainers.length;i++){
				if (popupContainers[i].contains(e.target)){
					return;
				}
			}
			closeAllPopups();
		}
	}
	
	function closeAllPopups(){
		if (_popups.length){
			var popupContainers = document.body.querySelectorAll('.react-popup');
			for (var i=0;i<popupContainers.length;i++){
				React.unmountComponentAtNode(popupContainers[i]);
			}
			popupClosed('*');
		}	
	}
	
	function dialogOpened(){
		if (_dialogOpen === false){
			console.log('PopupService, dialog opened');
			_dialogOpen = true;
			window.addEventListener('keydown', specialKeyHandler, true);
		}
	}
	
	function dialogClosed(){
		if (_dialogOpen){
			console.log('PopupService, dialog closed');
			_dialogOpen = false;
			window.removeEventListener('keydown', specialKeyHandler, true);
		}
	}
	
	function popupOpened(name, group){
		if (_popups.indexOf(name) === -1){
			_popups.push(name);
			console.log('PopupService, popup opened ' + name + '  popups : ' + _popups);
			if (_dialogOpen === false){
				window.addEventListener('keydown', specialKeyHandler, true);
				window.addEventListener('click', outsideClickHandler, true);
			}
		}
	}
	
	function popupClosed(name, group){
		if (_popups.length){
	
			if (name === '*'){
				_popups.length = 0;
			}
			else {
				var pos = _popups.indexOf(name);
				if (pos !== -1){
					_popups.splice(pos,1);
				}
			}
			console.log('PopupService, popup closed ' + name + '  popups : ' + _popups);
	
			if (_popups.length === 0 && _dialogOpen === false){
				window.removeEventListener('keydown', specialKeyHandler, true);
				window.removeEventListener('click', outsideClickHandler, true);
			}
	
		}
	}
	
	function PopupService(){"use strict";}
	
		PopupService.showPopup=function($__0       ){"use strict";var name=$__0.name,group=$__0.group,depth=$__0.depth,position=$__0.position,left=$__0.left,top=$__0.top,width=$__0.width,component=$__0.component;
	
			console.log(("PopupService.showPopup " + name + " in " + group + " " + left + " " + top + " " + width));
	
			popupOpened(name || 'anon', group);
	
			var el;
	
			if (group){
				el = document.body.querySelector('.react-popup.' + group);
				if (el === null){
					el = document.createElement('div');
					el.className = "react-popup " + group;
					document.body.appendChild(el);
				}
			}
			else {
				el = document.body.querySelector('#react-popup');
			}
	
			var className = cx('popup-container', position);
			React.render(
				React.createElement("div", {className: className, style: {position:'absolute',left:left,top:top,width:width}}, component), el, function()  {
					keepWithinThePage(el);
				}
			);
		};
	
		PopupService.hidePopup=function(name, group){"use strict";
	
			console.log('PopupService.hidePopup name=' + name + ', group=' + group)
	
			name = name || 'anon';
	
			if (_popups.indexOf(name) !== -1){
				popupClosed(name || 'anon', group);
				var query = group ? (".react-popup." + group) : '#react-popup';
				React.unmountComponentAtNode(document.body.querySelector(query));
			}
			else {
				console.log('... no popup by that name here');
			}
	
		};
	
	
	function DialogService(){"use strict";}
	
		DialogService.showDialog=function(dialog){"use strict";
	
			var containerEl = '.react-dialog';
	
			var onClose = dialog.props.onClose; 
	
			dialogOpened();
	
			React.render(cloneWithProps(dialog, {
					container: containerEl,
					onClose : function()  {
						DialogService.closeDialog();
						if (onClose) onClose();
					}
				}),
				document.body.querySelector(containerEl)
			);
	
		};
	
		DialogService.closeDialog=function(){"use strict";
			dialogClosed();
			React.unmountComponentAtNode(document.body.querySelector('.react-dialog'));
		};
	
	
	var Popup = React.createClass({displayName: "Popup",
		
		propTypes : {
			name : PropTypes.string.isRequired,
			width : PropTypes.number
		},
	
		render:function(){
			return React.createElement("div", {className: "popup-proxy"})
		},
	
		componentDidMount:function(){
	
			var domNode = this.getDOMNode();
			if (domNode){
				var boundingClientRect = domNode.parentNode.getBoundingClientRect();
			}
			console.log(("%cPopup.componentDidMount"),'color:green');
	
			this.show(this.props, boundingClientRect);
		},
	
		componentWillUnmount:function(){
			PopupService.hidePopup(this.props.name, this.props.group);
		},
	
		componentWillReceiveProps:function(nextProps){
	
			var domNode = this.getDOMNode();
			if (domNode){
				var boundingClientRect = domNode.parentNode.getBoundingClientRect();
			}
	
			console.log(("%cPopup.componentWillReceiveProps"),'color:blue');
	
			this.show(nextProps, boundingClientRect);
		},
	
		show:function(props, boundingClientRect){
	
			var $__0=     props,name=$__0.name,group=$__0.group,depth=$__0.depth,width=$__0.width;
	
			var left, top, bottom;
	
			if (props.close === true){
				console.log('Popup.showhide popup name=' + name + ', group=' + group + ',depth=' + depth);
				PopupService.hidePopup(name, group);
			}
			else {
				var $__1=   props,position=$__1.position,component=$__1.children;
	
				var $__2=  boundingClientRect,targetLeft=$__2.left,targetTop=$__2.top,clientWidth=$__2.width,height=$__2.height,targetBottom=$__2.bottom,right=$__2.right;
	
				if (position === 'below'){
					left = targetLeft;
					top = targetBottom;
				}
				else if (position === 'above'){
					left = targetLeft;
					top = targetTop;				
				}	
	
				setTimeout(function()  {
					PopupService.showPopup({name:name, group:group, depth:depth, position:position, left:left, top:top, width:width || clientWidth, component:component});
				},10);
			}
	
		}
	});
	
	
	module.exports = {PopupService:PopupService, DialogService:DialogService, Popup:Popup};
	
	function keepWithinThePage(el){
	
		var container = el.querySelector('.popup-container');
	
		var $__0=     container.firstChild.getBoundingClientRect(),top=$__0.top,left=$__0.left,width=$__0.width,height=$__0.height;
	
		var w = window.innerWidth;
		var h = window.innerHeight;
	
		var overflowH = h - (top+height);
		if (overflowH < 0){
			container.style.top = (parseInt(container.style.top) + overflowH) + 'px';
		}	
	
		var overflowW = w - (left+width);
		if (overflowW < 0){
			container.style.left = (parseInt(container.style.left) + overflowW) + 'px';
		}	
	
	}


/***/ },
/* 49 */
/*!***************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/DropMenu.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(/*! react/addons */ 2);
	var cx    = React.addons.classSet; 
	
	var sizes = [{h:34,w:20}, {h:66,w:20}, {h:100,w:20}, {h:130,w:20}];
	
	
	var DropMenuItem = React.createClass({displayName: "DropMenuItem",
	
		render:function(){
	
			var $__0=    this.props,dropTarget=$__0.dropTarget,depth=$__0.depth,isOuter=$__0.isOuter;
	
			var pos = dropTarget.pos;
	
			var className = cx(
				'drop-menu-item', 
				this.state.hover,
				pos.position);
	
		    var size = sizes[depth];
	
		    var borderWidth = 4;
	
		    var style;
	
		    if (pos.position.West){
		    	style = {
		    		// borderRadius: '0 100% 100% 0',
		    		width: size.w,
		    		height: size.h,
		    		top: isOuter ? -(Math.round(size.h/2)+borderWidth) : -(Math.round(size.h/2)),
		    		left: isOuter ? 0 : borderWidth
		    	};
		    }
		    else if (pos.position.South){
		    	style = {
		    		// borderRadius: '100% 100% 0 0',
		    		width: size.h,
		    		height: size.w,
		    		top: isOuter ? -size.w : -(size.w-4),
		    		left: isOuter ? -(Math.round(size.h/2)+borderWidth) : -Math.round(size.h/2)
		    	};
		    }
		    else if (pos.position.North || pos.position.Header){
		    	style = {
		    		// borderRadius: '0 0 100% 100%',
		    		width: size.h,
		    		height: size.w,
		    		top: isOuter ? 0 : borderWidth,
		    		left: isOuter ? -(Math.round(size.h/2)+borderWidth) : -Math.round(size.h/2)
		    	};
		    }
		    else if (pos.position.East){
		    	style = {
		    		// borderRadius: '100% 0 0 100%',
		    		width: size.w,
		    		height: size.h,
		    		top: isOuter ? -(Math.round(size.h/2)+borderWidth) : -Math.round(size.h/2),
		    		left: isOuter ? -size.w : -(size.w-borderWidth)
		    	};
		    }
	
			return ( 
			    	React.createElement("div", {className: className, style: style, 
			    		onMouseOver: this.handleMouseOver, 
			    		onMouseOut: this.handleMouseOut})
			);
	
		},
	
		getInitialState:function(){
			return {hover: this.props.depth === 0 ? 'hover' : undefined};
		},
	
		handleMouseOver:function(){
			this.setState({hover: 'hover'});
			if (this.props.onMouseOver){
				this.props.onMouseOver(this.props.dropTarget);
			}
		},
	
		handleMouseOut:function(){
			this.setState({hover: undefined});
		}
	
	
	});
	
	var DropMenu = React.createClass({displayName: "DropMenu",
	
		render:function(){
	
			var dropTarget = this.props.dropTarget;
	
		    var $__0=   menuPosition(dropTarget),left=$__0.left,top=$__0.top;
	
			return (
				React.createElement("div", {className: "DropMenu", style: {left:left, top:top}}, 
					this.renderMenuItems(dropTarget)
				)
			);
	
		},
	
		renderMenuItems:function(dropTarget){
	
			var target = dropTarget;
			var depth = 0;
	
			var targets = [];
			while (target){
				targets.push(target);
			    target = target.nextDropTarget;
			}
	
			return targets.reverse().map(function(target,idx)  
			    	{return React.createElement(DropMenuItem, {isOuter: idx===0, depth: targets.length-(idx+1), 
			    		dropTarget: target, 
			    		onMouseOver: this.props.onMouseOver});}.bind(this) 
			);
	
		}
	
	});
	
	module.exports = DropMenu;
	
	function menuPosition($__0 ){var component=$__0.component,pos=$__0.pos;
		 
		var box = component.props.json.$clientRect;
	
	    if (pos.position.West){
	        return {left:box.left, top: pos.y};
	    }
	    else if (pos.position.South){
	    	return {left:pos.x, top: box.bottom-6};
	    }
	    else if (pos.position.North || pos.position.Header){
	    	return {left:pos.x, top: box.top};
	    }
	    else if (pos.position.East){
	    	return {left:box.right, top: pos.y};
	    }
	
	}
	
	
	
	


/***/ },
/* 50 */
/*!***************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/Tabstrip.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	
	var React 				= __webpack_require__(/*! react/addons */ 2);
	var cloneWithProps 		= React.addons.cloneWithProps;
	
	var SelectionModel = __webpack_require__(/*! ./SelectionModel */ 125);
	
	var Tabstrip = React.createClass({displayName: "Tabstrip",
	
		mixins : [SelectionModel],
	
		render:function(){
	
			var $__0=   this.props,dragging=$__0.dragging,children=$__0.children;
			//onsole.log('Tabstrip render');
	
			var tabs = children.reduce(function(tabs, child, idx)  {
	
				if (dragging !== idx)
					tabs.push(
					   cloneWithProps(child, {
						key : String(idx),
						idx:idx,
						isSelected: this.isSelected(idx),
						onClick: this.handleItemClick }));
				
				return tabs;
	
			}.bind(this),[]);
	
			return (
	
				React.createElement("div", {className: "rect-layout rect-component rect-tabstrip"}, 
					React.createElement("div", {className: "rect-inner-sleeve"}, 
						React.createElement("ul", {className: "rect-inner"}, tabs)
					)
				)
			);
	
		},
	
		getDefaultProps:function(){
			return {
				selected: [0]
			}
		}
	
	});
	
	
	module.exports = Tabstrip;
	


/***/ },
/* 51 */
/*!**********************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/Tab.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	
	var React 	= __webpack_require__(/*! react/addons */ 2);
	var cx      = React.addons.classSet;
	
	
	var Tab = React.createClass({displayName: "Tab",
	
	
		render:function(){
			
			var isSelected = this.props.isSelected;
	
		    var className = cx(
		      'rect-tab',
		      isSelected ? 'active': null
		    );
	
			return (
				React.createElement("li", {className: className, onClick: this.handleClick}, 
					React.createElement("a", {href: "#", className: "rect-tab-caption", "data-idx": this.props.idx}, this.props.text)
				)
			);
	
		},
	
		handleClick:function(){
			this.props.onClick(this.props.idx);
		}
	
	});
	
	
	module.exports = Tab;

/***/ },
/* 52 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/indexOf.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(arr, test){
	
		for (var i=0;i<arr.length;i++){
			if (test(arr[i])){
				return i;
			}
		}
		return -1;
	};

/***/ },
/* 53 */
/*!********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/markEventAsHandled.js ***!
  \********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	module.exports = function(e){
		if(e){
			e.preventDefault();
			e.stopPropagation();
		}
	}

/***/ },
/* 54 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/padDecimal.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var PUNCTUATION_STR = String.fromCharCode(8200);
	var DIGIT_STR = String.fromCharCode(8199);
	
	var Space = {
		DIGIT : DIGIT_STR,
		TWO_DIGITS : DIGIT_STR + DIGIT_STR,
		THREE_DIGITS: DIGIT_STR + DIGIT_STR + DIGIT_STR,
		FULL_PADDING : [
			PUNCTUATION_STR + DIGIT_STR,
			PUNCTUATION_STR + DIGIT_STR + DIGIT_STR,
			PUNCTUATION_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR,
			PUNCTUATION_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR
		]
	
	};
	
	var Zero = {
		DIGIT : '0',
		TWO_DIGITS : '00',
		THREE_DIGITS : '000',
		FULL_PADDING : [
			'.0',
			'.00',
			'.000',
			'.0000'
		]
	};
	
	function rightPadDecimal(value, dp, zeroPad){
	
		if (value === undefined){
			return '';
		}
	
		if (dp === undefined) dp = 4;
	
		if (typeof value === 'number'){
			value = parseFloat(value).toLocaleString();
		}
	
		var Pad = zeroPad ? Zero : Space;
	
		var index = (value).indexOf('.'),
			len = value.length;
	
		if (dp === 0){
			return index === -1 ? value : value.slice(0,index);
		}
	
		if (index === -1){
			return value + Pad.FULL_PADDING[dp-1];
		}
	
		if (index === len - 4){
			value = value + Pad.DIGIT;
		}
		else if (index === len - 3){
			value = value + Pad.TWO_DIGITS;
		}
		else if (index === len - 2){
			value = value + Pad.THREE_DIGITS;
		}
		// more than 4 dp...just send back 4
		else if (index < len - 5){
			value = value.slice(0,index - (len-5));
		}
	
		if (dp === 3){
			return value.replace(/(.{3}).{1}$/,'$1');
		}
		else if (dp === 2){
			return value.replace(/(.{2}).{2}$/,'$1');
		}
		else if (dp === 1){
			return value.replace(/(.).{3}$/,'$1');
		}
	
		// anything with 4 dp or greater...just return it
		return value;
	
	}
	
	module.exports = rightPadDecimal;

/***/ },
/* 55 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/SelectionModel.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var React	= __webpack_require__(/*! react */ 27);
	var indexOf	= __webpack_require__(/*! react-utils */ 26).indexOf;
	
	var CTRL_KEY = 17;
	
	var SelectionModel = {
	
		getInitialState:function(){
			return {
				selected: this.props.selected || [],
				lastTouchIdx: -1,
				focusedIdx: -1
			};
		},
	
		componentWillReceiveProps:function(nextProps){
			if (Array.isArray(nextProps.selected) && nextProps.selected !== this.state.selected){
				this.setState({selected:nextProps.selected});
			}
		},
	
		handleItemClick:function(idx, selectedItem, rangeSelect, incrementalSelection){
	
			var selected,
				lastTouchIdx;
	
			if (rangeSelect){
				selected = this.handleRangeSelection(idx);
				lastTouchIdx = this.state.lastTouchIdx;
			}
			else if (incrementalSelection){
				selected = this.handleIncrementalSelection(idx);
				lastTouchIdx = idx;
			}
			else {
				selected = this.handleRegularSelection(idx);
				lastTouchIdx = idx;
			}
	
			this.setState({focusedIdx: idx});
	
			this.select(selected || [], lastTouchIdx, idx, selectedItem);
	
		},
	
		select:function(selected, lastTouchIdx, idx, selectedItem){
	
			this.setState({selected:selected, lastTouchIdx:lastTouchIdx});
	
			if (this.props.onSelectionChange){
				this.props.onSelectionChange(selected, idx, selectedItem);
			}
	
		},
	
		isSelected:function(idx){
			return this.state.selected.indexOf(idx) !== -1;
		},
	
		isFocused:function(idx){
			return this.state.focusedIdx === idx;
		},
	
		handleRegularSelection:function(idx){
			var pos = this.state.selected.indexOf(idx);
			if (pos === -1){
				return [idx];
			}
			else {
				return [];
			}
		},
	
		handleIncrementalSelection:function(idx){
			var pos = this.state.selected.indexOf(idx);
			var len = this.state.selected.length;
	
			if (pos === -1){
				if (len === 0){
					return [idx];
				}
				else {
					return insert(this.state.selected,idx);
				}
			}
			else {
				if (len === 1){
					return [];
				}
				else {
					return remove(this.state.selected,idx);
				}
			}		
		},
	
		handleRangeSelection:function(idx){
			var selected = this.state.selected;
			var lastTouchIdx = this.state.lastTouchIdx;
			var pos = selected.indexOf(idx);
			var len = selected.length;
	
			if (pos === -1){
	
				if (len === 0){
					return makeRange(0,idx);
				}
				else if (len === 1){
					return makeRange(selected[0],idx);
				}
				else {
					return range(selected,lastTouchIdx,idx);
				}
			}
			else {
	
	
			}
	
		},
	
		handleUpKey:function(e){
			this.moveSelection(-1,e.shiftKey,e.ctrlKey);
		},
	
		handleDownKey:function(e){
			this.moveSelection(1,e.shiftKey,e.ctrlKey);
		},
	
		handleSpaceKey:function(e){
			var $__0=   this.state,focusedIdx=$__0.focusedIdx,selected=$__0.selected;
			if (focusedIdx !== -1 && selected.indexOf(focusedIdx) === -1){
				selected = insert(selected, focusedIdx);
				this.select(selected, focusedIdx, focusedIdx);
			}
		},
	
		moveSelection:function(moveBy, rangeSelect, incrementalSelection){
	
			var lastTouchIdx = this.state.lastTouchIdx;
			var focusedIdx = this.state.focusedIdx + moveBy;
			var idx = focusedIdx;
	
			if (focusedIdx < 0 || focusedIdx > this.props.length-1){
				return;
			}
	
			// This is very specific - must be done some other way
			// making assumptions about existence of displayStart, displayEnd, rowHeight
			if (idx >= this.state.displayEnd-1){
				var el = this.getDOMNode();
				var $__0=      this.props,height=$__0.height,length=$__0.length,rowHeight=$__0.rowHeight,width=$__0.width,totalWidth=$__0.totalWidth;
	
				var availableHeight = (width > totalWidth) ? height - 15 : height;
	
				var scrollTop = (idx * rowHeight) - availableHeight;
	
				// Don't know why we need the 1, but without it, when the Row sets focus,
				// we get an extra 1px scroll event
				var newScrollTop = scrollTop + this.props.rowHeight + 1;
	
				this.setScroll(newScrollTop);	
	
			}
			else if (idx <= this.state.displayStart){
				var el = this.getDOMNode();
				
				var scrollTop = idx * this.props.rowHeight;
	
				this.setScroll(scrollTop);
	
			}
	
			if (incrementalSelection){
				// do nothing, just let the focus move
			}
			else {
	
				if (rangeSelect){
					selected = this.handleRangeSelection(idx);
				}
				else {
					selected = this.handleRegularSelection(idx);
				}
	
				var selectedItem = this.refs[idx];
				var selectedData = selectedItem ? selectedItem.props.row : null;
	
				this.select(selected, rangeSelect ? lastTouchIdx : idx, idx, selectedData);
	
			}
	
			this.setState({focusedIdx:focusedIdx});
	
		}
	
	
	
	};
	
	module.exports = SelectionModel;
	
	function range(arr, lo, hi){
	
		if (lo > hi) {var $__0=   [hi, lo];lo=$__0[0],hi=$__0[1];}
	
		var ranges = getRanges(arr);
		var newRange = new Range(lo,hi);
		var newRangeAdded = false;
		var ret = [];
	
		for (var i=0;i<ranges.length;i++){
			var range = ranges[i];
	
			if (!range.overlaps(newRange)){
				if (range.start < newRange.start){
					for (var idx=range.start;idx<=range.end;idx++){
						ret.push(idx);
					}
				}
				else {
					for (var idx=newRange.start;idx<=newRange.end;idx++){
						ret.push(idx);
					}
					newRangeAdded = true;
					for (var idx=range.start;idx<=range.end;idx++){
						ret.push(idx);
					}
				}
			}
			else if (!newRangeAdded){
				for (var idx=newRange.start;idx<=newRange.end;idx++){
					ret.push(idx);
				}
				newRangeAdded = true;
			}
		}
	
		if (!newRangeAdded){
			for (var idx=newRange.start;idx<=newRange.end;idx++){
				ret.push(idx);
			}
		}
	
		return ret;
	}
	
	function getRanges(arr){
	
		var ranges = [];
		var range;
	
		for (var i=0;i<arr.length;i++){
			if (range && range.touches(arr[i])){
				range.extend(arr[i]);
			}
			else {
				ranges.push(range = new Range(arr[i]));
			}
		}
	
		return ranges;
	
	}
	
	
	
		function Range(start, end){"use strict";
			this.start = start;
			this.end = end || start;
		}
	
		Range.prototype.extend=function(idx){"use strict";
			if (idx >= this.start && idx > this.end){
				this.end = idx;
			}
		};
	
		Range.prototype.touches=function(idx){"use strict";
			return this.end === idx-1;
		};
	
		Range.prototype.overlaps=function(that){"use strict";
			return !(this.end < that.start || this.start > that.end);
		};
	
		Range.prototype.contains=function(idx){"use strict";
			return this.start <= idx && this.end >= idx;
		};
	
		Range.prototype.toString=function(){"use strict";
			return ("[" + this.start + ":" + this.end + "]");
		};
	
	
	function makeRange(lo, hi){
		if (lo > hi) {var $__0=   [hi, lo];lo=$__0[0],hi=$__0[1];}
	
		var range = [];
		for (var idx=lo;idx<=hi;idx++){
			range.push(idx);
		}
		return range;
	}
	
	function remove(arr, idx){
		var ret = [];
		for (var i=0;i<arr.length;i++){
			if (idx !== arr[i]){
				ret.push(arr[i]);
			}
		}
		return ret;
	}
	
	function insert(arr, idx){
		var ret = [];
		for (var i=0;i<arr.length;i++){
			if (idx !== null && idx < arr[i]){
				ret.push(idx);
				idx = null;
			}
			ret.push(arr[i]);
		}
		if (idx !== null){
			ret.push(idx);
		}
		return ret;
	
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


/***/ },
/* 56 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/ExpansionModel.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(/*! react */ 27);
	var indexOf = __webpack_require__(/*! react-utils */ 26).indexOf;
	
	var ExpansionModel = {
	
		getInitialState:function(){
			return {
				expanded: this.props.expanded || []
			}
		},
	
		componentWillReceiveProps:function(nextProps){
			if (Array.isArray(nextProps.expanded) && nextProps.expanded !== this.state.expanded){
				this.setState({expanded:nextProps.expanded});
			}
		},
	
		handleExpandoToggle:function(idx, expandedItem){
	
			var expanded = this.handleIncrementalExpansion(expandedItem.exchange);
	
			this.setState({expanded:expanded});
	
			if (this.props.onExpandoChange){
				this.props.onExpandoChange(expanded, expandedItem.exchange, expandedItem);
			}
		},
	
		isExpanded:function(idx){
			return this.state.expanded.indexOf(idx) !== -1;
		},
	
		handleIncrementalExpansion:function(idx){
			var pos = this.state.expanded.indexOf(idx);
			var len = this.state.expanded.length;
	
			if (pos === -1){
				if (len === 0){
					return [idx];
				}
				else {
					return insert(this.state.expanded,idx)
				}
			}
			else {
				if (len === 1){
					return [];
				}
				else {
					return remove(this.state.expanded,idx);
				}
			}		
		},
	
	
	
	};
	
	module.exports = ExpansionModel;
	
	function insert(arr, idx){
		var ret = [];
		for (var i=0;i<arr.length;i++){
			if (idx !== null && idx < arr[i]){
				ret.push(idx);
				idx = null;
			}
			ret.push(arr[i]);
		}
		if (idx !== null){
			ret.push(idx);
		}
		return ret;
	
	}
	
	function remove(arr, idx){
		var ret = [];
		for (var i=0;i<arr.length;i++){
			if (idx !== arr[i]){
				ret.push(arr[i]);
			}
		}
		return ret;
	}


/***/ },
/* 57 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/KeyboardHandler.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React 				= __webpack_require__(/*! react/addons */ 2);
	var markEventAsHandled 	= __webpack_require__(/*! ./markEventAsHandled */ 53);
	
	var keyHandlers = {
		38: 'handleUpKey',
		40: 'handleDownKey',
		32: 'handleSpaceKey',
		13: 'handleEnterKey',
		27: 'handleEscKey',
		74: 'handleDownKey',
		47: 'handleUpKey',
	};
	
	var KeyboardHandler  ={
	
		handleKeyDown:function(e){
	
			var handler = keyHandlers[e.which];
	
			if (handler && (typeof this[handler] === 'function')){
	
				if (handler === 'handleUpKey' || handler === 'handleDownKey' || handler === 'handleSpaceKey'){
					markEventAsHandled(e);
				}
	
				this[handler](e);
	
			} 
		},
	
		onKeyDown:function(e){
			if (this.isCtrlKeyHeldDown(e)){
				this.checkAndCall('onPressKeyWithCtrl', e);
			}
			else if (e.key !== 'Unidentified' && e.key !== ' '){
				var callBack = 'handle' + e.key + 'Key';
				this.checkAndCall(callBack, e);
			}
			else if (this.isKeyPrintable(e.keyCode)){
				this.checkAndCall('handleCharKey', e);
			}
	
		},
	
		isKeyPrintable:function(keycode){
			var valid = 
				(keycode > 47 && keycode < 58) 		|| // number keys
				(keycode === 32 || keycode === 13)	|| // spacebar & return
				(keycode > 64 && keycode < 91)		|| // letter keys
				(keycode > 95 && keycode < 112)		|| // numpad keys
				(keycode > 185 && keycode < 193)	|| // ;=,-./`
				(keycode > 218 && keycode < 223);	   // [\]'
	
			return valid;
		},
	
		isCtrlKeyHeldDown:function(e){
			return e.ctrlKey === true && e.key !== 'Control';
		},
	
		checkAndCall:function(methodName, args){
			if (typeof this[methodName] === 'function'){
				this[methodName](args);
			}
		}
	
	
	};
	
	module.exports = KeyboardHandler;

/***/ },
/* 58 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/Draggable.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React         = __webpack_require__(/*! react */ 27);
	var PropTypes     = React.PropTypes;
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 59);
	
	var Draggable = React.createClass({displayName: "Draggable",
	
	  propTypes: {
	    onDragStart: PropTypes.func,
	    onDragEnd: PropTypes.func,
	    onDrag: PropTypes.func,
	    component: PropTypes.oneOfType([PropTypes.func, PropTypes.constructor])
	  },
	
	  render:function() {
	    var $__0=   this.props,Component=$__0.component,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{component:1});
	
	    if (Component){
	      return React.createElement(Component, React.__spread({onMouseDown: this.handleMouseDown},  props));
	    }
	    else {
	      return React.createElement("div", React.__spread({onMouseDown: this.handleMouseDown},  props));
	    }
	  },
	
	  getDefaultProps:function() {
	    return {
	      onDragStart: emptyFunction.thatReturnsTrue,
	      onDragEnd: emptyFunction,
	      onDrag: emptyFunction
	    };
	  },
	
	  getInitialState:function() {
	    return {
	      drag: null
	    };
	  },
	
	  handleMouseDown:function(e) {
	    var drag = this.props.onDragStart(e);
	
	    if (drag === null && e.button !== 0) {
	      return;
	    }
	
	    this.x = e.clientX;
	    this.y = e.clientY;
	
	    window.addEventListener('mouseup', this.onMouseUp);
	    window.addEventListener('mousemove', this.onMouseMove);
	
	    this.setState({drag:drag});
	    
	  },
	
	  onMouseMove:function(e) {
	    if (this.state.drag === null) {
	      return;
	    }
	
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    }
	
	    if (e.preventDefault) {
	      e.preventDefault();
	    }
	
	    var x = e.clientX;
	    var y = e.clientY;
	
	    var deltaX = x - this.x;
	    var deltaY = y - this.y;
	
	    this.x = x;
	    this.y = y;
	
	    this.props.onDrag(e, deltaX, deltaY);
	  },
	
	  onMouseUp:function(e) {
	    this.cleanUp();
	    this.props.onDragEnd(e, this.state.drag);
	    this.setState({drag: null});
	  },
	
	  componentWillUnmount:function() {
	    this.cleanUp();
	  },
	
	  cleanUp:function() {
	    window.removeEventListener('mouseup', this.onMouseUp);
	    window.removeEventListener('mousemove', this.onMouseMove);
	  }
	});
	
	module.exports = Draggable;


/***/ },
/* 59 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/emptyFunction.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule emptyFunction
	 */
	'use strict';
	
	var copyProperties = __webpack_require__(/*! ./copyProperties */ 70);
	
	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	copyProperties(emptyFunction, {
	  thatReturns: makeEmptyFunction,
	  thatReturnsFalse: makeEmptyFunction(false),
	  thatReturnsTrue: makeEmptyFunction(true),
	  thatReturnsNull: makeEmptyFunction(null),
	  thatReturnsThis: function() { return this; },
	  thatReturnsArgument: function(arg) { return arg; }
	});
	
	module.exports = emptyFunction;


/***/ },
/* 60 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/shallowEqual.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function shallowEqual(a, b) {
	  if (a === b) {
	    return true;
	  }
	
	  var k;
	
	  for (k in a) {
	    if (a.hasOwnProperty(k) &&
	        (!b.hasOwnProperty(k) || a[k] !== b[k])) {
	      return false;
	    }
	  }
	
	  for (k in b) {
	    if (b.hasOwnProperty(k) && !a.hasOwnProperty(k)) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;


/***/ },
/* 61 */
/*!********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/shallowCloneObject.js ***!
  \********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function shallowCloneObject(obj){
		var result = {};
		for (var k in obj){
			if (obj.hasOwnProperty(k)){
				result[k] = obj[k];
			}
		}
		return result;
	}
	
	module.exports = shallowCloneObject;

/***/ },
/* 62 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/isFunction.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function isFunction(fn){
		var getType = {};
		return fn && getType.toString.call(fn) === '[object Function]'
	}
	
	module.exports = isFunction;

/***/ },
/* 63 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/parseInt.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var _cache = {};
	function rex(str){
		return _cache[str] || (_cache[str] = new RegExp(str,'g'));
	}
	
	function stripText(str, text){
		if (!str) return'';
		return str.replace(rex(text),'');
	}
	
	function stripCommas(str){
		return stripText(str, ',');
	}
	
	module.exports = function(n){
		if (typeof n === 'number') return parseInt(n);
		return parseInt(stripCommas(n),10);
	};

/***/ },
/* 64 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/parseFloat.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var _cache = {};
	function rex(str){
		return _cache[str] || (_cache[str] = new RegExp(str,'g'));
	}
	
	function stripText(str, text){
		if (!str) return'';
		return str.replace(rex(text),'');
	}
	
	function stripCommas(str){
		return stripText(str, ',');
	}
	
	module.exports = function(n){
		if (typeof n === 'number') return n;
		return parseFloat(stripCommas(n));
	};

/***/ },
/* 65 */
/*!******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/uuid.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function generateUUID(){
	    var d = new Date().getTime();
	    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
	        var r = (d + Math.random()*16)%16 | 0;
	        d = Math.floor(d/16);
	        return (c=='x' ? r : (r&0x7|0x8)).toString(16);
	    });
	    return uuid;
	};
	
	module.exports = generateUUID;
	
	/*
	
	var lut = []; for (var i=0; i<256; i++) { lut[i] = (i<16?'0':'')+(i).toString(16); }
	function e7()
	{
	  var d0 = Math.random()*0xffffffff|0;
	  var d1 = Math.random()*0xffffffff|0;
	  var d2 = Math.random()*0xffffffff|0;
	  var d3 = Math.random()*0xffffffff|0;
	  return lut[d0&0xff]+lut[d0>>8&0xff]+lut[d0>>16&0xff]+lut[d0>>24&0xff]+'-'+
	    lut[d1&0xff]+lut[d1>>8&0xff]+'-'+lut[d1>>16&0x0f|0x40]+lut[d1>>24&0xff]+'-'+
	    lut[d2&0x3f|0x80]+lut[d2>>8&0xff]+'-'+lut[d2>>16&0xff]+lut[d2>>24&0xff]+
	    lut[d3&0xff]+lut[d3>>8&0xff]+lut[d3>>16&0xff]+lut[d3>>24&0xff];
	}
	
	*/

/***/ },
/* 66 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/evt.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	function Dispatcher(){
		var listeners = [];
		return {
			add: function(handler, scope){
				if (typeof handler === 'function'){
					addEventListener(listeners, makeHandler(handler, scope));
				}
				else throw "falcon.util.evt.add handler must be a function";
			},
			remove: function(handler, scope){ removeEventListener(listeners, handler, scope); },
			fire: function(evt, p1, p2, p3){ return fireEvent(listeners, evt, p1, p2, p3); } 
		};
	}
	
	function addEventListener(listeners, handler){
		listeners.push(handler);
	}
	
	function makeHandler(fn, scope){
		if (scope === undefined){
			return fn;
		}
		var handler = function(){
			return fn.apply(scope, arguments);
		};
	
		handler.matches = function(f, s){
			return f === fn && s === scope;
		};	
	
		return handler;
	}
	
	function removeEventListener(listeners, handler, scope){
	
		if (scope) return removeScopedEventListener(listeners, handler, scope);
	
		for (var i = 0, l = listeners; i < l.length; i++){
			if (l[i] === handler){
				return l.splice(i,1);
			}
		}
	}
	
	function removeScopedEventListener(listeners, handler, scope){
	
		for (var i = 0, l = listeners; i < l.length; i++){
			if (typeof l[i].matches === 'function' && l[i].matches(handler, scope)){
				return l.splice(i,1);
			}
		}
	}
	
	function fireEvent(listeners, evt, p1, p2, p3){
		var rc = false;
		for (var i = 0; i < listeners.length; i++){
			rc = rc || listeners[i](evt, p1, p2, p3);
		}
		return rc;
	}
	
	module.exports = Dispatcher;

/***/ },
/* 67 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/merge.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule merge
	 */
	
	"use strict";
	
	/**
	 * Shallow merges two structures into a return value, without mutating either.
	 *
	 * @param {?object} one Optional object with properties to merge from.
	 * @param {?object} two Optional object with properties to merge from.
	 * @return {object} The shallow extension of one by two.
	 */
	var merge = function(one, two) {
	  var result = {};
	  if (one != null) {
	    Object.assign(result, one);
	  }
	  if (two != null) {
	    Object.assign(result, two);
	  }
	  return result;
	};
	
	module.exports = merge;


/***/ },
/* 68 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/mergeInto.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule mergeInto
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Shallow merges two structures by mutating the first parameter.
	 *
	 * @param {object|function} one Object to be merged into.
	 * @param {?object} two Optional object with properties to merge from.
	 * @return {object|function} The first argument coerced into an object.
	 */
	function mergeInto(one, two) {
	  if (two != null) {
	    return Object.assign(one, two);
	  } else {
	    // This ensures that we throw the right error if one is of the wrong type
	    return Object.assign(one);
	  }
	}
	
	module.exports = mergeInto;


/***/ },
/* 69 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/invariant.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule invariant
	 */
	
	"use strict";
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 70 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/copyProperties.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule copyProperties
	 */
	'use strict';
	
	/**
	 * Copy properties from one or more objects (up to 5) into the first object.
	 * This is a shallow copy. It mutates the first object and also returns it.
	 *
	 * NOTE: `arguments` has a very significant performance penalty, which is why
	 * we don't support unlimited arguments.
	 */
	function copyProperties(obj, a, b, c, d, e, f) {
	  obj = obj || {};
	
	  if (process.env.NODE_ENV) {
	    if (f) {
	      throw new Error('Too many arguments passed to copyProperties');
	    }
	  }
	
	  var args = [a, b, c, d, e];
	  var ii = 0, v;
	  while (args[ii]) {
	    v = args[ii++];
	    for (var k in v) {
	      obj[k] = v[k];
	    }
	
	    // IE ignores toString in object iteration.. See:
	    // webreflection.blogspot.com/2007/07/quick-fix-internet-explorer-and.html
	    if (v.hasOwnProperty && v.hasOwnProperty('toString') &&
	        (typeof v.toString != 'undefined') && (obj.toString !== v.toString)) {
	      obj.toString = v.toString;
	    }
	  }
	
	  return obj;
	}
	
	module.exports = copyProperties;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 71 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-utils/lib/toLocaleString.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var parseFloat = __webpack_require__(/*! ./parseFloat */ 64);
	
	function toLocaleString(value){
		var n = parseFloat(value);
		if (isNaN(n)){
			return '';
		}
		else {
			return n.toLocaleString();
		}
	
	}
	module.exports = toLocaleString;

/***/ },
/* 72 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactLink.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */
	
	var React = __webpack_require__(/*! ./React */ 35);
	
	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}
	
	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ?
	      React.PropTypes.any.isRequired :
	      linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}
	
	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};
	
	module.exports = ReactLink;


/***/ },
/* 73 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactStateSetters.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */
	
	"use strict";
	
	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(component, funcReturningState) {
	    return function(a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },
	
	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};
	
	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}
	
	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },
	
	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};
	
	module.exports = ReactStateSetters;


/***/ },
/* 74 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/DOMPropertyOperations.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 109);
	
	var escapeTextForBrowser = __webpack_require__(/*! ./escapeTextForBrowser */ 126);
	var memoizeStringOnly = __webpack_require__(/*! ./memoizeStringOnly */ 127);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}
	
	var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
	  return escapeTextForBrowser(name) + '="';
	});
	
	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};
	
	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }
	
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );
	
	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
	    ) : null);
	
	  };
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
	      escapeTextForBrowser(id) + '"';
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return escapeTextForBrowser(attributeName);
	      }
	      return processAttributeNameAndPrefix(attributeName) +
	        escapeTextForBrowser(value) + '"';
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return processAttributeNameAndPrefix(name) +
	        escapeTextForBrowser(value) + '"';
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 75 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/EventPluginUtils.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}
	
	
	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}
	
	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}
	
	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, executeDispatch) {
	  forEachEventDispatch(event, executeDispatch);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};
	
	module.exports = EventPluginUtils;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 76 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactChildren.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 103);
	
	var traverseAllChildren = __webpack_require__(/*! ./traverseAllChildren */ 128);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	
	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);
	
	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;
	
	  var keyUnique = !mapResult.hasOwnProperty(name);
	  ("production" !== process.env.NODE_ENV ? warning(
	    keyUnique,
	    'ReactChildren.map(...): Encountered two children with the same key, ' +
	    '`%s`. Child keys must be unique; when two children share a key, only ' +
	    'the first child will be used.',
	    name
	  ) : null);
	
	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	
	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return mapResult;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};
	
	module.exports = ReactChildren;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 77 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactComponent.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactOwner = __webpack_require__(/*! ./ReactOwner */ 129);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var keyMirror = __webpack_require__(/*! ./keyMirror */ 130);
	
	/**
	 * Every React component is in one of these life cycles.
	 */
	var ComponentLifeCycle = keyMirror({
	  /**
	   * Mounted components have a DOM node representation and are capable of
	   * receiving new props.
	   */
	  MOUNTED: null,
	  /**
	   * Unmounted components are inactive and cannot receive new props.
	   */
	  UNMOUNTED: null
	});
	
	var injected = false;
	
	/**
	 * Optionally injectable environment dependent cleanup hook. (server vs.
	 * browser etc). Example: A browser system caches DOM nodes based on component
	 * ID and must remove that cache entry when this instance is unmounted.
	 *
	 * @private
	 */
	var unmountIDFromEnvironment = null;
	
	/**
	 * The "image" of a component tree, is the platform specific (typically
	 * serialized) data that represents a tree of lower level UI building blocks.
	 * On the web, this "image" is HTML markup which describes a construction of
	 * low level `div` and `span` nodes. Other platforms may have different
	 * encoding of this "image". This must be injected.
	 *
	 * @private
	 */
	var mountImageIntoNode = null;
	
	/**
	 * Components are the basic units of composition in React.
	 *
	 * Every component accepts a set of keyed input parameters known as "props" that
	 * are initialized by the constructor. Once a component is mounted, the props
	 * can be mutated using `setProps` or `replaceProps`.
	 *
	 * Every component is capable of the following operations:
	 *
	 *   `mountComponent`
	 *     Initializes the component, renders markup, and registers event listeners.
	 *
	 *   `receiveComponent`
	 *     Updates the rendered DOM nodes to match the given component.
	 *
	 *   `unmountComponent`
	 *     Releases any resources allocated by this component.
	 *
	 * Components can also be "owned" by other components. Being owned by another
	 * component means being constructed by that component. This is different from
	 * being the child of a component, which means having a DOM representation that
	 * is a child of the DOM representation of that component.
	 *
	 * @class ReactComponent
	 */
	var ReactComponent = {
	
	  injection: {
	    injectEnvironment: function(ReactComponentEnvironment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
	      unmountIDFromEnvironment =
	        ReactComponentEnvironment.unmountIDFromEnvironment;
	      ReactComponent.BackendIDOperations =
	        ReactComponentEnvironment.BackendIDOperations;
	      injected = true;
	    }
	  },
	
	  /**
	   * @internal
	   */
	  LifeCycle: ComponentLifeCycle,
	
	  /**
	   * Injected module that provides ability to mutate individual properties.
	   * Injected into the base class because many different subclasses need access
	   * to this.
	   *
	   * @internal
	   */
	  BackendIDOperations: null,
	
	  /**
	   * Base functionality for every ReactComponent constructor. Mixed into the
	   * `ReactComponent` prototype, but exposed statically for easy access.
	   *
	   * @lends {ReactComponent.prototype}
	   */
	  Mixin: {
	
	    /**
	     * Checks whether or not this component is mounted.
	     *
	     * @return {boolean} True if mounted, false otherwise.
	     * @final
	     * @protected
	     */
	    isMounted: function() {
	      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
	    },
	
	    /**
	     * Sets a subset of the props.
	     *
	     * @param {object} partialProps Subset of the next props.
	     * @param {?function} callback Called after props are updated.
	     * @final
	     * @public
	     */
	    setProps: function(partialProps, callback) {
	      // Merge with the pending element if it exists, otherwise with existing
	      // element props.
	      var element = this._pendingElement || this._currentElement;
	      this.replaceProps(
	        assign({}, element.props, partialProps),
	        callback
	      );
	    },
	
	    /**
	     * Replaces all of the props.
	     *
	     * @param {object} props New props.
	     * @param {?function} callback Called after props are updated.
	     * @final
	     * @public
	     */
	    replaceProps: function(props, callback) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this.isMounted(),
	        'replaceProps(...): Can only update a mounted component.'
	      ) : invariant(this.isMounted()));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this._mountDepth === 0,
	        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
	        'component with a parent. This is an anti-pattern since props will ' +
	        'get reactively updated when rendered. Instead, change the owner\'s ' +
	        '`render` method to pass the correct value as props to the component ' +
	        'where it is created.'
	      ) : invariant(this._mountDepth === 0));
	      // This is a deoptimized path. We optimize for always having a element.
	      // This creates an extra internal element.
	      this._pendingElement = ReactElement.cloneAndReplaceProps(
	        this._pendingElement || this._currentElement,
	        props
	      );
	      ReactUpdates.enqueueUpdate(this, callback);
	    },
	
	    /**
	     * Schedule a partial update to the props. Only used for internal testing.
	     *
	     * @param {object} partialProps Subset of the next props.
	     * @param {?function} callback Called after props are updated.
	     * @final
	     * @internal
	     */
	    _setPropsInternal: function(partialProps, callback) {
	      // This is a deoptimized path. We optimize for always having a element.
	      // This creates an extra internal element.
	      var element = this._pendingElement || this._currentElement;
	      this._pendingElement = ReactElement.cloneAndReplaceProps(
	        element,
	        assign({}, element.props, partialProps)
	      );
	      ReactUpdates.enqueueUpdate(this, callback);
	    },
	
	    /**
	     * Base constructor for all React components.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.construct.call(this, ...)`.
	     *
	     * @param {ReactElement} element
	     * @internal
	     */
	    construct: function(element) {
	      // This is the public exposed props object after it has been processed
	      // with default props. The element's props represents the true internal
	      // state of the props.
	      this.props = element.props;
	      // Record the component responsible for creating this component.
	      // This is accessible through the element but we maintain an extra
	      // field for compatibility with devtools and as a way to make an
	      // incremental update. TODO: Consider deprecating this field.
	      this._owner = element._owner;
	
	      // All components start unmounted.
	      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
	
	      // See ReactUpdates.
	      this._pendingCallbacks = null;
	
	      // We keep the old element and a reference to the pending element
	      // to track updates.
	      this._currentElement = element;
	      this._pendingElement = null;
	    },
	
	    /**
	     * Initializes the component, renders markup, and registers event listeners.
	     *
	     * NOTE: This does not insert any nodes into the DOM.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
	     *
	     * @param {string} rootID DOM ID of the root node.
	     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	     * @param {number} mountDepth number of components in the owner hierarchy.
	     * @return {?string} Rendered markup to be inserted into the DOM.
	     * @internal
	     */
	    mountComponent: function(rootID, transaction, mountDepth) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !this.isMounted(),
	        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
	        'Make sure to avoid storing components between renders or reusing a ' +
	        'single component instance in multiple places.',
	        rootID
	      ) : invariant(!this.isMounted()));
	      var ref = this._currentElement.ref;
	      if (ref != null) {
	        var owner = this._currentElement._owner;
	        ReactOwner.addComponentAsRefTo(this, ref, owner);
	      }
	      this._rootNodeID = rootID;
	      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
	      this._mountDepth = mountDepth;
	      // Effectively: return '';
	    },
	
	    /**
	     * Releases any resources allocated by `mountComponent`.
	     *
	     * NOTE: This does not remove any nodes from the DOM.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.unmountComponent.call(this)`.
	     *
	     * @internal
	     */
	    unmountComponent: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this.isMounted(),
	        'unmountComponent(): Can only unmount a mounted component.'
	      ) : invariant(this.isMounted()));
	      var ref = this._currentElement.ref;
	      if (ref != null) {
	        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
	      }
	      unmountIDFromEnvironment(this._rootNodeID);
	      this._rootNodeID = null;
	      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
	    },
	
	    /**
	     * Given a new instance of this component, updates the rendered DOM nodes
	     * as if that instance was rendered instead.
	     *
	     * Subclasses that override this method should make sure to invoke
	     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
	     *
	     * @param {object} nextComponent Next set of properties.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    receiveComponent: function(nextElement, transaction) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        this.isMounted(),
	        'receiveComponent(...): Can only update a mounted component.'
	      ) : invariant(this.isMounted()));
	      this._pendingElement = nextElement;
	      this.performUpdateIfNecessary(transaction);
	    },
	
	    /**
	     * If `_pendingElement` is set, update the component.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    performUpdateIfNecessary: function(transaction) {
	      if (this._pendingElement == null) {
	        return;
	      }
	      var prevElement = this._currentElement;
	      var nextElement = this._pendingElement;
	      this._currentElement = nextElement;
	      this.props = nextElement.props;
	      this._owner = nextElement._owner;
	      this._pendingElement = null;
	      this.updateComponent(transaction, prevElement);
	    },
	
	    /**
	     * Updates the component's currently mounted representation.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @param {object} prevElement
	     * @internal
	     */
	    updateComponent: function(transaction, prevElement) {
	      var nextElement = this._currentElement;
	
	      // If either the owner or a `ref` has changed, make sure the newest owner
	      // has stored a reference to `this`, and the previous owner (if different)
	      // has forgotten the reference to `this`. We use the element instead
	      // of the public this.props because the post processing cannot determine
	      // a ref. The ref conceptually lives on the element.
	
	      // TODO: Should this even be possible? The owner cannot change because
	      // it's forbidden by shouldUpdateReactComponent. The ref can change
	      // if you swap the keys of but not the refs. Reconsider where this check
	      // is made. It probably belongs where the key checking and
	      // instantiateReactComponent is done.
	
	      if (nextElement._owner !== prevElement._owner ||
	          nextElement.ref !== prevElement.ref) {
	        if (prevElement.ref != null) {
	          ReactOwner.removeComponentAsRefFrom(
	            this, prevElement.ref, prevElement._owner
	          );
	        }
	        // Correct, even if the owner is the same, and only the ref has changed.
	        if (nextElement.ref != null) {
	          ReactOwner.addComponentAsRefTo(
	            this,
	            nextElement.ref,
	            nextElement._owner
	          );
	        }
	      }
	    },
	
	    /**
	     * Mounts this component and inserts it into the DOM.
	     *
	     * @param {string} rootID DOM ID of the root node.
	     * @param {DOMElement} container DOM element to mount into.
	     * @param {boolean} shouldReuseMarkup If true, do not insert markup
	     * @final
	     * @internal
	     * @see {ReactMount.render}
	     */
	    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
	      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	      transaction.perform(
	        this._mountComponentIntoNode,
	        this,
	        rootID,
	        container,
	        transaction,
	        shouldReuseMarkup
	      );
	      ReactUpdates.ReactReconcileTransaction.release(transaction);
	    },
	
	    /**
	     * @param {string} rootID DOM ID of the root node.
	     * @param {DOMElement} container DOM element to mount into.
	     * @param {ReactReconcileTransaction} transaction
	     * @param {boolean} shouldReuseMarkup If true, do not insert markup
	     * @final
	     * @private
	     */
	    _mountComponentIntoNode: function(
	        rootID,
	        container,
	        transaction,
	        shouldReuseMarkup) {
	      var markup = this.mountComponent(rootID, transaction, 0);
	      mountImageIntoNode(markup, container, shouldReuseMarkup);
	    },
	
	    /**
	     * Checks if this component is owned by the supplied `owner` component.
	     *
	     * @param {ReactComponent} owner Component to check.
	     * @return {boolean} True if `owners` owns this component.
	     * @final
	     * @internal
	     */
	    isOwnedBy: function(owner) {
	      return this._owner === owner;
	    },
	
	    /**
	     * Gets another component, that shares the same owner as this one, by ref.
	     *
	     * @param {string} ref of a sibling Component.
	     * @return {?ReactComponent} the actual sibling Component.
	     * @final
	     * @internal
	     */
	    getSiblingByRef: function(ref) {
	      var owner = this._owner;
	      if (!owner || !owner.refs) {
	        return null;
	      }
	      return owner.refs[ref];
	    }
	  }
	};
	
	module.exports = ReactComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 78 */
/*!*******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactCompositeComponent.js ***!
  \*******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
	
	"use strict";
	
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 77);
	var ReactContext = __webpack_require__(/*! ./ReactContext */ 79);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 80);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactElementValidator = __webpack_require__(/*! ./ReactElementValidator */ 82);
	var ReactEmptyComponent = __webpack_require__(/*! ./ReactEmptyComponent */ 131);
	var ReactErrorUtils = __webpack_require__(/*! ./ReactErrorUtils */ 132);
	var ReactLegacyElement = __webpack_require__(/*! ./ReactLegacyElement */ 87);
	var ReactOwner = __webpack_require__(/*! ./ReactOwner */ 129);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 90);
	var ReactPropTransferer = __webpack_require__(/*! ./ReactPropTransferer */ 107);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 133);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 134);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var instantiateReactComponent = __webpack_require__(/*! ./instantiateReactComponent */ 135);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var keyMirror = __webpack_require__(/*! ./keyMirror */ 130);
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	var monitorCodeUse = __webpack_require__(/*! ./monitorCodeUse */ 136);
	var mapObject = __webpack_require__(/*! ./mapObject */ 137);
	var shouldUpdateReactComponent = __webpack_require__(/*! ./shouldUpdateReactComponent */ 138);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var MIXINS_KEY = keyOf({mixins: null});
	
	/**
	 * Policies that describe methods in `ReactCompositeComponentInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base ReactCompositeComponent class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactCompositeComponent`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactCompositeComponentInterface
	 * @internal
	 */
	var ReactCompositeComponentInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,
	
	
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,
	
	
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    validateTypeDef(
	      Constructor,
	      childContextTypes,
	      ReactPropTypeLocations.childContext
	    );
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    validateTypeDef(
	      Constructor,
	      contextTypes,
	      ReactPropTypeLocations.context
	    );
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    validateTypeDef(
	      Constructor,
	      propTypes,
	      ReactPropTypeLocations.prop
	    );
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};
	
	function getDeclarationErrorAddendum(component) {
	  var owner = component._owner || null;
	  if (owner && owner.constructor && owner.constructor.displayName) {
	    return ' Check the render method of `' + owner.constructor.displayName +
	      '`.';
	  }
	  return '';
	}
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof typeDef[propName] == 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactCompositeComponent',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : invariant(typeof typeDef[propName] == 'function'));
	    }
	  }
	}
	
	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
	    ReactCompositeComponentInterface[name] :
	    null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactCompositeComponentInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactCompositeComponentInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}
	
	function validateLifeCycleOnReplaceState(instance) {
	  var compositeLifeCycleState = instance._compositeLifeCycleState;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance.isMounted() ||
	      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
	    'replaceState(...): Can only update a mounted or mounting component.'
	  ) : invariant(instance.isMounted() ||
	    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    'replaceState(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.'
	  ) : invariant(ReactCurrentOwner.current == null));
	  ("production" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
	    'replaceState(...): Cannot update while unmounting component. This ' +
	    'usually means you called setState() on an unmounted component.'
	  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building `ReactCompositeComponent` classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }
	
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactLegacyElement.isValidFactory(spec),
	    'ReactCompositeComponent: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactCompositeComponent: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));
	
	  var proto = Constructor.prototype;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }
	
	    var property = spec[name];
	    validateMethodOverride(proto, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactCompositeComponent methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isCompositeComponentMethod =
	        ReactCompositeComponentInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isCompositeComponentMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;
	
	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactCompositeComponentInterface[name];
	
	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isCompositeComponentMethod && (
	              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
	              specPolicy === SpecPolicy.DEFINE_MANY
	            ),
	            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isCompositeComponentMethod && (
	            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
	            specPolicy === SpecPolicy.DEFINE_MANY
	          )));
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactCompositeComponent: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));
	
	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactCompositeComponent: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeObjectsWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));
	
	  mapObject(two, function(value, key) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      one[key] === undefined,
	      'mergeObjectsWithNoDuplicateKeys(): ' +
	      'Tried to merge two objects with the same key: `%s`. This conflict ' +
	      'may be due to a mixin; in particular, this may be caused by two ' +
	      'getInitialState() or getDefaultProps() methods returning objects ' +
	      'with clashing keys.',
	      key
	    ) : invariant(one[key] === undefined));
	    one[key] = value;
	  });
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    return mergeObjectsWithNoDuplicateKeys(a, b);
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
	 * `this._compositeLifeCycleState` (which can be null).
	 *
	 * This is different from the life cycle state maintained by `ReactComponent` in
	 * `this._lifeCycleState`. The following diagram shows how the states overlap in
	 * time. There are times when the CompositeLifeCycle is null - at those times it
	 * is only meaningful to look at ComponentLifeCycle alone.
	 *
	 * Top Row: ReactComponent.ComponentLifeCycle
	 * Low Row: ReactComponent.CompositeLifeCycle
	 *
	 * +-------+---------------------------------+--------+
	 * |  UN   |             MOUNTED             |   UN   |
	 * |MOUNTED|                                 | MOUNTED|
	 * +-------+---------------------------------+--------+
	 * |       ^--------+   +-------+   +--------^        |
	 * |       |        |   |       |   |        |        |
	 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
	 * |       |        |   |PROPS  |   |MOUNTING|        |
	 * |       |        |   |       |   |        |        |
	 * |       |        |   |       |   |        |        |
	 * |       +--------+   +-------+   +--------+        |
	 * |       |                                 |        |
	 * +-------+---------------------------------+--------+
	 */
	var CompositeLifeCycle = keyMirror({
	  /**
	   * Components in the process of being mounted respond to state changes
	   * differently.
	   */
	  MOUNTING: null,
	  /**
	   * Components in the process of being unmounted are guarded against state
	   * changes.
	   */
	  UNMOUNTING: null,
	  /**
	   * Components that are mounted and receiving new props respond to state
	   * changes differently.
	   */
	  RECEIVING_PROPS: null
	});
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    // Children can be either an array or more than one argument
	    ReactComponent.Mixin.construct.apply(this, arguments);
	    ReactOwner.Mixin.construct.apply(this, arguments);
	
	    this.state = null;
	    this._pendingState = null;
	
	    // This is the public post-processed context. The real context and pending
	    // context lives on the element.
	    this.context = null;
	
	    this._compositeLifeCycleState = null;
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    return ReactComponent.Mixin.isMounted.call(this) &&
	      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {number} mountDepth number of components in the owner hierarchy
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: ReactPerf.measure(
	    'ReactCompositeComponent',
	    'mountComponent',
	    function(rootID, transaction, mountDepth) {
	      ReactComponent.Mixin.mountComponent.call(
	        this,
	        rootID,
	        transaction,
	        mountDepth
	      );
	      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;
	
	      if (this.__reactAutoBindMap) {
	        this._bindAutoBindMethods();
	      }
	
	      this.context = this._processContext(this._currentElement._context);
	      this.props = this._processProps(this.props);
	
	      this.state = this.getInitialState ? this.getInitialState() : null;
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof this.state === 'object' && !Array.isArray(this.state),
	        '%s.getInitialState(): must return an object or null',
	        this.constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));
	
	      this._pendingState = null;
	      this._pendingForceUpdate = false;
	
	      if (this.componentWillMount) {
	        this.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingState` without triggering a re-render.
	        if (this._pendingState) {
	          this.state = this._pendingState;
	          this._pendingState = null;
	        }
	      }
	
	      this._renderedComponent = instantiateReactComponent(
	        this._renderValidatedComponent(),
	        this._currentElement.type // The wrapping type
	      );
	
	      // Done with mounting, `setState` will now trigger UI changes.
	      this._compositeLifeCycleState = null;
	      var markup = this._renderedComponent.mountComponent(
	        rootID,
	        transaction,
	        mountDepth + 1
	      );
	      if (this.componentDidMount) {
	        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
	      }
	      return markup;
	    }
	  ),
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
	    if (this.componentWillUnmount) {
	      this.componentWillUnmount();
	    }
	    this._compositeLifeCycleState = null;
	
	    this._renderedComponent.unmountComponent();
	    this._renderedComponent = null;
	
	    ReactComponent.Mixin.unmountComponent.call(this);
	
	    // Some existing components rely on this.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: this.props = null;
	    // TODO: this.state = null;
	  },
	
	  /**
	   * Sets a subset of the state. Always use this or `replaceState` to mutate
	   * state. You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * There is no guarantee that calls to `setState` will run synchronously,
	   * as they may eventually be batched together.  You can provide an optional
	   * callback that will be executed when the call to setState is actually
	   * completed.
	   *
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after state is updated.
	   * @final
	   * @protected
	   */
	  setState: function(partialState, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof partialState === 'object' || partialState == null,
	      'setState(...): takes an object of state variables to update.'
	    ) : invariant(typeof partialState === 'object' || partialState == null));
	    if ("production" !== process.env.NODE_ENV){
	      ("production" !== process.env.NODE_ENV ? warning(
	        partialState != null,
	        'setState(...): You passed an undefined or null state object; ' +
	        'instead, use forceUpdate().'
	      ) : null);
	    }
	    // Merge with `_pendingState` if it exists, otherwise with existing state.
	    this.replaceState(
	      assign({}, this._pendingState || this.state, partialState),
	      callback
	    );
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after state is updated.
	   * @final
	   * @protected
	   */
	  replaceState: function(completeState, callback) {
	    validateLifeCycleOnReplaceState(this);
	    this._pendingState = completeState;
	    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
	      // If we're in a componentWillMount handler, don't enqueue a rerender
	      // because ReactUpdates assumes we're in a browser context (which is wrong
	      // for server rendering) and we're about to do a render anyway.
	      // TODO: The callback here is ignored when setState is called from
	      // componentWillMount. Either fix it or disallow doing so completely in
	      // favor of getInitialState.
	      ReactUpdates.enqueueUpdate(this, callback);
	    }
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = null;
	    var contextTypes = this.constructor.contextTypes;
	    if (contextTypes) {
	      maskedContext = {};
	      for (var contextName in contextTypes) {
	        maskedContext[contextName] = context[contextName];
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function(currentContext) {
	    var childContext = this.getChildContext && this.getChildContext();
	    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof this.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        displayName
	      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          this.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in this.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          displayName,
	          name
	        ) : invariant(name in this.constructor.childContextTypes));
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var propTypes = this.constructor.propTypes;
	      if (propTypes) {
	        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },
	
	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.constructor.displayName;
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error =
	          propTypes[propName](props, propName, componentName, location);
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // renderComponent calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	          ("production" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null);
	        }
	      }
	    }
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    var compositeLifeCycleState = this._compositeLifeCycleState;
	    // Do not trigger a state transition if we are in the middle of mounting or
	    // receiving props because both of those will already be doing this.
	    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
	        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
	      return;
	    }
	
	    if (this._pendingElement == null &&
	        this._pendingState == null &&
	        !this._pendingForceUpdate) {
	      return;
	    }
	
	    var nextContext = this.context;
	    var nextProps = this.props;
	    var nextElement = this._currentElement;
	    if (this._pendingElement != null) {
	      nextElement = this._pendingElement;
	      nextContext = this._processContext(nextElement._context);
	      nextProps = this._processProps(nextElement.props);
	      this._pendingElement = null;
	
	      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
	      if (this.componentWillReceiveProps) {
	        this.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    this._compositeLifeCycleState = null;
	
	    var nextState = this._pendingState || this.state;
	    this._pendingState = null;
	
	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !this.shouldComponentUpdate ||
	      this.shouldComponentUpdate(nextProps, nextState, nextContext);
	
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof shouldUpdate === "undefined") {
	        console.warn(
	          (this.constructor.displayName || 'ReactCompositeComponent') +
	          '.shouldComponentUpdate(): Returned undefined instead of a ' +
	          'boolean value. Make sure to return true or false.'
	        );
	      }
	    }
	
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state.
	      this._currentElement = nextElement;
	      this.props = nextProps;
	      this.state = nextState;
	      this.context = nextContext;
	
	      // Owner cannot change because shouldUpdateReactComponent doesn't allow
	      // it. TODO: Remove this._owner completely.
	      this._owner = nextElement._owner;
	    }
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction
	  ) {
	    var prevElement = this._currentElement;
	    var prevProps = this.props;
	    var prevState = this.state;
	    var prevContext = this.context;
	
	    if (this.componentWillUpdate) {
	      this.componentWillUpdate(nextProps, nextState, nextContext);
	    }
	
	    this._currentElement = nextElement;
	    this.props = nextProps;
	    this.state = nextState;
	    this.context = nextContext;
	
	    // Owner cannot change because shouldUpdateReactComponent doesn't allow
	    // it. TODO: Remove this._owner completely.
	    this._owner = nextElement._owner;
	
	    this.updateComponent(
	      transaction,
	      prevElement
	    );
	
	    if (this.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
	        this
	      );
	    }
	  },
	
	  receiveComponent: function(nextElement, transaction) {
	    if (nextElement === this._currentElement &&
	        nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for a element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }
	
	    ReactComponent.Mixin.receiveComponent.call(
	      this,
	      nextElement,
	      transaction
	    );
	  },
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: ReactPerf.measure(
	    'ReactCompositeComponent',
	    'updateComponent',
	    function(transaction, prevParentElement) {
	      ReactComponent.Mixin.updateComponent.call(
	        this,
	        transaction,
	        prevParentElement
	      );
	
	      var prevComponentInstance = this._renderedComponent;
	      var prevElement = prevComponentInstance._currentElement;
	      var nextElement = this._renderValidatedComponent();
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        prevComponentInstance.receiveComponent(nextElement, transaction);
	      } else {
	        // These two IDs are actually the same! But nothing should rely on that.
	        var thisID = this._rootNodeID;
	        var prevComponentID = prevComponentInstance._rootNodeID;
	        prevComponentInstance.unmountComponent();
	        this._renderedComponent = instantiateReactComponent(
	          nextElement,
	          this._currentElement.type
	        );
	        var nextMarkup = this._renderedComponent.mountComponent(
	          thisID,
	          transaction,
	          this._mountDepth + 1
	        );
	        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
	          prevComponentID,
	          nextMarkup
	        );
	      }
	    }
	  ),
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {?function} callback Called after update is complete.
	   * @final
	   * @protected
	   */
	  forceUpdate: function(callback) {
	    var compositeLifeCycleState = this._compositeLifeCycleState;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isMounted() ||
	        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
	      'forceUpdate(...): Can only force an update on mounted or mounting ' +
	        'components.'
	    ) : invariant(this.isMounted() ||
	      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
	      ReactCurrentOwner.current == null,
	      'forceUpdate(...): Cannot force an update while unmounting component ' +
	      'or within a `render` function.'
	    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
	    ReactCurrentOwner.current == null));
	    this._pendingForceUpdate = true;
	    ReactUpdates.enqueueUpdate(this, callback);
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: ReactPerf.measure(
	    'ReactCompositeComponent',
	    '_renderValidatedComponent',
	    function() {
	      var renderedComponent;
	      var previousContext = ReactContext.current;
	      ReactContext.current = this._processChildContext(
	        this._currentElement._context
	      );
	      ReactCurrentOwner.current = this;
	      try {
	        renderedComponent = this.render();
	        if (renderedComponent === null || renderedComponent === false) {
	          renderedComponent = ReactEmptyComponent.getEmptyComponent();
	          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
	        } else {
	          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
	        }
	      } finally {
	        ReactContext.current = previousContext;
	        ReactCurrentOwner.current = null;
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        ReactElement.isValidElement(renderedComponent),
	        '%s.render(): A valid ReactComponent must be returned. You may have ' +
	          'returned undefined, an array or some other invalid object.',
	        this.constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(ReactElement.isValidElement(renderedComponent)));
	      return renderedComponent;
	    }
	  ),
	
	  /**
	   * @private
	   */
	  _bindAutoBindMethods: function() {
	    for (var autoBindKey in this.__reactAutoBindMap) {
	      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	        continue;
	      }
	      var method = this.__reactAutoBindMap[autoBindKey];
	      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
	        method,
	        this.constructor.displayName + '.' + autoBindKey
	      ));
	    }
	  },
	
	  /**
	   * Binds a method to the component.
	   *
	   * @param {function} method Method to be bound.
	   * @private
	   */
	  _bindAutoBindMethod: function(method) {
	    var component = this;
	    var boundMethod = method.bind(component);
	    if ("production" !== process.env.NODE_ENV) {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis ) {var args=Array.prototype.slice.call(arguments,1);
	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          monitorCodeUse('react_bind_warning', { component: componentName });
	          console.warn(
	            'bind(): React component methods may only be bound to the ' +
	            'component instance. See ' + componentName
	          );
	        } else if (!args.length) {
	          monitorCodeUse('react_bind_warning', { component: componentName });
	          console.warn(
	            'bind(): You are binding a component method to the component. ' +
	            'React does this for you automatically in a high-performance ' +
	            'way, so you can safely remove this call. See ' + componentName
	          );
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }
	};
	
	var ReactCompositeComponentBase = function() {};
	assign(
	  ReactCompositeComponentBase.prototype,
	  ReactComponent.Mixin,
	  ReactOwner.Mixin,
	  ReactPropTransferer.Mixin,
	  ReactCompositeComponentMixin
	);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactCompositeComponent
	 * @extends ReactComponent
	 * @extends ReactOwner
	 * @extends ReactPropTransferer
	 */
	var ReactCompositeComponent = {
	
	  LifeCycle: CompositeLifeCycle,
	
	  Base: ReactCompositeComponentBase,
	
	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted. This will later be used
	      // by the stand-alone class implementation.
	    };
	    Constructor.prototype = new ReactCompositeComponentBase();
	    Constructor.prototype.constructor = Constructor;
	
	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));
	
	    if ("production" !== process.env.NODE_ENV) {
	      if (Constructor.prototype.componentShouldUpdate) {
	        monitorCodeUse(
	          'react_component_should_update_warning',
	          { component: spec.displayName }
	        );
	        console.warn(
	          (spec.displayName || 'A component') + ' has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.'
	         );
	      }
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactCompositeComponentInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    if ("production" !== process.env.NODE_ENV) {
	      return ReactLegacyElement.wrapFactory(
	        ReactElementValidator.createFactory(Constructor)
	      );
	    }
	    return ReactLegacyElement.wrapFactory(
	      ReactElement.createFactory(Constructor)
	    );
	  },
	
	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	};
	
	module.exports = ReactCompositeComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 79 */
/*!********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactContext.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */
	
	"use strict";
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	
	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {
	
	  /**
	   * @internal
	   * @type {object}
	   */
	  current: {},
	
	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }
	
	};
	
	module.exports = ReactContext;


/***/ },
/* 80 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactCurrentOwner.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
	
	"use strict";
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;


/***/ },
/* 81 */
/*!********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactElement.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
	
	"use strict";
	
	var ReactContext = __webpack_require__(/*! ./ReactContext */ 79);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 80);
	
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};
	
	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {
	
	    configurable: false,
	    enumerable: true,
	
	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },
	
	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the ' + key + ' property of the component. ' +
	        'Mutate the existing props object instead.'
	      ) : null);
	      this._store[key] = value;
	    }
	
	  });
	}
	
	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;
	
	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;
	
	  // Record the component responsible for creating this element.
	  this._owner = owner;
	
	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;
	
	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = { validated: false, props: props };
	
	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }
	
	  this.props = props;
	};
	
	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};
	
	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}
	
	ReactElement.createElement = function(type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	
	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        config.key !== null,
	        'createElement(...): Encountered component with a `key` of null. In ' +
	        'a future version, this will be treated as equivalent to the string ' +
	        '\'null\'; instead, provide an explicit key or use undefined.'
	      ) : null);
	    }
	    // TODO: Change this back to `config.key === undefined`
	    key = config.key == null ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	
	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};
	
	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );
	
	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};
	
	module.exports = ReactElement;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 82 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactElementValidator.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 133);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 80);
	
	var monitorCodeUse = __webpack_require__(/*! ./monitorCodeUse */ 136);
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {
	  'react_key_warning': {},
	  'react_numeric_key_warning': {}
	};
	var ownerHasMonitoredObjectMap = {};
	
	var loggedTypeFailures = {};
	
	var NUMERIC_PROPERTY_REGEX = /^\d+$/;
	
	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return current && current.constructor.displayName || undefined;
	}
	
	/**
	 * Warn if the component doesn't have an explicit key assigned to it.
	 * This component is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactComponent} component Component that requires a key.
	 * @param {*} parentType component's parent's type.
	 */
	function validateExplicitKey(component, parentType) {
	  if (component._store.validated || component.key != null) {
	    return;
	  }
	  component._store.validated = true;
	
	  warnAndMonitorForKeyUse(
	    'react_key_warning',
	    'Each child in an array should have a unique "key" prop.',
	    component,
	    parentType
	  );
	}
	
	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactComponent} component Component that requires a key.
	 * @param {*} parentType component's parent's type.
	 */
	function validatePropertyKey(name, component, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'react_numeric_key_warning',
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    component,
	    parentType
	  );
	}
	
	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} warningID The id used when logging.
	 * @param {string} message The base warning that gets output.
	 * @param {ReactComponent} component Component that requires a key.
	 * @param {*} parentType component's parent's type.
	 */
	function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = parentType.displayName;
	
	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[warningID];
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;
	
	  message += ownerName ?
	    (" Check the render method of " + ownerName + ".") :
	    (" Check the renderComponent call using <" + parentName + ">.");
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerName = null;
	  if (component._owner && component._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    childOwnerName = component._owner.constructor.displayName;
	
	    message += (" It was passed a child from " + childOwnerName + ".");
	  }
	
	  message += ' See http://fb.me/react-warning-keys for more information.';
	  monitorCodeUse(warningID, {
	    component: useName,
	    componentOwner: childOwnerName
	  });
	  console.warn(message);
	}
	
	/**
	 * Log that we're using an object map. We're considering deprecating this
	 * feature and replace it with proper Map and ImmutableMap data structures.
	 *
	 * @internal
	 */
	function monitorUseOfObjectMap() {
	  var currentName = getCurrentOwnerDisplayName() || '';
	  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
	    return;
	  }
	  ownerHasMonitoredObjectMap[currentName] = true;
	  monitorCodeUse('react_object_map_children');
	}
	
	/**
	 * Ensure that every component either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {*} component Statically passed child of any type.
	 * @param {*} parentType component's parent's type.
	 * @return {boolean}
	 */
	function validateChildKeys(component, parentType) {
	  if (Array.isArray(component)) {
	    for (var i = 0; i < component.length; i++) {
	      var child = component[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(component)) {
	    // This component was passed in a valid location.
	    component._store.validated = true;
	  } else if (component && typeof component === 'object') {
	    monitorUseOfObjectMap();
	    for (var name in component) {
	      validatePropertyKey(name, component[name], parentType);
	    }
	  }
	}
	
	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	        // This will soon use the warning module
	        monitorCodeUse(
	          'react_failed_descriptor_type_check',
	          { message: error.message }
	        );
	      }
	    }
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function(type, props, children) {
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	
	    var name = type.displayName;
	    if (type.propTypes) {
	      checkPropTypes(
	        name,
	        type.propTypes,
	        element.props,
	        ReactPropTypeLocations.prop
	      );
	    }
	    if (type.contextTypes) {
	      checkPropTypes(
	        name,
	        type.contextTypes,
	        element._context,
	        ReactPropTypeLocations.context
	      );
	    }
	    return element;
	  },
	
	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    validatedFactory.type = type;
	    return validatedFactory;
	  }
	
	};
	
	module.exports = ReactElementValidator;


/***/ },
/* 83 */
/*!****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOM.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactElementValidator = __webpack_require__(/*! ./ReactElementValidator */ 82);
	var ReactLegacyElement = __webpack_require__(/*! ./ReactLegacyElement */ 87);
	
	var mapObject = __webpack_require__(/*! ./mapObject */ 137);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactLegacyElement.markNonLegacyFactory(
	      ReactElementValidator.createFactory(tag)
	    );
	  }
	  return ReactLegacyElement.markNonLegacyFactory(
	    ReactElement.createFactory(tag)
	  );
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',
	
	  // SVG
	  circle: 'circle',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'
	
	}, createDOMFactory);
	
	module.exports = ReactDOM;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 84 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMComponent.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var CSSPropertyOperations = __webpack_require__(/*! ./CSSPropertyOperations */ 139);
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 109);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 74);
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 140);
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 77);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 115);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var ReactMultiChild = __webpack_require__(/*! ./ReactMultiChild */ 89);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 90);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var escapeTextForBrowser = __webpack_require__(/*! ./escapeTextForBrowser */ 126);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 141);
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	var monitorCodeUse = __webpack_require__(/*! ./monitorCodeUse */ 136);
	
	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};
	
	var STYLE = keyOf({style: null});
	
	var ELEMENT_NODE_TYPE = 1;
	
	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.children == null || props.dangerouslySetInnerHTML == null,
	    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
	  if ("production" !== process.env.NODE_ENV) {
	    if (props.contentEditable && props.children != null) {
	      console.warn(
	        'A component is `contentEditable` and contains `children` managed by ' +
	        'React. It is now your responsibility to guarantee that none of those '+
	        'nodes are unexpectedly modified or duplicated. This is probably not ' +
	        'intentional.'
	      );
	    }
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}
	
	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    if (registrationName === 'onScroll' &&
	        !isEventSupported('scroll', true)) {
	      monitorCodeUse('react_no_scroll_event');
	      console.warn('This browser doesn\'t support the `onScroll` event');
	    }
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};
	
	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this.tagName = tag.toUpperCase();
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {number} mountDepth number of components in the owner hierarchy
	   * @return {string} The computed markup.
	   */
	  mountComponent: ReactPerf.measure(
	    'ReactDOMComponent',
	    'mountComponent',
	    function(rootID, transaction, mountDepth) {
	      ReactComponent.Mixin.mountComponent.call(
	        this,
	        rootID,
	        transaction,
	        mountDepth
	      );
	      assertValidProps(this.props);
	      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	      return (
	        this._createOpenTagMarkupAndPutListeners(transaction) +
	        this._createContentMarkup(transaction) +
	        closeTag
	      );
	    }
	  ),
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this.props;
	    var ret = '<' + this._tag;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = props.style = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }
	
	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = this.props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
	      var childrenToUse = contentToUse != null ? null : this.props.children;
	      if (contentToUse != null) {
	        return escapeTextForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction
	        );
	        return mountImages.join('');
	      }
	    }
	    return '';
	  },
	
	  receiveComponent: function(nextElement, transaction) {
	    if (nextElement === this._currentElement &&
	        nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for a element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }
	
	    ReactComponent.Mixin.receiveComponent.call(
	      this,
	      nextElement,
	      transaction
	    );
	  },
	
	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: ReactPerf.measure(
	    'ReactDOMComponent',
	    'updateComponent',
	    function(transaction, prevElement) {
	      assertValidProps(this._currentElement.props);
	      ReactComponent.Mixin.updateComponent.call(
	        this,
	        transaction,
	        prevElement
	      );
	      this._updateDOMProperties(prevElement.props, transaction);
	      this._updateDOMChildren(prevElement.props, transaction);
	    }
	  ),
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = lastProps[propKey];
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        ReactComponent.BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = nextProps.style = assign({}, nextProp);
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        ReactComponent.BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      ReactComponent.BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction) {
	    var nextProps = this.props;
	
	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction);
	    }
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponent.Mixin.unmountComponent.call(this);
	  }
	
	};
	
	assign(
	  ReactDOMComponent.prototype,
	  ReactComponent.Mixin,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin,
	  ReactBrowserComponentMixin
	);
	
	module.exports = ReactDOMComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 85 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDefaultInjection.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
	
	"use strict";
	
	var BeforeInputEventPlugin = __webpack_require__(/*! ./BeforeInputEventPlugin */ 142);
	var ChangeEventPlugin = __webpack_require__(/*! ./ChangeEventPlugin */ 143);
	var ClientReactRootIndex = __webpack_require__(/*! ./ClientReactRootIndex */ 144);
	var CompositionEventPlugin = __webpack_require__(/*! ./CompositionEventPlugin */ 145);
	var DefaultEventPluginOrder = __webpack_require__(/*! ./DefaultEventPluginOrder */ 146);
	var EnterLeaveEventPlugin = __webpack_require__(/*! ./EnterLeaveEventPlugin */ 147);
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	var HTMLDOMPropertyConfig = __webpack_require__(/*! ./HTMLDOMPropertyConfig */ 148);
	var MobileSafariClickEventPlugin = __webpack_require__(/*! ./MobileSafariClickEventPlugin */ 149);
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 140);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(/*! ./ReactComponentBrowserEnvironment */ 150);
	var ReactDefaultBatchingStrategy = __webpack_require__(/*! ./ReactDefaultBatchingStrategy */ 151);
	var ReactDOMComponent = __webpack_require__(/*! ./ReactDOMComponent */ 84);
	var ReactDOMButton = __webpack_require__(/*! ./ReactDOMButton */ 152);
	var ReactDOMForm = __webpack_require__(/*! ./ReactDOMForm */ 153);
	var ReactDOMImg = __webpack_require__(/*! ./ReactDOMImg */ 154);
	var ReactDOMInput = __webpack_require__(/*! ./ReactDOMInput */ 155);
	var ReactDOMOption = __webpack_require__(/*! ./ReactDOMOption */ 156);
	var ReactDOMSelect = __webpack_require__(/*! ./ReactDOMSelect */ 157);
	var ReactDOMTextarea = __webpack_require__(/*! ./ReactDOMTextarea */ 158);
	var ReactEventListener = __webpack_require__(/*! ./ReactEventListener */ 159);
	var ReactInjection = __webpack_require__(/*! ./ReactInjection */ 160);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 86);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var SelectEventPlugin = __webpack_require__(/*! ./SelectEventPlugin */ 161);
	var ServerReactRootIndex = __webpack_require__(/*! ./ServerReactRootIndex */ 162);
	var SimpleEventPlugin = __webpack_require__(/*! ./SimpleEventPlugin */ 163);
	var SVGDOMPropertyConfig = __webpack_require__(/*! ./SVGDOMPropertyConfig */ 164);
	
	var createFullPageComponent = __webpack_require__(/*! ./createFullPageComponent */ 165);
	
	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    CompositionEventPlugin: CompositionEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );
	
	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,
	
	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });
	
	  // This needs to happen after createFullPageComponent() otherwise the mixin
	  // gets double injected.
	  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
	
	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactComponentBrowserEnvironment.ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );
	
	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	
	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(/*! ./ReactDefaultPerf */ 43);
	      ReactDefaultPerf.start();
	    }
	  }
	}
	
	module.exports = {
	  inject: inject
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 86 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactInstanceHandles.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactRootIndex = __webpack_require__(/*! ./ReactRootIndex */ 166);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;
	
	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;
	
	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}
	
	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}
	
	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}
	
	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}
	
	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}
	
	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  for (var i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}
	
	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}
	
	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}
	
	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {
	
	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },
	
	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },
	
	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },
	
	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },
	
	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },
	
	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,
	
	  isAncestorIDOf: isAncestorIDOf,
	
	  SEPARATOR: SEPARATOR
	
	};
	
	module.exports = ReactInstanceHandles;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 87 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactLegacyElement.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLegacyElement
	 */
	
	"use strict";
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 80);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var monitorCodeUse = __webpack_require__(/*! ./monitorCodeUse */ 136);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var legacyFactoryLogs = {};
	function warnForLegacyFactoryCall() {
	  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
	    return;
	  }
	  var owner = ReactCurrentOwner.current;
	  var name = owner && owner.constructor ? owner.constructor.displayName : '';
	  if (!name) {
	    name = 'Something';
	  }
	  if (legacyFactoryLogs.hasOwnProperty(name)) {
	    return;
	  }
	  legacyFactoryLogs[name] = true;
	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    name + ' is calling a React component directly. ' +
	    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
	  ) : null);
	  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
	}
	
	function warnForPlainFunctionType(type) {
	  var isReactClass =
	    type.prototype &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function';
	  if (isReactClass) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Did not expect to get a React class here. Use `Component` instead ' +
	      'of `Component.type` or `this.constructor`.'
	    ) : null);
	  } else {
	    if (!type._reactWarnedForThisType) {
	      try {
	        type._reactWarnedForThisType = true;
	      } catch (x) {
	        // just incase this is a frozen object or some special object
	      }
	      monitorCodeUse(
	        'react_non_component_in_jsx',
	        { version: 3, name: type.name }
	      );
	    }
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'This JSX uses a plain function. Only React components are ' +
	      'valid in React\'s JSX transform.'
	    ) : null);
	  }
	}
	
	function warnForNonLegacyFactory(type) {
	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
	    'Use the string "' + type.type + '" instead.'
	  ) : null);
	}
	
	/**
	 * Transfer static properties from the source to the target. Functions are
	 * rebound to have this reflect the original source.
	 */
	function proxyStaticMethods(target, source) {
	  if (typeof source !== 'function') {
	    return;
	  }
	  for (var key in source) {
	    if (source.hasOwnProperty(key)) {
	      var value = source[key];
	      if (typeof value === 'function') {
	        var bound = value.bind(source);
	        // Copy any properties defined on the function, such as `isRequired` on
	        // a PropTypes validator.
	        for (var k in value) {
	          if (value.hasOwnProperty(k)) {
	            bound[k] = value[k];
	          }
	        }
	        target[key] = bound;
	      } else {
	        target[key] = value;
	      }
	    }
	  }
	}
	
	// We use an object instead of a boolean because booleans are ignored by our
	// mocking libraries when these factories gets mocked.
	var LEGACY_MARKER = {};
	var NON_LEGACY_MARKER = {};
	
	var ReactLegacyElementFactory = {};
	
	ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
	  var legacyCreateFactory = function(type) {
	    if (typeof type !== 'function') {
	      // Non-function types cannot be legacy factories
	      return createFactory(type);
	    }
	
	    if (type.isReactNonLegacyFactory) {
	      // This is probably a factory created by ReactDOM we unwrap it to get to
	      // the underlying string type. It shouldn't have been passed here so we
	      // warn.
	      if ("production" !== process.env.NODE_ENV) {
	        warnForNonLegacyFactory(type);
	      }
	      return createFactory(type.type);
	    }
	
	    if (type.isReactLegacyFactory) {
	      // This is probably a legacy factory created by ReactCompositeComponent.
	      // We unwrap it to get to the underlying class.
	      return createFactory(type.type);
	    }
	
	    if ("production" !== process.env.NODE_ENV) {
	      warnForPlainFunctionType(type);
	    }
	
	    // Unless it's a legacy factory, then this is probably a plain function,
	    // that is expecting to be invoked by JSX. We can just return it as is.
	    return type;
	  };
	  return legacyCreateFactory;
	};
	
	ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
	  var legacyCreateElement = function(type, props, children) {
	    if (typeof type !== 'function') {
	      // Non-function types cannot be legacy factories
	      return createElement.apply(this, arguments);
	    }
	
	    var args;
	
	    if (type.isReactNonLegacyFactory) {
	      // This is probably a factory created by ReactDOM we unwrap it to get to
	      // the underlying string type. It shouldn't have been passed here so we
	      // warn.
	      if ("production" !== process.env.NODE_ENV) {
	        warnForNonLegacyFactory(type);
	      }
	      args = Array.prototype.slice.call(arguments, 0);
	      args[0] = type.type;
	      return createElement.apply(this, args);
	    }
	
	    if (type.isReactLegacyFactory) {
	      // This is probably a legacy factory created by ReactCompositeComponent.
	      // We unwrap it to get to the underlying class.
	      if (type._isMockFunction) {
	        // If this is a mock function, people will expect it to be called. We
	        // will actually call the original mock factory function instead. This
	        // future proofs unit testing that assume that these are classes.
	        type.type._mockedReactClassConstructor = type;
	      }
	      args = Array.prototype.slice.call(arguments, 0);
	      args[0] = type.type;
	      return createElement.apply(this, args);
	    }
	
	    if ("production" !== process.env.NODE_ENV) {
	      warnForPlainFunctionType(type);
	    }
	
	    // This is being called with a plain function we should invoke it
	    // immediately as if this was used with legacy JSX.
	    return type.apply(null, Array.prototype.slice.call(arguments, 1));
	  };
	  return legacyCreateElement;
	};
	
	ReactLegacyElementFactory.wrapFactory = function(factory) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof factory === 'function',
	    'This is suppose to accept a element factory'
	  ) : invariant(typeof factory === 'function'));
	  var legacyElementFactory = function(config, children) {
	    // This factory should not be called when JSX is used. Use JSX instead.
	    if ("production" !== process.env.NODE_ENV) {
	      warnForLegacyFactoryCall();
	    }
	    return factory.apply(this, arguments);
	  };
	  proxyStaticMethods(legacyElementFactory, factory.type);
	  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
	  legacyElementFactory.type = factory.type;
	  return legacyElementFactory;
	};
	
	// This is used to mark a factory that will remain. E.g. we're allowed to call
	// it as a function. However, you're not suppose to pass it to createElement
	// or createFactory, so it will warn you if you do.
	ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
	  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
	  return factory;
	};
	
	// Checks if a factory function is actually a legacy factory pretending to
	// be a class.
	ReactLegacyElementFactory.isValidFactory = function(factory) {
	  // TODO: This will be removed and moved into a class validator or something.
	  return typeof factory === 'function' &&
	    factory.isReactLegacyFactory === LEGACY_MARKER;
	};
	
	ReactLegacyElementFactory.isValidClass = function(factory) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'isValidClass is deprecated and will be removed in a future release. ' +
	      'Use a more specific validator instead.'
	    ) : null);
	  }
	  return ReactLegacyElementFactory.isValidFactory(factory);
	};
	
	ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;
	
	module.exports = ReactLegacyElementFactory;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 88 */
/*!******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactMount.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
	
	"use strict";
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 109);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 115);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 80);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactLegacyElement = __webpack_require__(/*! ./ReactLegacyElement */ 87);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 86);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 90);
	
	var containsNode = __webpack_require__(/*! ./containsNode */ 167);
	var deprecated = __webpack_require__(/*! ./deprecated */ 95);
	var getReactRootElementInContainer = __webpack_require__(/*! ./getReactRootElementInContainer */ 168);
	var instantiateReactComponent = __webpack_require__(/*! ./instantiateReactComponent */ 135);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var shouldUpdateReactComponent = __webpack_require__(/*! ./shouldUpdateReactComponent */ 138);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var createElement = ReactLegacyElement.wrapCreateElement(
	  ReactElement.createElement
	);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	
	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};
	
	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};
	
	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}
	
	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];
	
	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}
	
	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));
	
	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }
	
	  return id;
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}
	
	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));
	
	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}
	
	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}
	
	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );
	
	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}
	
	/**
	 * Mounting is the process of initializing a React component by creatings its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextComponent,
	      container,
	      callback) {
	    var nextProps = nextComponent.props;
	    ReactMount.scrollMonitor(container, function() {
	      prevComponent.replaceProps(nextProps, callback);
	    });
	
	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }
	
	    return prevComponent;
	  },
	
	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        container.nodeType === ELEMENT_NODE_TYPE ||
	        container.nodeType === DOC_NODE_TYPE
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      container.nodeType === ELEMENT_NODE_TYPE ||
	      container.nodeType === DOC_NODE_TYPE
	    )));
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	
	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },
	
	  /**
	   * Render a new component into the DOM.
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: ReactPerf.measure(
	    'ReactMount',
	    '_renderNewRootComponent',
	    function(
	        nextComponent,
	        container,
	        shouldReuseMarkup) {
	      // Various parts of our code (such as ReactCompositeComponent's
	      // _renderValidatedComponent) assume that calls to render aren't nested;
	      // verify that that's the case.
	      ("production" !== process.env.NODE_ENV ? warning(
	        ReactCurrentOwner.current == null,
	        '_renderNewRootComponent(): Render methods should be a pure function ' +
	        'of props and state; triggering nested component updates from ' +
	        'render is not allowed. If necessary, trigger nested updates in ' +
	        'componentDidUpdate.'
	      ) : null);
	
	      var componentInstance = instantiateReactComponent(nextComponent, null);
	      var reactRootID = ReactMount._registerComponent(
	        componentInstance,
	        container
	      );
	      componentInstance.mountComponentIntoNode(
	        reactRootID,
	        container,
	        shouldReuseMarkup
	      );
	
	      if ("production" !== process.env.NODE_ENV) {
	        // Record the root element in case it later gets transplanted.
	        rootElementsByReactRootID[reactRootID] =
	          getReactRootElementInContainer(container);
	      }
	
	      return componentInstance;
	    }
	  ),
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'renderComponent(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        ReactLegacyElement.isValidFactory(nextElement) ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like a element
	        typeof nextElement.props !== "undefined" ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));
	
	    var prevComponent = instancesByReactRootID[getReactRootID(container)];
	
	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        );
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;
	
	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    );
	    callback && callback.call(component);
	    return component;
	  },
	
	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },
	
	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },
	
	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);
	
	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },
	
	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    instance.unmountComponent();
	
	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }
	
	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },
	
	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];
	
	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));
	
	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          console.warn(
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          );
	        }
	      }
	    }
	
	    return container;
	  },
	
	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },
	
	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },
	
	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },
	
	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;
	
	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
	
	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;
	
	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;
	
	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.
	
	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }
	
	        child = child.nextSibling;
	      }
	
	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;
	
	        return targetChild;
	      }
	    }
	
	    firstChildren.length = 0;
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },
	
	
	  /**
	   * React ID utilities.
	   */
	
	  getReactRootID: getReactRootID,
	
	  getID: getID,
	
	  setID: setID,
	
	  getNode: getNode,
	
	  purgeID: purgeID
	};
	
	// Deprecations (remove for 0.13)
	ReactMount.renderComponent = deprecated(
	  'ReactMount',
	  'renderComponent',
	  'render',
	  this,
	  ReactMount.render
	);
	
	module.exports = ReactMount;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 89 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactMultiChild.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 77);
	var ReactMultiChildUpdateTypes = __webpack_require__(/*! ./ReactMultiChildUpdateTypes */ 169);
	
	var flattenChildren = __webpack_require__(/*! ./flattenChildren */ 170);
	var instantiateReactComponent = __webpack_require__(/*! ./instantiateReactComponent */ 135);
	var shouldUpdateReactComponent = __webpack_require__(/*! ./shouldUpdateReactComponent */ 138);
	
	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;
	
	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];
	
	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];
	
	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}
	
	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction) {
	      var children = flattenChildren(nestedChildren);
	      var mountImages = [];
	      var index = 0;
	      this._renderedChildren = children;
	      for (var name in children) {
	        var child = children[name];
	        if (children.hasOwnProperty(name)) {
	          // The rendered children must be turned into instances as they're
	          // mounted.
	          var childInstance = instantiateReactComponent(child, null);
	          children[name] = childInstance;
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = childInstance.mountComponent(
	            rootID,
	            transaction,
	            this._mountDepth + 1
	          );
	          childInstance._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          errorThrown ? clearQueue() : processQueue();
	        }
	      }
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          errorThrown ? clearQueue() : processQueue();
	        }
	      }
	    },
	
	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction) {
	      var nextChildren = flattenChildren(nextNestedChildren);
	      var prevChildren = this._renderedChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var prevElement = prevChild && prevChild._currentElement;
	        var nextElement = nextChildren[name];
	        if (shouldUpdateReactComponent(prevElement, nextElement)) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild.receiveComponent(nextElement, transaction);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          var nextChildInstance = instantiateReactComponent(
	            nextElement,
	            null
	          );
	          this._mountChildByNameAtIndex(
	            nextChildInstance, name, nextIndex, transaction
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren[name])) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      for (var name in renderedChildren) {
	        var renderedChild = renderedChildren[name];
	        // TODO: When is this not true?
	        if (renderedChild.unmountComponent) {
	          renderedChild.unmountComponent();
	        }
	      }
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },
	
	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(child, name, index, transaction) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = child.mountComponent(
	        rootID,
	        transaction,
	        this._mountDepth + 1
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	      this._renderedChildren = this._renderedChildren || {};
	      this._renderedChildren[name] = child;
	    },
	
	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	      child.unmountComponent();
	      delete this._renderedChildren[name];
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;


/***/ },
/* 90 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactPerf.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,
	
	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,
	
	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },
	
	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};
	
	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}
	
	module.exports = ReactPerf;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 91 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactPropTypes.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 134);
	
	var deprecated = __webpack_require__(/*! ./deprecated */ 95);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker,
	
	  component: deprecated(
	    'React.PropTypes',
	    'component',
	    'element',
	    this,
	    elementTypeChecker
	  ),
	  renderable: deprecated(
	    'React.PropTypes',
	    'renderable',
	    'node',
	    this,
	    nodeTypeChecker
	  )
	};
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ")+
	          ("`" + componentName + "`.")
	        );
	      }
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns());
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	  }
	  return createChainableTypeChecker(validate, 'expected `object`');
	}
	
	function isNode(propValue) {
	  switch(typeof propValue) {
	    case 'number':
	    case 'string':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	module.exports = ReactPropTypes;


/***/ },
/* 92 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactServerRendering.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	"use strict";
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 86);
	var ReactMarkupChecksum = __webpack_require__(/*! ./ReactMarkupChecksum */ 171);
	var ReactServerRenderingTransaction =
	  __webpack_require__(/*! ./ReactServerRenderingTransaction */ 172);
	
	var instantiateReactComponent = __webpack_require__(/*! ./instantiateReactComponent */ 135);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));
	
	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);
	
	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, 0);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));
	
	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);
	
	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, 0);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}
	
	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 93 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactTextComponent.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTextComponent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 74);
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 77);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var escapeTextForBrowser = __webpack_require__(/*! ./escapeTextForBrowser */ 126);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactTextComponent = function(props) {
	  // This constructor and it's argument is currently used by mocks.
	};
	
	assign(ReactTextComponent.prototype, ReactComponent.Mixin, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {number} mountDepth number of components in the owner hierarchy
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, mountDepth) {
	    ReactComponent.Mixin.mountComponent.call(
	      this,
	      rootID,
	      transaction,
	      mountDepth
	    );
	
	    var escapedText = escapeTextForBrowser(this.props);
	
	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }
	
	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {object} nextComponent Contains the next text content.
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextComponent, transaction) {
	    var nextProps = nextComponent.props;
	    if (nextProps !== this.props) {
	      this.props = nextProps;
	      ReactComponent.BackendIDOperations.updateTextContentByID(
	        this._rootNodeID,
	        nextProps
	      );
	    }
	  }
	
	});
	
	var ReactTextComponentFactory = function(text) {
	  // Bypass validation and configuration
	  return new ReactElement(ReactTextComponent, null, null, null, null, text);
	};
	
	ReactTextComponentFactory.type = ReactTextComponent;
	
	module.exports = ReactTextComponentFactory;


/***/ },
/* 94 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/Object.assign.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */
	
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
	
	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }
	
	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }
	
	    var from = Object(nextSource);
	
	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.
	
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }
	
	  return to;
	};
	
	module.exports = assign;


/***/ },
/* 95 */
/*!******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/deprecated.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} namespace The namespace of the call, eg 'React'
	 * @param {string} oldName The old function name, eg 'renderComponent'
	 * @param {string} newName The new function name, eg 'render'
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {*} Will be the value as returned from `fn`
	 */
	function deprecated(namespace, oldName, newName, ctx, fn) {
	  var warned = false;
	  if ("production" !== process.env.NODE_ENV) {
	    var newFn = function() {
	      ("production" !== process.env.NODE_ENV ? warning(
	        warned,
	        (namespace + "." + oldName + " will be deprecated in a future version. ") +
	        ("Use " + namespace + "." + newName + " instead.")
	      ) : null);
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    newFn.displayName = (namespace + "_" + oldName);
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }
	
	  return fn;
	}
	
	module.exports = deprecated;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 96 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/onlyChild.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	"use strict";
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}
	
	module.exports = onlyChild;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 97 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ExecutionEnvironment.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	/*jslint evil: true */
	
	"use strict";
	
	var canUseDOM = !!(
	  typeof window !== 'undefined' &&
	  window.document &&
	  window.document.createElement
	);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;


/***/ },
/* 98 */
/*!********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/shallowEqual.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */
	
	"use strict";
	
	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = shallowEqual;


/***/ },
/* 99 */
/*!************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactCSSTransitionGroupChild.js ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */
	
	"use strict";
	
	var React = __webpack_require__(/*! ./React */ 35);
	
	var CSSCore = __webpack_require__(/*! ./CSSCore */ 173);
	var ReactTransitionEvents = __webpack_require__(/*! ./ReactTransitionEvents */ 174);
	
	var onlyChild = __webpack_require__(/*! ./onlyChild */ 96);
	
	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	var NO_EVENT_TIMEOUT = 5000;
	
	var noEventListener = null;
	
	
	if ("production" !== process.env.NODE_ENV) {
	  noEventListener = function() {
	    console.warn(
	      'transition(): tried to perform an animation without ' +
	      'an animationend or transitionend event after timeout (' +
	      NO_EVENT_TIMEOUT + 'ms). You should either disable this ' +
	      'transition in JS or add a CSS animation/transition.'
	    );
	  };
	}
	
	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',
	
	  transition: function(animationType, finishCallback) {
	    var node = this.getDOMNode();
	    var className = this.props.name + '-' + animationType;
	    var activeClassName = className + '-active';
	    var noEventTimeout = null;
	
	    var endListener = function(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        clearTimeout(noEventTimeout);
	      }
	
	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);
	
	      ReactTransitionEvents.removeEndEventListener(node, endListener);
	
	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      finishCallback && finishCallback();
	    };
	
	    ReactTransitionEvents.addEndEventListener(node, endListener);
	
	    CSSCore.addClass(node, className);
	
	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);
	
	    if ("production" !== process.env.NODE_ENV) {
	      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
	    }
	  },
	
	  queueClass: function(className) {
	    this.classNameQueue.push(className);
	
	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },
	
	  flushClassNameQueue: function() {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(
	        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
	      );
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },
	
	  componentWillMount: function() {
	    this.classNameQueue = [];
	  },
	
	  componentWillUnmount: function() {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },
	
	  componentWillEnter: function(done) {
	    if (this.props.enter) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },
	
	  componentWillLeave: function(done) {
	    if (this.props.leave) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },
	
	  render: function() {
	    return onlyChild(this.props.children);
	  }
	});
	
	module.exports = ReactCSSTransitionGroupChild;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 100 */
/*!***********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactTransitionChildMapping.js ***!
  \***********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */
	
	"use strict";
	
	var ReactChildren = __webpack_require__(/*! ./ReactChildren */ 76);
	
	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around ReactChildren.map().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function(children) {
	    return ReactChildren.map(children, function(child) {
	      return child;
	    });
	  },
	
	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function(prev, next) {
	    prev = prev || {};
	    next = next || {};
	
	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }
	
	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};
	
	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }
	
	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
	            pendingNextKey
	          );
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }
	
	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }
	
	    return childMapping;
	  }
	};
	
	module.exports = ReactTransitionChildMapping;


/***/ },
/* 101 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/emptyFunction.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
	
	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };
	
	module.exports = emptyFunction;


/***/ },
/* 102 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/CallbackQueue.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 103);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}
	
	assign(CallbackQueue.prototype, {
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        "Mismatched list of contexts in callback queue"
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },
	
	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }
	
	});
	
	PooledClass.addPoolingTo(CallbackQueue);
	
	module.exports = CallbackQueue;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 103 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/PooledClass.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 104 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/Transaction.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM upates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR) {
	          wrapper.close && wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	var Transaction = {
	
	  Mixin: Mixin,
	
	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}
	
	};
	
	module.exports = Transaction;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 105 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/invariant.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
	
	"use strict";
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 106 */
/*!***************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/warning.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */
	
	"use strict";
	
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {var args=Array.prototype.slice.call(arguments,2);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
	    }
	  };
	}
	
	module.exports = warning;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 107 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactPropTransferer.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */
	
	"use strict";
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var joinClasses = __webpack_require__(/*! ./joinClasses */ 175);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var didWarn = false;
	
	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function(props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}
	
	var transferStrategyMerge = createTransferStrategy(function(a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});
	
	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};
	
	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }
	
	    var transferStrategy = TransferStrategies[thisKey];
	
	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}
	
	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {
	
	  TransferStrategies: TransferStrategies,
	
	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function(oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  },
	
	  /**
	   * @lends {ReactPropTransferer.prototype}
	   */
	  Mixin: {
	
	    /**
	     * Transfer props from this component to a target component.
	     *
	     * Props that do not have an explicit transfer strategy will be transferred
	     * only if the target component does not already have the prop set.
	     *
	     * This is usually used to pass down props to a returned root component.
	     *
	     * @param {ReactElement} element Component receiving the properties.
	     * @return {ReactElement} The supplied `component`.
	     * @final
	     * @protected
	     */
	    transferPropsTo: function(element) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        element._owner === this,
	        '%s: You can\'t call transferPropsTo() on a component that you ' +
	        'don\'t own, %s. This usually means you are calling ' +
	        'transferPropsTo() on a component passed in as props or children.',
	        this.constructor.displayName,
	        typeof element.type === 'string' ?
	        element.type :
	        element.type.displayName
	      ) : invariant(element._owner === this));
	
	      if ("production" !== process.env.NODE_ENV) {
	        if (!didWarn) {
	          didWarn = true;
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'transferPropsTo is deprecated. ' +
	            'See http://fb.me/react-transferpropsto for more information.'
	          ) : null);
	        }
	      }
	
	      // Because elements are immutable we have to merge into the existing
	      // props object rather than clone it.
	      transferInto(element.props, this.props);
	
	      return element;
	    }
	
	  }
	};
	
	module.exports = ReactPropTransferer;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 108 */
/*!*************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/keyOf.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	
	module.exports = keyOf;


/***/ },
/* 109 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/DOMProperty.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */
	
	/*jslint bitwise: true */
	
	"use strict";
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }
	
	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));
	
	      DOMProperty.isStandardName[propName] = true;
	
	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }
	
	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }
	
	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);
	
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	
	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},
	
	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},
	
	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},
	
	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},
	
	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},
	
	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},
	
	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},
	
	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},
	
	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},
	
	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},
	
	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 110 */
/*!********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDefaultPerfAnalysis.js ***!
  \********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	
	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  'mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};
	
	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}
	
	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;
	
	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}
	
	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	
	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;
	
	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }
	
	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });
	
	  return arr;
	}
	
	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;
	
	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }
	
	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }
	
	      var displayName = measurement.displayNames[id];
	
	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;
	
	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };
	
	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }
	
	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });
	
	  return arr;
	}
	
	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}
	
	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};
	
	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 111 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/performanceNow.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */
	
	var performance = __webpack_require__(/*! ./performance */ 176);
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}
	
	var performanceNow = performance.now.bind(performance);
	
	module.exports = performanceNow;


/***/ },
/* 112 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/EventConstants.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
	
	"use strict";
	
	var keyMirror = __webpack_require__(/*! ./keyMirror */ 130);
	
	var PropagationPhases = keyMirror({bubbled: null, captured: null});
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};
	
	module.exports = EventConstants;


/***/ },
/* 113 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/EventPluginHub.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
	
	"use strict";
	
	var EventPluginRegistry = __webpack_require__(/*! ./EventPluginRegistry */ 177);
	var EventPluginUtils = __webpack_require__(/*! ./EventPluginUtils */ 75);
	
	var accumulateInto = __webpack_require__(/*! ./accumulateInto */ 178);
	var forEachAccumulated = __webpack_require__(/*! ./forEachAccumulated */ 179);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	
	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;
	
	function validateInstanceHandle() {
	  var invalid = !InstanceHandle||
	    !InstanceHandle.traverseTwoPhase ||
	    !InstanceHandle.traverseEnterLeave;
	  if (invalid) {
	    throw new Error('InstanceHandle not injected before use!');
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,
	
	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },
	
	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginRegistry.registrationNameModules,
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));
	
	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },
	
	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function() {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 114 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/EventPropagators.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 113);
	
	var accumulateInto = __webpack_require__(/*! ./accumulateInto */ 178);
	var forEachAccumulated = __webpack_require__(/*! ./forEachAccumulated */ 179);
	
	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}
	
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}
	
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 115 */
/*!********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactBrowserEventEmitter.js ***!
  \********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 113);
	var EventPluginRegistry = __webpack_require__(/*! ./EventPluginRegistry */ 177);
	var ReactEventEmitterMixin = __webpack_require__(/*! ./ReactEventEmitterMixin */ 180);
	var ViewportMetrics = __webpack_require__(/*! ./ViewportMetrics */ 181);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 141);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      ReactBrowserEventEmitter.ReactEventListener &&
	      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
	    );
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];
	
	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            isListening.hasOwnProperty(dependency) &&
	            isListening[dependency]
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },
	
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function(){
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },
	
	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginHub.registrationNameModules,
	
	  putListener: EventPluginHub.putListener,
	
	  getListener: EventPluginHub.getListener,
	
	  deleteListener: EventPluginHub.deleteListener,
	
	  deleteAllListeners: EventPluginHub.deleteAllListeners
	
	});
	
	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 116 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticEvent.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 103);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	var getEventTarget = __webpack_require__(/*! ./getEventTarget */ 182);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}
	
	assign(SyntheticEvent.prototype, {
	
	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    event.preventDefault ? event.preventDefault() : event.returnValue = false;
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;
	
	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);
	
	module.exports = SyntheticEvent;


/***/ },
/* 117 */
/*!********************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/ExecutionEnvironment.js ***!
  \********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	/*jslint evil: true */
	
	"use strict";
	
	var canUseDOM = !!(
	  typeof window !== 'undefined' &&
	  window.document &&
	  window.document.createElement
	);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;


/***/ },
/* 118 */
/*!********************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTable.react.js ***!
  \********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTable.react
	 * @typechecks
	 */
	
	/* jslint bitwise: true */
	
	var FixedDataTableHelper = __webpack_require__(/*! ./FixedDataTableHelper */ 185);
	var Locale = __webpack_require__(/*! ./Locale */ 186);
	var React = __webpack_require__(/*! ./React */ 183);
	var ReactComponentWithPureRenderMixin = __webpack_require__(/*! ./ReactComponentWithPureRenderMixin */ 187);
	var ReactWheelHandler = __webpack_require__(/*! ./ReactWheelHandler */ 188);
	var Scrollbar = __webpack_require__(/*! ./Scrollbar.react */ 189);
	var FixedDataTableBufferedRows = __webpack_require__(/*! ./FixedDataTableBufferedRows.react */ 190);
	var FixedDataTableColumnResizeHandle = __webpack_require__(/*! ./FixedDataTableColumnResizeHandle.react */ 191);
	var FixedDataTableRow = __webpack_require__(/*! ./FixedDataTableRow.react */ 192);
	var FixedDataTableScrollHelper = __webpack_require__(/*! ./FixedDataTableScrollHelper */ 193);
	var FixedDataTableWidthHelper = __webpack_require__(/*! ./FixedDataTableWidthHelper */ 194);
	
	var cloneWithProps = __webpack_require__(/*! ./cloneWithProps */ 195);
	var cx = __webpack_require__(/*! ./cx */ 196);
	var debounceCore = __webpack_require__(/*! ./debounceCore */ 197);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 198);
	var invariant = __webpack_require__(/*! ./invariant */ 184);
	var shallowEqual = __webpack_require__(/*! ./shallowEqual */ 199);
	var translateDOMPositionXY = __webpack_require__(/*! ./translateDOMPositionXY */ 200);
	
	var PropTypes = React.PropTypes;
	var ReactChildren = React.Children;
	
	var renderToString = FixedDataTableHelper.renderToString;
	var EMPTY_OBJECT = {};
	var COLUMN_SETTING_NAMES = [
	  'bodyFixedColumns',
	  'bodyScrollableColumns',
	  'headFixedColumns',
	  'headScrollableColumns',
	  'footFixedColumns',
	  'footScrollableColumns',
	];
	
	/**
	 * Data grid component with fixed or scrollable header and columns.
	 *
	 * The layout of the data table is as follow:
	 *
	 * ```
	 * +---------------------------------------------------+
	 * | Fixed Column Group    | Scrollable Column Group   |
	 * | Header                | Header                    |
	 * |                       |                           |
	 * +---------------------------------------------------+
	 * |                       |                           |
	 * | Fixed Header Columns  | Scrollable Header Columns |
	 * |                       |                           |
	 * +-----------------------+---------------------------+
	 * |                       |                           |
	 * | Fixed Body Columns    | Scrollable Body Columns   |
	 * |                       |                           |
	 * +-----------------------+---------------------------+
	 * |                       |                           |
	 * | Fixed Footer Columns  | Scrollable Footer Columns |
	 * |                       |                           |
	 * +-----------------------+---------------------------+
	 * ```
	 *
	 * - Fixed Column Group Header: These are the headers for a group
	 *   of columns if included in the table that do not scroll
	 *   vertically or horizontally.
	 *
	 * - Scrollable Column Group Header:  The header for a group of columns
	 *   that do not move while scrolling vertically, but move horizontally
	 *   with the horizontal scrolling.
	 *
	 * - Fixed Header Columns: The header columns that do not move while scrolling
	 *   vertically or horizontally.
	 *
	 * - Scrollable Header Columns: The header columns that do not move
	 *   while scrolling vertically, but move horizontally with the horizontal
	 *   scrolling.
	 *
	 * - Fixed Body Columns: The body columns that do not move while scrolling
	 *   horizontally, but move vertically with the vertical scrolling.
	 *
	 * - Scrollable Body Columns: The body columns that move while scrolling
	 *   vertically or horizontally.
	 */
	var FixedDataTable = React.createClass({displayName: "FixedDataTable",
	
	  propTypes: {
	    width: PropTypes.number.isRequired,
	    height: PropTypes.number,
	    maxHeight: PropTypes.number,
	
	    /**
	     * Height of table's owner, This is used to make sure the footer
	     * and scrollbar of the table are visible when current space for table in
	     * view is smaller than final height of table. It allows to avoid resizing
	     * and reflowing table whan it is moving in the view.
	     *
	     * This is used if `ownerHeight < height`.
	     */
	    ownerHeight: PropTypes.number,
	
	    overflowX: PropTypes.oneOf(['hidden', 'auto']),
	    overflowY: PropTypes.oneOf(['hidden', 'auto']),
	
	    /**
	     * Number of rows in the table.
	     */
	    rowsCount: PropTypes.number.isRequired,
	
	    /**
	     * Height of rows unless rowHeightGetter is specified and returns different
	     * value.
	     */
	    rowHeight: PropTypes.number.isRequired,
	
	    /**
	     * If specified, `rowHeightGetter(index)` is called for each row and the
	     * returned value overrides rowHeight for particular row.
	     */
	    rowHeightGetter: PropTypes.func,
	
	    /**
	     * To get rows to display in table, `rowGetter(index)`
	     * is called. rowGetter should be smart enough to handle async
	     * fetching of data and returning temporary objects
	     * while data is being fetched.
	     */
	    rowGetter: PropTypes.func.isRequired,
	
	    /**
	     * To get any additional css classes that should be added to a row,
	     * `rowClassNameGetter(index)` is called.
	     */
	    rowClassNameGetter: PropTypes.func,
	
	    /**
	     * Height of the column group header.
	     */
	    groupHeaderHeight: PropTypes.number,
	
	    /**
	     * Height of the header.
	     */
	    headerHeight: PropTypes.number.isRequired,
	
	    /**
	     * Function that is called to get the data for the header row.
	     */
	    headerDataGetter: PropTypes.func,
	
	    /**
	     * Height of the footer.
	     */
	    footerHeight: PropTypes.number,
	
	    /**
	     * Data that will be passed to footer cell renderers.
	     */
	    footerData: PropTypes.oneOfType([
	      PropTypes.object,
	      PropTypes.array,
	    ]),
	
	    /**
	     * Value of horizontal scroll.
	     */
	    scrollLeft: PropTypes.number,
	
	    /**
	     * Index of column to scroll to.
	     */
	    scrollToColumn: PropTypes.number,
	
	    /**
	     * Value of vertical scroll.
	     */
	    scrollTop: PropTypes.number,
	
	    /**
	     * Index of row to scroll to.
	     */
	    scrollToRow: PropTypes.number,
	
	    /**
	     * Callback that is called when scrolling ends or stops with new horizontal
	     * and vertical scroll values.
	     */
	    onScrollEnd: PropTypes.func,
	
	    /**
	     * Callback that is called when `rowHeightGetter` returns a different height
	     * for a row than the `rowHeight` prop. This is necessary because initially
	     * table estimates heights of some parts of the content.
	     */
	    onContentHeightChange: PropTypes.func,
	
	    /**
	     * Callback that is called when a row is clicked.
	     */
	    onRowClick: PropTypes.func,
	
	    /**
	     * Callback that is called when mouse down event happens above a row.
	     */
	    onRowMouseDown: PropTypes.func,
	
	    /**
	     * Callback that is called when the mouse eneters a row.
	     */
	    onRowMouseEnter: PropTypes.func,
	
	    /**
	     * Callback that is called when resizer has been released
	     * and column needs to be updated.
	     */
	    onColumnResizeEndCallback: PropTypes.func,
	
	    /**
	     * Whether a column is currently being resized.
	     */
	    isColumnResizing: PropTypes.bool,
	  },
	
	  getDefaultProps:function() /*object*/ {
	    return {
	      footerHeight: 0,
	      groupHeaderHeight: 0,
	      headerHeight: 0,
	      scrollLeft: 0,
	      scrollTop: 0,
	    };
	  },
	
	  getInitialState:function() /*object*/ {
	    var props = this.props;
	    var viewportHeight = props.height -
	      props.headerHeight -
	      props.footerHeight -
	      props.groupHeaderHeight;
	    this._scrollHelper = new FixedDataTableScrollHelper(
	      props.rowsCount,
	      props.rowHeight,
	      viewportHeight,
	      props.rowHeightGetter
	    );
	    if (props.scrollTop) {
	      this._scrollHelper.scrollTo(props.scrollTop);
	    }
	    this._didScrollStop = debounceCore(this._didScrollStop, 160, this);
	
	    return this._calculateState(this.props);
	  },
	
	  componentWillMount:function() {
	    var scrollToRow = this.props.scrollToRow;
	    if (scrollToRow !== undefined && scrollToRow !== null) {
	      this._rowToScrollTo = scrollToRow;
	    }
	    var scrollToColumn = this.props.scrollToColumn;
	    if (scrollToColumn !== undefined && scrollToColumn !== null) {
	      this._columnToScrollTo = scrollToColumn;
	    }
	    this._wheelHandler = new ReactWheelHandler(
	      this._onWheel,
	      this.props.overflowX !== 'hidden', // Should handle horizontal scroll
	      this.props.overflowY !== 'hidden' // Should handle vertical scroll
	    );
	  },
	
	  _reportContentHeight:function() {
	    var scrollContentHeight = this.state.scrollContentHeight;
	    var reservedHeight = this.state.reservedHeight;
	    var requiredHeight = scrollContentHeight + reservedHeight;
	    var contentHeight;
	    if (this.state.height > requiredHeight && this.props.ownerHeight) {
	      contentHeight = Math.max(requiredHeight, this.props.ownerHeight);
	    } else {
	      var maxScrollY = scrollContentHeight - this.state.bodyHeight;
	      contentHeight = this.props.height + maxScrollY;
	    }
	    if (contentHeight !== this._contentHeight &&
	        this.props.onContentHeightChange) {
	      this.props.onContentHeightChange(contentHeight);
	    }
	    this._contentHeight = contentHeight;
	  },
	
	  componentDidMount:function() {
	    this._reportContentHeight();
	  },
	
	  componentWillReceiveProps:function(/*object*/ nextProps) {
	    var scrollToRow = nextProps.scrollToRow;
	    if (scrollToRow !== undefined && scrollToRow !== null) {
	      this._rowToScrollTo = scrollToRow;
	    }
	    var scrollToColumn = nextProps.scrollToColumn;
	    if (scrollToColumn !== undefined && scrollToColumn !== null) {
	      this._columnToScrollTo = scrollToColumn;
	    }
	
	    var newOverflowX = nextProps.overflowX;
	    var newOverflowY = nextProps.overflowY;
	    if (newOverflowX !== this.props.overflowX ||
	        newOverflowY !== this.props.overflowY) {
	      this._wheelHandler = new ReactWheelHandler(
	        this._onWheel,
	        newOverflowX !== 'hidden', // Should handle horizontal scroll
	        newOverflowY !== 'hidden' // Should handle vertical scroll
	      );
	    }
	
	    this.setState(this._calculateState(nextProps, this.state));
	  },
	
	  componentDidUpdate:function() {
	    this._reportContentHeight();
	  },
	
	  render:function() /*object*/ {
	    var state = this.state;
	    var props = this.props;
	
	    var groupHeader;
	    if (state.useGroupHeader) {
	      groupHeader = (
	        React.createElement(FixedDataTableRow, {
	          key: "group_header", 
	          className: cx('public/fixedDataTable/header'), 
	          data: state.groupHeaderData, 
	          width: state.width, 
	          height: state.groupHeaderHeight, 
	          index: 0, 
	          zIndex: 1, 
	          offsetTop: 0, 
	          scrollLeft: state.scrollX, 
	          fixedColumns: state.groupHeaderFixedColumns, 
	          scrollableColumns: state.groupHeaderScrollableColumns}
	        )
	      );
	    }
	
	    var maxScrollY = this.state.scrollContentHeight - this.state.bodyHeight;
	    var showScrollbarX = state.maxScrollX > 0 && state.overflowX !== 'hidden';
	    var showScrollbarY = maxScrollY > 0 && state.overflowY !== 'hidden';
	    var scrollbarXHeight = showScrollbarX ? Scrollbar.SIZE : 0;
	    var scrollbarYHeight = state.height - scrollbarXHeight;
	
	    var headerOffsetTop = state.useGroupHeader ? state.groupHeaderHeight : 0;
	    var bodyOffsetTop = headerOffsetTop + state.headerHeight;
	    var bottomSectionOffset = 0;
	    var footOffsetTop = bodyOffsetTop + state.bodyHeight;
	    var rowsContainerHeight = footOffsetTop + state.footerHeight;
	
	    if (props.ownerHeight !== undefined  && props.ownerHeight < props.height) {
	      bottomSectionOffset = props.ownerHeight - props.height;
	      footOffsetTop = Math.min(
	        footOffsetTop,
	        scrollbarYHeight + bottomSectionOffset - state.footerHeight
	      );
	      scrollbarYHeight = props.ownerHeight - scrollbarXHeight;
	    }
	
	    var verticalScrollbar;
	    if (showScrollbarY) {
	      verticalScrollbar =
	        React.createElement(Scrollbar, {
	          size: scrollbarYHeight, 
	          contentSize: scrollbarYHeight + maxScrollY, 
	          onScroll: this._onVerticalScroll, 
	          position: state.scrollY}
	        );
	    }
	
	    var horizontalScrollbar;
	    if (showScrollbarX) {
	      var scrollbarYWidth = showScrollbarY ? Scrollbar.SIZE : 0;
	      var scrollbarXWidth = state.width - scrollbarYWidth;
	      horizontalScrollbar =
	        React.createElement(HorizontalScrollbar, {
	          contentSize: scrollbarXWidth + state.maxScrollX, 
	          offset: bottomSectionOffset, 
	          onScroll: this._onHorizontalScroll, 
	          position: state.scrollX, 
	          size: scrollbarXWidth}
	        );
	    }
	
	    var dragKnob =
	      React.createElement(FixedDataTableColumnResizeHandle, {
	        height: state.height, 
	        initialWidth: state.columnResizingData.width || 0, 
	        minWidth: state.columnResizingData.minWidth || 0, 
	        maxWidth: state.columnResizingData.maxWidth || Number.MAX_VALUE, 
	        visible: !!state.isColumnResizing, 
	        leftOffset: state.columnResizingData.left || 0, 
	        knobHeight: state.headerHeight, 
	        initialEvent: state.columnResizingData.initialEvent, 
	        onColumnResizeEnd: props.onColumnResizeEndCallback, 
	        columnKey: state.columnResizingData.key}
	      );
	
	    var footer = null;
	    if (state.footerHeight) {
	      footer =
	        React.createElement(FixedDataTableRow, {
	          key: "footer", 
	          className: cx('public/fixedDataTable/footer'), 
	          data: state.footerData, 
	          fixedColumns: state.footFixedColumns, 
	          height: state.footerHeight, 
	          index: -1, 
	          zIndex: 1, 
	          offsetTop: footOffsetTop, 
	          scrollableColumns: state.footScrollableColumns, 
	          scrollLeft: state.scrollX, 
	          width: state.width}
	        );
	    }
	
	    var rows = this._renderRows(bodyOffsetTop);
	
	    var header =
	      React.createElement(FixedDataTableRow, {
	        key: "header", 
	        className: cx('public/fixedDataTable/header'), 
	        data: state.headData, 
	        width: state.width, 
	        height: state.headerHeight, 
	        index: -1, 
	        zIndex: 1, 
	        offsetTop: headerOffsetTop, 
	        scrollLeft: state.scrollX, 
	        fixedColumns: state.headFixedColumns, 
	        scrollableColumns: state.headScrollableColumns, 
	        onColumnResize: this._onColumnResize}
	      );
	
	    var shadow;
	    if (state.scrollY) {
	      shadow =
	        React.createElement("div", {
	          className: cx('fixedDataTable/shadow'), 
	          style: {top: bodyOffsetTop}}
	        );
	    }
	
	    return (
	      React.createElement("div", {
	        className: cx('public/fixedDataTable/main'), 
	        onWheel: this._wheelHandler.onWheel, 
	        style: {height: state.height, width: state.width}}, 
	        React.createElement("div", {
	          className: cx('fixedDataTable/rowsContainer'), 
	          style: {height: rowsContainerHeight, width: state.width}}, 
	          dragKnob, 
	          groupHeader, 
	          header, 
	          rows, 
	          footer, 
	          shadow
	        ), 
	        verticalScrollbar, 
	        horizontalScrollbar
	      )
	    );
	  },
	
	  _renderRows:function(/*number*/ offsetTop) /*object*/ {
	    var state = this.state;
	
	    return (
	      React.createElement(FixedDataTableBufferedRows, {
	        defaultRowHeight: state.rowHeight, 
	        firstRowIndex: state.firstRowIndex, 
	        firstRowOffset: state.firstRowOffset, 
	        fixedColumns: state.bodyFixedColumns, 
	        height: state.bodyHeight, 
	        offsetTop: offsetTop, 
	        onRowClick: state.onRowClick, 
	        onRowMouseDown: state.onRowMouseDown, 
	        onRowMouseEnter: state.onRowMouseEnter, 
	        rowClassNameGetter: state.rowClassNameGetter, 
	        rowsCount: state.rowsCount, 
	        rowGetter: state.rowGetter, 
	        rowHeightGetter: state.rowHeightGetter, 
	        scrollLeft: state.scrollX, 
	        scrollableColumns: state.bodyScrollableColumns, 
	        showLastRowBorder: !state.footerHeight, 
	        width: state.width}
	      )
	    );
	  },
	
	  /**
	   * This is called when a cell that is in the header of a column has its
	   * resizer knob clicked on. It displays the resizer and puts in the correct
	   * location on the table.
	   */
	  _onColumnResize:function(
	    /*number*/ combinedWidth,
	    /*number*/ leftOffset,
	    /*number*/ cellWidth,
	    /*?number*/ cellMinWidth,
	    /*?number*/ cellMaxWidth,
	    /*number|string*/ columnKey,
	    /*object*/ event) {
	    if (Locale.isRTL()) {
	      leftOffset = -leftOffset;
	    }
	    this.setState({
	      isColumnResizing: true,
	      columnResizingData: {
	        left: leftOffset + combinedWidth - cellWidth,
	        width: cellWidth,
	        minWidth: cellMinWidth,
	        maxWidth: cellMaxWidth,
	        initialEvent: {
	          clientX: event.clientX,
	          clientY: event.clientY,
	          preventDefault: emptyFunction
	        },
	        key: columnKey
	      }
	    });
	  },
	
	  _populateColumnsAndColumnData:function(
	    /*array*/ columns,
	    /*?array*/ columnGroups
	  ) /*object*/ {
	    var columnInfo = {};
	    var bodyColumnTypes = this._splitColumnTypes(columns);
	    columnInfo.bodyFixedColumns = bodyColumnTypes.fixed;
	    columnInfo.bodyScrollableColumns = bodyColumnTypes.scrollable;
	
	    columnInfo.headData = this._getHeadData(columns);
	    var headColumnTypes = this._splitColumnTypes(
	      this._createHeadColumns(columns)
	    );
	    columnInfo.headFixedColumns = headColumnTypes.fixed;
	    columnInfo.headScrollableColumns = headColumnTypes.scrollable;
	
	    var footColumnTypes = this._splitColumnTypes(
	      this._createFootColumns(columns)
	    );
	    columnInfo.footFixedColumns = footColumnTypes.fixed;
	    columnInfo.footScrollableColumns = footColumnTypes.scrollable;
	
	    if (columnGroups) {
	      columnInfo.groupHeaderData = this._getGroupHeaderData(columnGroups);
	      columnGroups = this._createGroupHeaderColumns(columnGroups);
	      var groupHeaderColumnTypes = this._splitColumnTypes(columnGroups);
	      columnInfo.groupHeaderFixedColumns = groupHeaderColumnTypes.fixed;
	      columnInfo.groupHeaderScrollableColumns =
	        groupHeaderColumnTypes.scrollable;
	    }
	    return columnInfo;
	  },
	
	  _calculateState:function(/*object*/ props, /*?object*/ oldState) /*object*/ {
	    invariant(
	      props.height !== undefined || props.maxHeight !== undefined,
	      'You must set either a height or a maxHeight'
	    );
	
	    var firstRowIndex = (oldState && oldState.firstRowIndex) || 0;
	    var firstRowOffset = (oldState && oldState.firstRowOffset) || 0;
	    var scrollX, scrollY;
	    if (oldState && props.overflowX !== 'hidden') {
	      scrollX = oldState.scrollX;
	    } else {
	      scrollX = props.scrollLeft;
	    }
	    if (oldState && props.overflowY !== 'hidden') {
	      scrollY = oldState.scrollY;
	    } else {
	      scrollState = this._scrollHelper.scrollTo(props.scrollTop);
	      firstRowIndex = scrollState.index;
	      firstRowOffset = scrollState.offset;
	      scrollY = scrollState.position;
	    }
	
	    if (this._rowToScrollTo !== undefined) {
	      scrollState =
	        this._scrollHelper.scrollRowIntoView(this._rowToScrollTo);
	      firstRowIndex = scrollState.index;
	      firstRowOffset = scrollState.offset;
	      scrollY = scrollState.position;
	      delete this._rowToScrollTo;
	    }
	
	    if (oldState && props.rowsCount !== oldState.rowsCount) {
	      // Number of rows changed, try to scroll to the row from before the
	      // change
	      var viewportHeight = props.height -
	        props.headerHeight -
	        props.footerHeight -
	        props.groupHeaderHeight;
	      this._scrollHelper = new FixedDataTableScrollHelper(
	        props.rowsCount,
	        props.rowHeight,
	        viewportHeight,
	        props.rowHeightGetter
	      );
	      var scrollState =
	        this._scrollHelper.scrollToRow(firstRowIndex, firstRowOffset);
	      firstRowIndex = scrollState.index;
	      firstRowOffset = scrollState.offset;
	      scrollY = scrollState.position;
	    } else if (oldState && props.rowHeightGetter !== oldState.rowHeightGetter) {
	      this._scrollHelper.setRowHeightGetter(props.rowHeightGetter);
	    }
	
	    var columnResizingData;
	    if (props.isColumnResizing) {
	      columnResizingData = oldState && oldState.columnResizingData;
	    } else {
	      columnResizingData = EMPTY_OBJECT;
	    }
	
	    var children = [];
	
	    ReactChildren.forEach(props.children, function(child, index)  {
	      invariant(
	        child.type.__TableColumnGroup__ ||
	        child.type.__TableColumn__,
	        'child type should be <FixedDataTableColumn /> or ' +
	        '<FixedDataTableColumnGroup />'
	      );
	      children.push(child);
	    });
	
	    var useGroupHeader = false;
	    if (children.length && children[0].type.__TableColumnGroup__) {
	      useGroupHeader = true;
	    }
	
	    var columns;
	    var columnGroups;
	
	    if (useGroupHeader) {
	      var columnGroupSettings =
	        FixedDataTableWidthHelper.adjustColumnGroupWidths(
	          children,
	          props.width
	      );
	      columns = columnGroupSettings.columns;
	      columnGroups = columnGroupSettings.columnGroups;
	    } else {
	      columns = FixedDataTableWidthHelper.adjustColumnWidths(
	        children,
	        props.width
	      );
	    }
	
	    var columnInfo = this._populateColumnsAndColumnData(
	      columns,
	      columnGroups
	    );
	
	    if (oldState) {
	      columnInfo = this._tryReusingColumnSettings(columnInfo, oldState);
	    }
	
	    if (this._columnToScrollTo !== undefined) {
	      // If selected column is a fixed column, don't scroll
	      var fixedColumnsCount = columnInfo.bodyFixedColumns.length;
	      if (this._columnToScrollTo >= fixedColumnsCount) {
	        var totalFixedColumnsWidth = 0;
	        var i, column;
	        for (i = 0; i < columnInfo.bodyFixedColumns.length; ++i) {
	          column = columnInfo.bodyFixedColumns[i];
	          totalFixedColumnsWidth += column.props.width;
	        }
	
	        var scrollableColumnIndex = this._columnToScrollTo - fixedColumnsCount;
	        var previousColumnsWidth = 0;
	        for (i = 0; i < scrollableColumnIndex; ++i) {
	          column = columnInfo.bodyScrollableColumns[i];
	          previousColumnsWidth += column.props.width;
	        }
	
	        var availableScrollWidth = props.width - totalFixedColumnsWidth;
	        var selectedColumnWidth = columnInfo.bodyScrollableColumns[
	          this._columnToScrollTo - fixedColumnsCount
	        ].props.width;
	        var minAcceptableScrollPosition =
	          previousColumnsWidth + selectedColumnWidth - availableScrollWidth;
	
	        if (scrollX < minAcceptableScrollPosition) {
	          scrollX = minAcceptableScrollPosition;
	        }
	
	        if (scrollX > previousColumnsWidth) {
	          scrollX = previousColumnsWidth;
	        }
	      }
	      delete this._columnToScrollTo;
	    }
	
	    var useMaxHeight = props.height === undefined;
	    var height = useMaxHeight ? props.maxHeight : props.height;
	    var totalHeightReserved = props.footerHeight + props.headerHeight +
	      props.groupHeaderHeight;
	    var bodyHeight = height - totalHeightReserved;
	    var scrollContentHeight = this._scrollHelper.getContentHeight();
	    var totalHeightNeeded = scrollContentHeight + totalHeightReserved;
	    var scrollContentWidth =
	      FixedDataTableWidthHelper.getTotalWidth(columns);
	
	    var horizontalScrollbarVisible = scrollContentWidth > props.width &&
	      props.overflowX !== 'hidden';
	
	    if (horizontalScrollbarVisible) {
	      bodyHeight -= Scrollbar.SIZE;
	      totalHeightNeeded += Scrollbar.SIZE;
	      totalHeightReserved += Scrollbar.SIZE;
	    }
	
	    var maxScrollX = Math.max(0, scrollContentWidth - props.width);
	    var maxScrollY = Math.max(0, scrollContentHeight - bodyHeight);
	    scrollX = Math.min(scrollX, maxScrollX);
	    scrollY = Math.min(scrollY, maxScrollY);
	
	    if (!maxScrollY) {
	      // no vertical scrollbar necessary, use the totals we tracked so we
	      // can shrink-to-fit vertically
	      if (useMaxHeight) {
	        height = totalHeightNeeded;
	      }
	      bodyHeight = totalHeightNeeded - totalHeightReserved;
	    }
	
	    this._scrollHelper.setViewportHeight(bodyHeight);
	
	    // The order of elements in this object metters and bringing bodyHeight,
	    // height or useGroupHeader to the top can break various features
	    var newState = Object.assign({
	      isColumnResizing: oldState && oldState.isColumnResizing},
	      // isColumnResizing should be overwritten by value from props if
	      // avaialble
	
	      columnInfo,
	      props,
	
	      {columnResizingData:columnResizingData,
	      firstRowIndex:firstRowIndex,
	      firstRowOffset:firstRowOffset,
	      horizontalScrollbarVisible:horizontalScrollbarVisible,
	      maxScrollX:maxScrollX,
	      reservedHeight: totalHeightReserved,
	      scrollContentHeight:scrollContentHeight,
	      scrollX:scrollX,
	      scrollY:scrollY,
	
	      // These properties may overwrite properties defined in
	      // columnInfo and props
	      bodyHeight:bodyHeight,
	      height:height,
	      useGroupHeader:useGroupHeader
	    });
	
	    // Both `headData` and `groupHeaderData` are generated by
	    // `FixedDataTable` will be passed to each header cell to render.
	    // In order to prevent over-rendering the cells, we do not pass the
	    // new `headData` or `groupHeaderData`
	    // if they haven't changed.
	    if (oldState) {
	      if (shallowEqual(oldState.headData, newState.headData)) {
	        newState.headData = oldState.headData;
	      }
	      if (shallowEqual(oldState.groupHeaderData, newState.groupHeaderData)) {
	        newState.groupHeaderData = oldState.groupHeaderData;
	      }
	    }
	
	    return newState;
	  },
	
	  _tryReusingColumnSettings:function(
	    /*object*/ columnInfo,
	    /*object*/ oldState
	  ) /*object*/ {
	    COLUMN_SETTING_NAMES.forEach(function(settingName)  {
	      if (columnInfo[settingName].length === oldState[settingName].length) {
	        var canReuse = true;
	        for (var index = 0; index < columnInfo[settingName].length; ++index) {
	          if (!shallowEqual(
	              columnInfo[settingName][index].props,
	              oldState[settingName][index].props
	          )) {
	            canReuse = false;
	            break;
	          }
	        }
	        if (canReuse) {
	          columnInfo[settingName] = oldState[settingName];
	        }
	      }
	    });
	    return columnInfo;
	  },
	
	  _createGroupHeaderColumns:function(/*array*/ columnGroups) /*array*/  {
	    var newColumnGroups = [];
	    for (var i = 0; i < columnGroups.length; ++i) {
	      newColumnGroups[i] = cloneWithProps(
	        columnGroups[i],
	        {
	          dataKey: i,
	          children: undefined,
	        }
	      );
	    }
	    return newColumnGroups;
	  },
	
	  _createHeadColumns:function(/*array*/ columns) /*array*/ {
	    var headColumns = [];
	    for (var i = 0; i < columns.length; ++i) {
	      var columnProps = columns[i].props;
	      headColumns.push(cloneWithProps(
	        columns[i],
	        {
	          cellRenderer: columnProps.headerRenderer || renderToString,
	          columnData: columnProps.columnData,
	          dataKey: columnProps.dataKey,
	          isHeaderCell: true,
	          label: columnProps.label,
	        }
	      ));
	    }
	    return headColumns;
	  },
	
	  _createFootColumns:function(/*array*/ columns) /*array*/ {
	    var footColumns = [];
	    for (var i = 0; i < columns.length; ++i) {
	      var columnProps = columns[i].props;
	      footColumns.push(cloneWithProps(
	        columns[i],
	        {
	          cellRenderer: columnProps.footerRenderer || renderToString,
	          columnData: columnProps.columnData,
	          dataKey: columnProps.dataKey,
	          isFooterCell: true,
	        }
	      ));
	    }
	    return footColumns;
	  },
	
	  _getHeadData:function(/*array*/ columns) /*object*/ {
	    var headData = {};
	    for (var i = 0; i < columns.length; ++i) {
	      var columnProps = columns[i].props;
	      if (this.props.headerDataGetter) {
	        headData[columnProps.dataKey] =
	          this.props.headerDataGetter(columnProps.dataKey);
	      } else {
	        headData[columnProps.dataKey] = columnProps.label || '';
	      }
	    }
	    return headData;
	  },
	
	  _getGroupHeaderData:function(/*array*/ columnGroups) /*array*/ {
	    var groupHeaderData = [];
	    for (var i = 0; i < columnGroups.length; ++i) {
	      groupHeaderData[i] = columnGroups[i].props.label || '';
	    }
	    return groupHeaderData;
	  },
	
	  _splitColumnTypes:function(/*array*/ columns) /*object*/ {
	    var fixedColumns = [];
	    var scrollableColumns = [];
	    for (var i = 0; i < columns.length; ++i) {
	      if (columns[i].props.fixed) {
	        fixedColumns.push(columns[i]);
	      } else {
	        scrollableColumns.push(columns[i]);
	      }
	    }
	    return {
	      fixed: fixedColumns,
	      scrollable: scrollableColumns,
	    };
	  },
	
	  _onWheel:function(/*number*/ deltaX, /*number*/ deltaY) {
	    if (this.isMounted()) {
	      var x = this.state.scrollX;
	      if (Math.abs(deltaY) > Math.abs(deltaX) &&
	          this.props.overflowY !== 'hidden') {
	        var scrollState = this._scrollHelper.scrollBy(Math.round(deltaY));
	        this.setState({
	          firstRowIndex: scrollState.index,
	          firstRowOffset: scrollState.offset,
	          scrollY: scrollState.position,
	          scrollContentHeight: scrollState.contentHeight,
	        });
	      } else if (deltaX && this.props.overflowX !== 'hidden') {
	        x += deltaX;
	        x = x < 0 ? 0 : x;
	        x = x > this.state.maxScrollX ? this.state.maxScrollX : x;
	        this.setState({
	          scrollX: x,
	        });
	      }
	
	      this._didScrollStop();
	    }
	  },
	
	
	  _onHorizontalScroll:function(/*number*/ scrollPos) {
	    if (this.isMounted() && scrollPos !== this.state.scrollX) {
	      this.setState({
	        scrollX: scrollPos,
	      });
	      this._didScrollStop();
	    }
	  },
	
	  _onVerticalScroll:function(/*number*/ scrollPos) {
	    if (this.isMounted() && scrollPos !== this.state.scrollY) {
	      var scrollState = this._scrollHelper.scrollTo(Math.round(scrollPos));
	      this.setState({
	        firstRowIndex: scrollState.index,
	        firstRowOffset: scrollState.offset,
	        scrollY: scrollState.position,
	        scrollContentHeight: scrollState.contentHeight,
	      });
	      this._didScrollStop();
	    }
	  },
	
	  _didScrollStop:function() {
	    if (this.isMounted()) {
	      if (this.props.onScrollEnd) {
	        this.props.onScrollEnd(this.state.scrollX, this.state.scrollY);
	      }
	    }
	  }
	});
	
	var HorizontalScrollbar = React.createClass({displayName: "HorizontalScrollbar",
	  mixins: [ReactComponentWithPureRenderMixin],
	  propTypes: {
	    contentSize: PropTypes.number.isRequired,
	    offset: PropTypes.number.isRequired,
	    onScroll: PropTypes.func.isRequired,
	    position: PropTypes.number.isRequired,
	    size: PropTypes.number.isRequired,
	  },
	
	  render:function() /*object*/ {
	    var outerContainerStyle = {
	      height: Scrollbar.SIZE,
	      width: this.props.size,
	    };
	    var innerContainerStyle = {
	      height: Scrollbar.SIZE,
	      position: 'absolute',
	      width: this.props.size,
	    };
	    translateDOMPositionXY(
	      innerContainerStyle,
	      0,
	      this.props.offset
	    );
	
	    return (
	      React.createElement("div", {
	        className: cx('fixedDataTable/horizontalScrollbar'), 
	        style: outerContainerStyle}, 
	        React.createElement("div", {style: innerContainerStyle}, 
	          React.createElement(Scrollbar, React.__spread({}, 
	            this.props, 
	            {isOpaque: true, 
	            orientation: "horizontal", 
	            offset: undefined})
	          )
	        )
	      )
	    );
	  },
	});
	
	module.exports = FixedDataTable;


/***/ },
/* 119 */
/*!**************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableColumn.react.js ***!
  \**************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableColumn.react
	 * @typechecks
	 */
	
	var React = __webpack_require__(/*! ./React */ 183);
	var invariant = __webpack_require__(/*! ./invariant */ 184);
	
	var PropTypes = React.PropTypes;
	
	/**
	 * Verify that the component property `dataKey` has the right type.
	 */
	function checkDataKeyPropTypes(
	  /*object*/ props,
	  /*string*/ propName,
	  /*string*/ componentName
	) {
	  var propValue = props[propName];
	  invariant(
	    propValue !== undefined,
	    'Datakey must be specified for each column'
	  );
	
	  var propValueType = typeof propValue;
	
	  invariant(
	    propValueType === 'string' || propValueType === 'number',
	    'Provided property dataKey to be type of string or number, not %s',
	    propValueType
	  );
	}
	
	/**
	 * Component that defines the attributes of table column.
	 */
	var FixedDataTableColumn = React.createClass({displayName: "FixedDataTableColumn",
	  statics: {
	    __TableColumn__: true
	  },
	
	  propTypes: {
	    /**
	     * The horizontal alignment of the table cell content.
	     */
	    align: PropTypes.oneOf(['left', 'center', 'right']),
	
	    /**
	     * className for each of this column's data cells.
	     */
	    cellClassName: PropTypes.string,
	
	    /**
	     * The data cell renderer
	     * `function(
	     *   any_cellData,
	     *   string_cellDataKey,
	     *   object_rowData,
	     *   number_rowIndex,
	     *   any_columnData,
	     *   number_width
	     *)`
	     * that returns React-renderable content for table cell.
	     */
	    cellRenderer: PropTypes.func,
	
	    /**
	     * The getter `function(string_cellDataKey, object_rowData)` that returns
	     * the cell data for the `cellRenderer`.
	     * If not provided, the cell data will be collected from
	     * `rowData[cellDataKey]` instead. The value that `cellDataGetter` returns
	     * will be used to determine whether the cell should re-render.
	     */
	    cellDataGetter: PropTypes.func,
	
	    /**
	     * The key to retrieve the cell data from the data row. Provided key type
	     * must be either `string` or `number`. Since we use this
	     * for keys, it must be specified for each column.
	     */
	    dataKey: checkDataKeyPropTypes,
	
	    /**
	     * The header cell renderer
	     * `function(
	     *   any_cellData,
	     *   string_cellDataKey,
	     *   object_rowData,
	     *   any_columnData
	     *)`
	     * that returns React-renderable content for table column header.
	     */
	    headerRenderer: PropTypes.func,
	
	    /**
	     * The footer cell renderer
	     * `function(
	     *   any_cellData,
	     *   string_cellDataKey,
	     *   object_rowData,
	     *   any_columnData
	     *)`
	     * that returns React-renderable content for table column footer.
	     */
	    footerRenderer: PropTypes.func,
	
	    /**
	     * Bucket for any data to be passed into column renderer functions.
	     */
	    columnData: PropTypes.object,
	
	    /**
	     * The column's header label.
	     */
	    label: PropTypes.string,
	
	    /**
	     * The pixel width of the column.
	     */
	    width: PropTypes.number.isRequired,
	
	    /**
	     * If this is a resizable column this is its minimum width.
	     */
	    minWidth: PropTypes.number,
	
	    /**
	     * If this is a resizable column this is its maximum width.
	     */
	    maxWidth: PropTypes.number,
	
	    /**
	     * The grow factor relative to other columns. Same as the flex-grow API
	     * from http://www.w3.org/TR/css3-flexbox/. Basically, take any available
	     * extra width and distribute it proportionally according to all columns'
	     * flexGrow values. Defaults to zero (no-flexing).
	     */
	    flexGrow: PropTypes.number,
	
	    /**
	     * Whether the column can be resized with the
	     * FixedDataTableColumnResizeHandle. Please note that if a column
	     * has a flex grow, once you resize the column this will be set to 0.
	     */
	    isResizable: PropTypes.bool,
	  },
	
	  render:function() {
	    if (process.env.NODE_ENV !== 'production') {
	      throw new Error(
	        'Component <FixedDataTableColumn /> should never render'
	      );
	    }
	    return null;
	  },
	});
	
	module.exports = FixedDataTableColumn;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 120 */
/*!*******************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableColumnGroup.react.js ***!
  \*******************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableColumnGroup.react
	 * @typechecks
	 */
	
	var React = __webpack_require__(/*! ./React */ 183);
	
	var PropTypes = React.PropTypes;
	
	/**
	 * Component that defines the attributes of a table column group.
	 */
	var FixedDataTableColumnGroup = React.createClass({displayName: "FixedDataTableColumnGroup",
	  statics: {
	    __TableColumnGroup__: true
	  },
	
	  propTypes: {
	    /**
	     * The horizontal alignment of the table cell content.
	     */
	    align: PropTypes.oneOf(['left', 'center', 'right']),
	
	    /**
	     * Whether the column group is fixed.
	     */
	    fixed: PropTypes.bool.isRequired,
	
	    /**
	     * The function that takes a label and column group data as params and
	     * returns React-renderable content for table header. If this is not set
	     * the label will be the only thing rendered in the column group header
	     * cell.
	     */
	    groupHeaderRenderer: PropTypes.func,
	
	    /**
	     * Bucket for any data to be passed into column group renderer functions.
	     */
	    columnGroupData: PropTypes.object,
	
	    /**
	     * The column's header label.
	     */
	    label: PropTypes.string,
	  },
	
	  render:function() {
	    if (process.env.NODE_ENV !== 'production') {
	      throw new Error(
	        'Component <FixedDataTableColumnGroup /> should never render'
	      );
	    }
	    return null;
	  },
	});
	
	module.exports = FixedDataTableColumnGroup;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 121 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-controls/lib/ContextMenu.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React			= __webpack_require__(/*! react/addons */ 2);
	var PropTypes		= React.PropTypes;
	var cx				= React.addons.classSet;
	var cloneWithProps	= React.addons.cloneWithProps;
	var PopupService	= __webpack_require__(/*! react-services */ 25).PopupService;
	
	var subMenuTimeout = null;
	
	var MenuItem = React.createClass({displayName: "MenuItem",
	
		propTypes : {
			action : PropTypes.string.isRequired,
			label : PropTypes.string.isRequired
		},
	
		render:function(){
	
			var nestedMenu = this.props.submenuShowing ? 
				React.createElement(ContextMenu, {doAction: this.props.doAction}, this.props.children) :
				null;
	
			var className = cx(
				'menu-item',
				this.props.disabled ? 'disabled' : null,
				this.state.hasChildMenuItems ? 'root' : null,
				this.props.submenuShowing ? 'showing' : null
			);
	
			return (
				React.createElement("li", {className: className}, 
					React.createElement("a", {href: "#", tabIndex: "-1", 
						onClick: this.handleClick, 
						onMouseOver: this.handleMouseOver}, this.props.label), 
					nestedMenu
				)
			);
	
		},
	
		getDefaultProps:function(){
			return {
				data : null
			}
		},
	
		getInitialState:function(){
			return {
				hasChildMenuItems: this.props.children && this.props.children.length > 0
			};
		},
	
		handleClick:function(e, dispatchId){
			e.preventDefault();
			if (this.props.disabled !== true){
				this.props.doAction(this.props.action, this.props.data);
			}
		},
	
		handleMouseOver:function(){
			this.props.onMouseOver(this.props.idx, this.state.hasChildMenuItems, this.state.submenuShowing);
		}
	
	});
	
	var Separator = React.createClass({displayName: "Separator",
		render:function(){
			return React.createElement("li", {className: "divider"});
		}
	});
	
	var ContextMenu = React.createClass({displayName: "ContextMenu",
	
		propTypes: {
			doAction: PropTypes.func.isRequired
		},
	
		render:function(){
			
			var children = this.props.children;
	
			var style = {
				position : 'absolute',
				top: this.state.top,
				left: this.state.left
			};
	
			var submenuIdx = this.state.submenuShowing ? this.state.submenuIdx : -1;
	
			var menuItems = children ? children.map(function(menuItem, idx)  {return cloneWithProps(menuItem, {
				key : String(idx),
				idx:idx,
				action: menuItem.props.action,
				doAction: this.handleMenuAction,
				onMouseOver : this.handleMenuItemMouseOver,
				submenuShowing : submenuIdx === idx
	
			});}.bind(this)) : null;
	
			return React.createElement("ul", {className: "popup-menu", style: style}, menuItems);
	
		},
	
		getDefaultProps:function(){
			return {
				left: "100%",
				top: 0
			};
		},
	
		getInitialState:function(){
			return {
				left : this.props.left,
				top: this.props.top,
				submenuShowing: false,
				submenuIdx : null
			}
		},
	
		componentWillMount:function(){
			this.setState({
				submenuShowing: false,
				submenuIdx: null
			});
		},
	
		componentDidMount:function(){
			window.addEventListener('keydown',this.specialKeyHandler, true);
			// Note: the click handler fires in capture phase. This is important. We want this
			// to fire *before* a local click handler that might call popup.open on another
			// popup.
			document.addEventListener('click',this.handleClickAway, true);
	
			this.keepWithinThePage(this.state.left, this.state.top);
		},
	
		componentWillUnmount:function(){
			window.removeEventListener('keydown',this.specialKeyHandler, true);
			document.removeEventListener('click',this.handleClickAway, true);
		},
	
		componentWillReceiveProps:function(nextProps){
	
			if (nextProps.left !== '100%' && nextProps.top !== 0){
	
				if (nextProps.left !== this.state.left || nextProps.top !== this.state.top){
	
					this.setState({
						left: nextProps.left,
						top: nextProps.top,
						submenuShowing: false,
						submenuIdx: null
					});
	
					this.keepWithinThePage(nextProps.left, nextProps.top);
				}
			}
		},
	
		handleMenuAction:function(key, data){
			if (this.props.doAction){
				this.props.doAction(key, data);
			}
			else if (this.props.onAction){
				this.props.onAction(key, data);
			}
			this.close();
		},
	
		handleClickAway:function(e){
			var node = this.getDOMNode();
			if (!node.contains(e.target)){
				this.close();
			}	
		},
	
		handleMenuItemMouseOver:function(idx, hasChildMenuItems, submenuShowing){
	
			if (subMenuTimeout){
				clearTimeout(subMenuTimeout);
				subMenuTimeout = null;
			}
	
			if (hasChildMenuItems){
				if (this.state.submenuShowing !== true){
					subMenuTimeout = setTimeout(this.showSubmenu, 400);
				}
				this.setState({
					submenuIdx: idx
				});
			}
			else if (this.state.submenuIdx){
				this.setState({
					submenuIdx: null,
					submenuShowing: false
				});
			}
		},
	
		showSubmenu:function(){
			subMenuTimeout = null;
			this.setState({
				submenuShowing: true
			});
		},
	
		specialKeyHandler:function(e){
	
			if (e.keyCode === 27 /* ESC */){
				this.close();
			}
	
		},
	
		keepWithinThePage:function(menuLeft, menuTop){
	
			var $__0=     this.getDOMNode().getBoundingClientRect(),top=$__0.top,left=$__0.left,width=$__0.width,height=$__0.height;
			var w = document.body.clientWidth;
			var h = document.body.clientHeight;
	
			var left1 = menuLeft === "100%" ? left : menuLeft;
			var  top1 = menuTop === 0 ? top : menuTop;
	
			var newLeft = left1;
			var newTop = top1;
	
			if (left1 + width > w){
				newLeft = w - (width + 6);
			}
	
			if (top1 + height > h){
				newTop = h - (height + 6);
			}
	
			if (newLeft !== left1 || newTop !== top1){
	
				if (menuLeft === "100%" && menuTop === 0){
	
					this.setState({
						left: newLeft !== left1 ? (newLeft - left1) : menuLeft,
						top: newTop !== top1 ? (newTop - top1) : menuTop
					});
				}
				else {
					this.setState({left: newLeft, top: newTop});
				}
			}
	
		},
	
		close:function(){
			PopupService.hidePopup();
		}
	
	
	});
	
	module.exports = {ContextMenu:ContextMenu, MenuItem:MenuItem, Separator:Separator};

/***/ },
/* 122 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-controls/lib/SelectBox.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var React 				= __webpack_require__(/*! react/addons */ 2)
	var PropTypes			= React.PropTypes;
	var cx					= React.addons.classSet;
	var markEventAsHandled	= __webpack_require__(/*! react-utils */ 26).markEventAsHandled;
	var KeyboardHandler		= __webpack_require__(/*! react-utils */ 26).KeyboardHandler;
	var indexOf				= __webpack_require__(/*! react-utils */ 26).indexOf;
	var Popup				= __webpack_require__(/*! react-services */ 25).Popup;
	
	
	var ListItem = React.createClass({displayName: "ListItem",
	
		render:function(){
			
			var $__0=     this.props,className=$__0.className,data=$__0.data,idx=$__0.idx,onMouseDown=$__0.onMouseDown;
	
			return (
				React.createElement("li", {className: className, key: idx, "data-key": data.value, 
					onClick: this.handleClick, 
					onMouseDown: onMouseDown}, data.label)
			);
		},
	
		handleClick:function(e){
			markEventAsHandled(e);
			this.props.onClick(this.props.idx, this.props.data.value)
		}
	
	});
	
	var SelectBox = React.createClass({displayName: "SelectBox",
	
		mixins : [KeyboardHandler],
	
		propTypes : {
			onChange	: PropTypes.func.isRequired,
			componentClassName : PropTypes.string,
			optionListClassName : PropTypes.string,
			name 		: PropTypes.string, // recommended, will be returned in the onChange, with the new value(s)
			label		: PropTypes.string,
			values 		: PropTypes.array,
			multiple 	: PropTypes.bool,
			showClearButton : PropTypes.bool
		},
	
		render:function(){
	
			var $__0=    this.props,values=$__0.values,label=$__0.label,multiple=$__0.multiple;
			var included = this.state.selected.map(this.getLabel);
			var hasValue = included.length && (multiple !== true || included.length < values.length); 
	
			var showClearButton = hasValue && this.props.showClearButton !== false;
	
			var className = cx(
				this.props.componentClassName,
				this.props.className,
				this.state.open ? 'open' : null,
				multiple ? 'multi' : null,
				!hasValue ? 'empty' : null
			);
	
			console.log('render SelectBox, focusedIndex = ' + this.state.focusedIndex);
	
			var content = hasValue ? included.join(', ') : label;
			
			var labelClassName = this.props.componentClassName + '-label';
	
			return (
				React.createElement("div", {className: className, 
					"data-value": content, 
					onClick: this.handleOpen, 
					onKeyDown: this.handleKeyDown, 
					onBlur: this.handleClose, 
					tabIndex: "0"}, 
					React.createElement("div", {className: labelClassName}, content), 
					showClearButton ? React.createElement("button", {className: "SelectBox-clear", onClick: this.handleClear, tabIndex: "0"}) : null, 
					this.renderOptionMenu()
				)
	
			);
		},
	
		renderOptionMenu:function(){
			if (this.state.open){
	
				var selected = this.state.selected;
				var $__0=   this.props,multiple=$__0.multiple,closeText=$__0.closeText;
				var showCloseButton = multiple && closeText;
	
				var options = this.props.values.map(function(value, idx)  {
					var v = valueOf(value);
					var option = {label:labelFor(value), value:v, include:selected.indexOf(v) !== -1}
					var isFocused = idx === this.state.focusedIndex;
	
					var className = cx(
						'SelectBox-option',
						isFocused ? 'focused' : null,
						option.include ? 'selected' : null
					);
	
					return 	React.createElement(ListItem, {className: className, key: idx, idx: idx, data: option, onClick: this.handleChange, onMouseDown: this.handleMouseDown});
					
				}.bind(this));
	
				var className = cx("SelectBox-options",	this.props.optionListClassName, multiple ? 'multi' : null);
	
				return (
					React.createElement(Popup, {position: "below"}, 	
						React.createElement("div", {className: className}, 
							React.createElement("ul", {className: "SelectBox-options-list"}, 
								options
							), 
							showCloseButton ? React.createElement("button", {onClick: this.handleClose, className: "SelectBox-close"}, closeText) : null
						)
					)
				);
			}
			else {
				return React.createElement(Popup, {close: true});
			}
		},
	
		getDefaultProps:function(){
			return {
				componentClassName : 'SelectBox',
				values : [],
				closeText : 'Close'
	
			};
		},
	
		getInitialState:function(){
	
			var selected = Array.isArray(this.props.selected) ? this.props.selected :
						   this.props.selected !== undefined ? [this.props.selected] : [];
	
			return {
				open: false,
				focusedIndex: -1,
				pendingValue: [],
				selected:selected
			};
		},
	
		componentWillReceiveProps:function(nextProps){
	
			if (nextProps.selected !== this.state.selected){
				var selected = Array.isArray(nextProps.selected) ? nextProps.selected :
					nextProps.selected !== undefined ? [nextProps.selected] : [];
	
				this.setState({selected:selected});
			}
		},
	
		clickingOption: false,
	
		handleMouseDown:function(){
			this.clickingOption = true;
		},
	
		handleChange:function(idx, value){
			this.clickingOption = false;
			this.selectValue(idx, value);
		},
	
		selectValue:function(idx, value){
	
			if (this.props.multiple){
	
				var selected;
				if (value != null){
					selected = this.state.selected;
					var pos = selected.indexOf(value);
					if (pos !== -1){
						selected.splice(pos,1);
					}
					else {
						selected.push(value);
					}
				}
				else {
					selected = [];
				}
	
				this.props.onChange(selected, this.props.name, idx);
	
			}
			else {
				
				this.props.onChange(value, this.props.name, idx);
	
				this.handleClose();
			}
	
		},
	
		handleClear:function(e){
			markEventAsHandled(e);
			this.selectValue(null);
		},
	
		handleOpen:function(e){
			markEventAsHandled(e);
			this.setState({open:true});
		},
	
		handleClose:function(e){
			e && markEventAsHandled(e);
	
			if (!this.clickingOption){
				this.setState({open:false, focusedIndex: -1});
			}
		},
	
		moveFocus:function(move){
			var len = this.props.values.length;
			var idx = (this.state.focusedIndex + move + len) % len;
			this.setState({focusedIndex: idx});
		},
	
		handleUpKey:function(){
			this.moveFocus(-1);
		},
	
		handleDownKey:function(){
	
			if (!this.state.open){
				this.handleOpen();
			}
			this.moveFocus(1);
		},
	
		handleSpaceKey:function(){
	
			if (!this.state.open){
				this.handleOpen();
			}
			else if (this.state.focusedIndex !== -1){
				this.handleEnterKey();
			}
		},
	
		handleEnterKey:function(){
			var idx = this.state.focusedIndex; 
			if (idx !== -1){
				this.selectValue(idx, valueOf(this.props.values[idx]));
			}
		},
	
		handleEscKey:function(){
	
			if (this.state.open){
				this.handleClose();
			}
			else {
				this.handleClear();
			}
	
		},
	
		getLabel:function(value){
			var values = this.props.values;
	
			var idx = indexOf(values, function(v)  {return valueOf(v) === value;});
	
			if (idx !== -1){
				return labelFor(values[idx])
			}
	
		}
	
	});
	
	module.exports = SelectBox;
	
	function valueOf(option){
		if (option != null){
			return typeof option === 'object' ? option.value : option;
		}
	}
	
	function labelFor(option){
		if (option != null){
			return option.label || option;
		}
	}

/***/ },
/* 123 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-controls/lib/CheckBox.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React 				= __webpack_require__(/*! react/addons */ 2);
	var cx 					= React.addons.classSet;	
	var KeyboardHandler		= __webpack_require__(/*! react-utils */ 26).KeyboardHandler;
	var markEventAsHandled	= __webpack_require__(/*! react-utils */ 26).markEventAsHandled;
	
	
	var CheckBox = React.createClass({displayName: "CheckBox",
	
		propTypes : {
			name : React.PropTypes.string,
			label : React.PropTypes.string,
			onChange : React.PropTypes.func,
			defaultChecked : React.PropTypes.oneOf([true,false, 'partial']),
			checked : React.PropTypes.oneOf([true,false, 'partial']),
			allowPartial : React.PropTypes.bool
		},
	
		mixins : [KeyboardHandler],
	
		render:function(){
	
			var className = cx(
				'CheckBox',
				this.props.className,
				this.props.label ? 'label-left' : ''
			);
	
			console.log('CheckBox.render ' + this.state.checked + ' initialKeyCode ' + this.props.initialKeyCode);
	
			return (
				React.createElement("div", {className: className, "data-state": this.state.checked, tabIndex: "0", 
					onKeyDown: this.handleKeyDown, 
					onClick: this.handleChange}, 
					this.props.label ? React.createElement("span", {className: "label"}, this.props.label) : null
				)
			);
		},
	
		getInitialState:function(){
	
			var checked;
			var keyCode = this.props.initialKeyCode;
	
			var $__0=   this.props,defaultChecked=$__0.defaultChecked,chkd=$__0.checked;
	
			if (defaultChecked !== undefined){
				checked = defaultChecked;
			}
			else if (chkd !== undefined){
				checked = chkd;
			}
			else {
				checked = false;
			}
	
			if (keyCode === 32 || keyCode === 'Enter'){
				checked = flip(checked);			
			}
	
			return {checked:checked};
		},
	
		shouldComponentUpdate:function(nextProps, nextState){
			return  nextState.checked !== this.state.checked ||
					nextProps.defaultChecked !== this.props.defaultChecked || 
					nextProps.checked !== this.props.checked;
		},
	
		handleChange:function(){
			var checked = flip(this.state.checked);
			this.setState({checked:checked});
			if (this.props.onChange){
				this.props.onChange({name : this.props.name, value: checked});
			}
		},
	
		handleSpaceKey:function(e){
			markEventAsHandled(e);
			this.handleChange();
		},
	
		handleEnterKey:function(e){
			markEventAsHandled(e);
			this.handleChange();
		},
	
		getValue:function(){
			return this.state.checked;
		},
	
		focus:function(){
			this.getDOMNode().focus();
		}
	
	
	});
	
	
	CheckBox.CHECKED = 'all';
	CheckBox.UNCHECKED = 'none';
	CheckBox.PARTIAL = 'some';
	
	module.exports = CheckBox;
	
	function flip(state){
		console.log('CheckBox.flip state from ' + state + ' to ' + (state === false ? true : false));
		return state === false ? true : false;
	}

/***/ },
/* 124 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react-controls/lib/TextInput.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(/*! react/addons */ 2);
	var KeyboardHandler		= __webpack_require__(/*! react-utils */ 26).KeyboardHandler;
	
	var TextInput = React.createClass({displayName: "TextInput",
	
		render:function(){
			return React.createElement("input", React.__spread({type: "text"},  this.props))
		},
	
		getValue:function(){
			return this.getDOMNode().value;
		},
	
		focus:function(){
			console.log('TextInput.checkFocus');
			this.setTextInputFocus();
		},
	
		setTextInputFocus:function(){
	
			console.log('TextInput setTextInputFocus ' + this.props.initialKeyCode);
	
			var input = this.getDOMNode();
	
			if (!KeyboardHandler.isKeyPrintable(this.props.initialKeyCode)){
				input.focus();
				var txtLength = input.value.length;
				input.setSelectionRange(txtLength, txtLength);
			}
			else {
				input.select();
			}
		}
	
	});
	
	module.exports = TextInput;

/***/ },
/* 125 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/re-lay/lib/SelectionModel.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */
	var React = __webpack_require__(/*! react */ 27);
	var indexOf = __webpack_require__(/*! ./util/indexOf */ 15)
	
	
	var SelectionModel = {
	
		// beware this will be used anytime owner doesn't supply props.selected
		// getDefaultProps(){
		// 	return {
		// 		selected : []
		// 	};
		// },
	
		getInitialState:function(){
			return {
				selected : this.props.selected || [],
				lastTouchIdx: -1
			};
		},
	
		componentWillReceiveProps:function(nextProps){
	
			if (Array.isArray(nextProps.selected) && nextProps.selected !== this.state.selected){
				this.setState({selected: nextProps.selected});
			}
	
		},
	
		handleItemClick:function(idx, selectedItem, rangeSelect, incrementalSelection){
			
			console.log('SelectionModel.handleItemClick');
	
			var selected,
				lastTouchIdx;
	
			if (rangeSelect){
				selected = this.handleRangeSelection(idx);
				lastTouchIdx = this.state.lastTouchIdx;
			}	
			else if (incrementalSelection){
				selected = this.handleIncrementalSelection(idx);
				lastTouchIdx = idx;
			}
			else {
				selected = this.handleRegularSelection(idx);
				lastTouchIdx = idx;
			}
	
			this.setState({selected:selected, lastTouchIdx:lastTouchIdx});
	
			if (this.props.onSelectionChange){
				this.props.onSelectionChange(selected, idx, selectedItem);
			}
	
		},
	
		isSelected:function(idx){
			return this.state.selected.indexOf(idx) !== -1;
		},
	
		handleRegularSelection:function(idx){
			var pos = this.state.selected.indexOf(idx);
			if (pos === -1){
				return [idx];
			}
			else {
				return [];
			}
	
	
		},
	
		handleIncrementalSelection:function(idx){
	
			var pos = this.state.selected.indexOf(idx);
			var len = this.state.selected.length;
	
			if (pos === -1){
				if (len === 0){
					return [idx];
				}
				else {
					return insert(this.state.selected, idx);
				}
			}
			else {
				if (len === 1){
					return [];
				}
				else {
					return remove(this.state.selected, idx);
				}
			}
	
		},
	
		handleRangeSelection:function(idx){
	
		}
	
	
	};
	
	
	module.exports = SelectionModel;
	
	function insert(arr, idx){
		var ret = [];
		for (var i=0;i<arr.length;i++){
			if (idx !== null && idx < arr[i]){
				ret.push(idx); // won't this give us duplicate idx ?
				idx = null;
			}
			ret.push(arr[i])
		}
	
		if (idx !== null){
			ret.push(idx)
		}
	
		return ret;
	}
	
	function remove(arr, idx){
		var ret = [];
		for (var i=0;i<arr.length;i++){
			if (idx !== arr[i]){
				ret.push(arr[i])
			}
		}
		return ret;
	}


/***/ },
/* 126 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/escapeTextForBrowser.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextForBrowser
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ESCAPE_LOOKUP = {
	  "&": "&amp;",
	  ">": "&gt;",
	  "<": "&lt;",
	  "\"": "&quot;",
	  "'": "&#x27;"
	};
	
	var ESCAPE_REGEX = /[&><"']/g;
	
	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}
	
	module.exports = escapeTextForBrowser;


/***/ },
/* 127 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/memoizeStringOnly.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (cache.hasOwnProperty(string)) {
	      return cache[string];
	    } else {
	      return cache[string] = callback.call(this, string);
	    }
	  };
	}
	
	module.exports = memoizeStringOnly;


/***/ },
/* 128 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/traverseAllChildren.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 86);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';
	
	/**
	 * TODO: Test that:
	 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
	 * 2. it('should fail when supplied duplicate key', function() {
	 * 3. That a single child and an array with one item have the same key pattern.
	 * });
	 */
	
	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};
	
	var userProvidedKeyEscapeRegex = /[=.:]/g;
	
	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}
	
	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	var traverseAllChildrenImpl =
	  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
	    var nextName, nextIndex;
	    var subtreeCount = 0;  // Count of children found in the current subtree.
	    if (Array.isArray(children)) {
	      for (var i = 0; i < children.length; i++) {
	        var child = children[i];
	        nextName = (
	          nameSoFar +
	          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
	          getComponentKey(child, i)
	        );
	        nextIndex = indexSoFar + subtreeCount;
	        subtreeCount += traverseAllChildrenImpl(
	          child,
	          nextName,
	          nextIndex,
	          callback,
	          traverseContext
	        );
	      }
	    } else {
	      var type = typeof children;
	      var isOnlyChild = nameSoFar === '';
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows
	      var storageName =
	        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
	      if (children == null || type === 'boolean') {
	        // All of the above are perceived as null.
	        callback(traverseContext, null, storageName, indexSoFar);
	        subtreeCount = 1;
	      } else if (type === 'string' || type === 'number' ||
	                 ReactElement.isValidElement(children)) {
	        callback(traverseContext, children, storageName, indexSoFar);
	        subtreeCount = 1;
	      } else if (type === 'object') {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !children || children.nodeType !== 1,
	          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	          'elements are not valid children of React components.'
	        ) : invariant(!children || children.nodeType !== 1));
	        for (var key in children) {
	          if (children.hasOwnProperty(key)) {
	            nextName = (
	              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(key) + SUBSEPARATOR +
	              getComponentKey(children[key], 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              children[key],
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    }
	    return subtreeCount;
	  };
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 129 */
/*!******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactOwner.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
	
	"use strict";
	
	var emptyObject = __webpack_require__(/*! ./emptyObject */ 201);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	
	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      object &&
	      typeof object.attachRef === 'function' &&
	      typeof object.detachRef === 'function'
	    );
	  },
	
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.refs[ref] === component) {
	      owner.detachRef(ref);
	    }
	  },
	
	  /**
	   * A ReactComponent must mix this in to have refs.
	   *
	   * @lends {ReactOwner.prototype}
	   */
	  Mixin: {
	
	    construct: function() {
	      this.refs = emptyObject;
	    },
	
	    /**
	     * Lazily allocates the refs object and stores `component` as `ref`.
	     *
	     * @param {string} ref Reference name.
	     * @param {component} component Component to store as `ref`.
	     * @final
	     * @private
	     */
	    attachRef: function(ref, component) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        component.isOwnedBy(this),
	        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
	        ref
	      ) : invariant(component.isOwnedBy(this)));
	      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
	      refs[ref] = component;
	    },
	
	    /**
	     * Detaches a reference name.
	     *
	     * @param {string} ref Name to dereference.
	     * @final
	     * @private
	     */
	    detachRef: function(ref) {
	      delete this.refs[ref];
	    }
	
	  }
	
	};
	
	module.exports = ReactOwner;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 130 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/keyMirror.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 131 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactEmptyComponent.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
	
	"use strict";
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIdsRegistry = {};
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};
	
	/**
	 * @return {ReactComponent} component The injected empty component.
	 */
	function getEmptyComponent() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	}
	
	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIdsRegistry[id] = true;
	}
	
	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIdsRegistry[id];
	}
	
	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return nullComponentIdsRegistry[id];
	}
	
	var ReactEmptyComponent = {
	  deregisterNullComponentID: deregisterNullComponentID,
	  getEmptyComponent: getEmptyComponent,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID
	};
	
	module.exports = ReactEmptyComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 132 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactErrorUtils.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */
	
	"use strict";
	
	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};
	
	module.exports = ReactErrorUtils;


/***/ },
/* 133 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactPropTypeLocations.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
	
	"use strict";
	
	var keyMirror = __webpack_require__(/*! ./keyMirror */ 130);
	
	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});
	
	module.exports = ReactPropTypeLocations;


/***/ },
/* 134 */
/*!**********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactPropTypeLocationNames.js ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
	
	"use strict";
	
	var ReactPropTypeLocationNames = {};
	
	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 135 */
/*!*********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/instantiateReactComponent.js ***!
  \*********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactLegacyElement = __webpack_require__(/*! ./ReactLegacyElement */ 87);
	var ReactNativeComponent = __webpack_require__(/*! ./ReactNativeComponent */ 202);
	var ReactEmptyComponent = __webpack_require__(/*! ./ReactEmptyComponent */ 131);
	
	/**
	 * Given an `element` create an instance that will actually be mounted.
	 *
	 * @param {object} element
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(element, parentCompositeType) {
	  var instance;
	
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      element && (typeof element.type === 'function' ||
	                     typeof element.type === 'string'),
	      'Only functions or strings can be mounted as React components.'
	    ) : null);
	
	    // Resolve mock instances
	    if (element.type._mockedReactClassConstructor) {
	      // If this is a mocked class, we treat the legacy factory as if it was the
	      // class constructor for future proofing unit tests. Because this might
	      // be mocked as a legacy factory, we ignore any warnings triggerd by
	      // this temporary hack.
	      ReactLegacyElement._isLegacyCallWarningEnabled = false;
	      try {
	        instance = new element.type._mockedReactClassConstructor(
	          element.props
	        );
	      } finally {
	        ReactLegacyElement._isLegacyCallWarningEnabled = true;
	      }
	
	      // If the mock implementation was a legacy factory, then it returns a
	      // element. We need to turn this into a real component instance.
	      if (ReactElement.isValidElement(instance)) {
	        instance = new instance.type(instance.props);
	      }
	
	      var render = instance.render;
	      if (!render) {
	        // For auto-mocked factories, the prototype isn't shimmed and therefore
	        // there is no render function on the instance. We replace the whole
	        // component with an empty component instance instead.
	        element = ReactEmptyComponent.getEmptyComponent();
	      } else {
	        if (render._isMockFunction && !render._getMockImplementation()) {
	          // Auto-mocked components may have a prototype with a mocked render
	          // function. For those, we'll need to mock the result of the render
	          // since we consider undefined to be invalid results from render.
	          render.mockImplementation(
	            ReactEmptyComponent.getEmptyComponent
	          );
	        }
	        instance.construct(element);
	        return instance;
	      }
	    }
	  }
	
	  // Special case string values
	  if (typeof element.type === 'string') {
	    instance = ReactNativeComponent.createInstanceForTag(
	      element.type,
	      element.props,
	      parentCompositeType
	    );
	  } else {
	    // Normal case for non-mocks and non-strings
	    instance = new element.type(element.props);
	  }
	
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }
	
	  // This actually sets up the internal instance. This will become decoupled
	  // from the public instance in a future diff.
	  instance.construct(element);
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 136 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/monitorCodeUse.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule monitorCodeUse
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Provides open-source compatible instrumentation for monitoring certain API
	 * uses before we're ready to issue a warning or refactor. It accepts an event
	 * name which may only contain the characters [a-z0-9_] and an optional data
	 * object with further information.
	 */
	
	function monitorCodeUse(eventName, data) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    eventName && !/[^a-z0-9_]/.test(eventName),
	    'You must provide an eventName using only the characters [a-z0-9_]'
	  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
	}
	
	module.exports = monitorCodeUse;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 137 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/mapObject.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}
	
	module.exports = mapObject;


/***/ },
/* 138 */
/*!**********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/shouldUpdateReactComponent.js ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement && nextElement &&
	      prevElement.type === nextElement.type &&
	      prevElement.key === nextElement.key &&
	      prevElement._owner === nextElement._owner) {
	    return true;
	  }
	  return false;
	}
	
	module.exports = shouldUpdateReactComponent;


/***/ },
/* 139 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/CSSPropertyOperations.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var CSSProperty = __webpack_require__(/*! ./CSSProperty */ 203);
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var camelizeStyleName = __webpack_require__(/*! ./camelizeStyleName */ 204);
	var dangerousStyleValue = __webpack_require__(/*! ./dangerousStyleValue */ 205);
	var hyphenateStyleName = __webpack_require__(/*! ./hyphenateStyleName */ 206);
	var memoizeStringOnly = __webpack_require__(/*! ./memoizeStringOnly */ 127);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if ("production" !== process.env.NODE_ENV) {
	  var warnedStyleNames = {};
	
	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property ' + name + '. Did you mean ' +
	      camelizeStyleName(name) + '?'
	    ) : null);
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        if (styleName.indexOf('-') > -1) {
	          warnHyphenatedStyleName(styleName);
	        }
	      }
	      var styleValue = styles[styleName];
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        if (styleName.indexOf('-') > -1) {
	          warnHyphenatedStyleName(styleName);
	        }
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 140 */
/*!**********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactBrowserComponentMixin.js ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */
	
	"use strict";
	
	var ReactEmptyComponent = __webpack_require__(/*! ./ReactEmptyComponent */ 131);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isMounted(),
	      'getDOMNode(): A component must be mounted to have a DOM node.'
	    ) : invariant(this.isMounted()));
	    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
	      return null;
	    }
	    return ReactMount.getNode(this._rootNodeID);
	  }
	};
	
	module.exports = ReactBrowserComponentMixin;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 141 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/isEventSupported.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;


/***/ },
/* 142 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/BeforeInputEventPlugin.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 114);
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	var SyntheticInputEvent = __webpack_require__(/*! ./SyntheticInputEvent */ 207);
	
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !('documentMode' in document || isPresto())
	);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  }
	};
	
	// Track characters inserted via keypress and composition events.
	var fallbackChars = null;
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    var chars;
	
	    if (canUseTextInputEvent) {
	      switch (topLevelType) {
	        case topLevelTypes.topKeyPress:
	          /**
	           * If native `textInput` events are available, our goal is to make
	           * use of them. However, there is a special case: the spacebar key.
	           * In Webkit, preventing default on a spacebar `textInput` event
	           * cancels character insertion, but it *also* causes the browser
	           * to fall back to its default spacebar behavior of scrolling the
	           * page.
	           *
	           * Tracking at:
	           * https://code.google.com/p/chromium/issues/detail?id=355103
	           *
	           * To avoid this issue, use the keypress event as if no `textInput`
	           * event is available.
	           */
	          var which = nativeEvent.which;
	          if (which !== SPACEBAR_CODE) {
	            return;
	          }
	
	          hasSpaceKeypress = true;
	          chars = SPACEBAR_CHAR;
	          break;
	
	        case topLevelTypes.topTextInput:
	          // Record the characters to be added to the DOM.
	          chars = nativeEvent.data;
	
	          // If it's a spacebar character, assume that we have already handled
	          // it at the keypress level and bail immediately. Android Chrome
	          // doesn't give us keycodes, so we need to blacklist it.
	          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	            return;
	          }
	
	          // Otherwise, carry on.
	          break;
	
	        default:
	          // For other native event types, do nothing.
	          return;
	      }
	    } else {
	      switch (topLevelType) {
	        case topLevelTypes.topPaste:
	          // If a paste event occurs after a keypress, throw out the input
	          // chars. Paste events should not lead to BeforeInput events.
	          fallbackChars = null;
	          break;
	        case topLevelTypes.topKeyPress:
	          /**
	           * As of v27, Firefox may fire keypress events even when no character
	           * will be inserted. A few possibilities:
	           *
	           * - `which` is `0`. Arrow keys, Esc key, etc.
	           *
	           * - `which` is the pressed key code, but no char is available.
	           *   Ex: 'AltGr + d` in Polish. There is no modified character for
	           *   this key combination and no character is inserted into the
	           *   document, but FF fires the keypress for char code `100` anyway.
	           *   No `input` event will occur.
	           *
	           * - `which` is the pressed key code, but a command combination is
	           *   being used. Ex: `Cmd+C`. No character is inserted, and no
	           *   `input` event will occur.
	           */
	          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	            fallbackChars = String.fromCharCode(nativeEvent.which);
	          }
	          break;
	        case topLevelTypes.topCompositionEnd:
	          fallbackChars = nativeEvent.data;
	          break;
	      }
	
	      // If no changes have occurred to the fallback string, no relevant
	      // event has fired and we're done.
	      if (fallbackChars === null) {
	        return;
	      }
	
	      chars = fallbackChars;
	    }
	
	    // If no characters are being inserted, no BeforeInput event should
	    // be fired.
	    if (!chars) {
	      return;
	    }
	
	    var event = SyntheticInputEvent.getPooled(
	      eventTypes.beforeInput,
	      topLevelTargetID,
	      nativeEvent
	    );
	
	    event.data = chars;
	    fallbackChars = null;
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};
	
	module.exports = BeforeInputEventPlugin;


/***/ },
/* 143 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ChangeEventPlugin.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 113);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 114);
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 116);
	
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 141);
	var isTextInputElement = __webpack_require__(/*! ./isTextInputElement */ 208);
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    !('documentMode' in document) || document.documentMode > 8
	  );
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}
	
	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}
	
	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    !('documentMode' in document) || document.documentMode > 9
	  );
	}
	
	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );
	
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	
	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	
	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}
	
	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}
	
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}
	
	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }
	
	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;


/***/ },
/* 144 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ClientReactRootIndex.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */
	
	"use strict";
	
	var nextReactRootIndex = 0;
	
	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};
	
	module.exports = ClientReactRootIndex;


/***/ },
/* 145 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/CompositionEventPlugin.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CompositionEventPlugin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 114);
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	var ReactInputSelection = __webpack_require__(/*! ./ReactInputSelection */ 209);
	var SyntheticCompositionEvent = __webpack_require__(/*! ./SyntheticCompositionEvent */ 210);
	
	var getTextContentAccessor = __webpack_require__(/*! ./getTextContentAccessor */ 211);
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var useCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. In Korean, for example,
	// the compositionend event contains only one character regardless of
	// how many characters have been composed since compositionstart.
	// We therefore use the fallback data while still using the native
	// events as triggers.
	var useFallbackData = (
	  !useCompositionEvent ||
	  (
	    'documentMode' in document &&
	    document.documentMode > 8 &&
	    document.documentMode <= 11
	  )
	);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var currentComposition = null;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Helper class stores information about selection and document state
	 * so we can figure out what changed at a later date.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this.root = root;
	  this.startSelection = ReactInputSelection.getSelection(root);
	  this.startValue = this.getText();
	}
	
	/**
	 * Get current text of input.
	 *
	 * @return {string}
	 */
	FallbackCompositionState.prototype.getText = function() {
	  return this.root.value || this.root[getTextContentAccessor()];
	};
	
	/**
	 * Text that has changed since the start of composition.
	 *
	 * @return {string}
	 */
	FallbackCompositionState.prototype.getData = function() {
	  var endValue = this.getText();
	  var prefixLength = this.startSelection.start;
	  var suffixLength = this.startValue.length - this.startSelection.end;
	
	  return endValue.substr(
	    prefixLength,
	    endValue.length - suffixLength - prefixLength
	  );
	};
	
	/**
	 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
	 * `onCompositionEnd` events on inputs, textareas and contentEditable
	 * nodes.
	 */
	var CompositionEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    var eventType;
	    var data;
	
	    if (useCompositionEvent) {
	      eventType = getCompositionEventType(topLevelType);
	    } else if (!currentComposition) {
	      if (isFallbackStart(topLevelType, nativeEvent)) {
	        eventType = eventTypes.compositionStart;
	      }
	    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionEnd;
	    }
	
	    if (useFallbackData) {
	      // The current composition is stored statically and must not be
	      // overwritten while composition continues.
	      if (!currentComposition && eventType === eventTypes.compositionStart) {
	        currentComposition = new FallbackCompositionState(topLevelTarget);
	      } else if (eventType === eventTypes.compositionEnd) {
	        if (currentComposition) {
	          data = currentComposition.getData();
	          currentComposition = null;
	        }
	      }
	    }
	
	    if (eventType) {
	      var event = SyntheticCompositionEvent.getPooled(
	        eventType,
	        topLevelTargetID,
	        nativeEvent
	      );
	      if (data) {
	        // Inject data generated from fallback path into the synthetic event.
	        // This matches the property of native CompositionEventInterface.
	        event.data = data;
	      }
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	      return event;
	    }
	  }
	};
	
	module.exports = CompositionEventPlugin;


/***/ },
/* 146 */
/*!*******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/DefaultEventPluginOrder.js ***!
  \*******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
	
	"use strict";
	
	 var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({CompositionEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];
	
	module.exports = DefaultEventPluginOrder;


/***/ },
/* 147 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/EnterLeaveEventPlugin.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 114);
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 212);
	
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};
	
	var extractedEvents = [null, null];
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';
	
	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;
	
	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
	
	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;
	
	    return extractedEvents;
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 148 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/HTMLDOMPropertyConfig.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
	
	/*jslint bitwise: true*/
	
	"use strict";
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 109);
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}
	
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    manifest: MUST_USE_ATTRIBUTE,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	
	    /**
	     * Non-standard Properties
	     */
	    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
	    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
	    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
	    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
	    property: null // Supports OG in meta tags
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    encType: 'enctype',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 149 */
/*!************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/MobileSafariClickEventPlugin.js ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {
	
	  eventTypes: null,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }
	
	};
	
	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 150 */
/*!****************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactComponentBrowserEnvironment.js ***!
  \****************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
	
	/*jslint evil: true */
	
	"use strict";
	
	var ReactDOMIDOperations = __webpack_require__(/*! ./ReactDOMIDOperations */ 213);
	var ReactMarkupChecksum = __webpack_require__(/*! ./ReactMarkupChecksum */ 171);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 90);
	var ReactReconcileTransaction = __webpack_require__(/*! ./ReactReconcileTransaction */ 214);
	
	var getReactRootElementInContainer = __webpack_require__(/*! ./getReactRootElementInContainer */ 168);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var setInnerHTML = __webpack_require__(/*! ./setInnerHTML */ 215);
	
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	
	
	/**
	 * Abstracts away all functionality of `ReactComponent` requires knowledge of
	 * the browser context.
	 */
	var ReactComponentBrowserEnvironment = {
	  ReactReconcileTransaction: ReactReconcileTransaction,
	
	  BackendIDOperations: ReactDOMIDOperations,
	
	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  },
	
	  /**
	   * @param {string} markup Markup string to place into the DOM Element.
	   * @param {DOMElement} container DOM Element to insert markup into.
	   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
	   * container if possible.
	   */
	  mountImageIntoNode: ReactPerf.measure(
	    'ReactComponentBrowserEnvironment',
	    'mountImageIntoNode',
	    function(markup, container, shouldReuseMarkup) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        container && (
	          container.nodeType === ELEMENT_NODE_TYPE ||
	            container.nodeType === DOC_NODE_TYPE
	        ),
	        'mountComponentIntoNode(...): Target container is not valid.'
	      ) : invariant(container && (
	        container.nodeType === ELEMENT_NODE_TYPE ||
	          container.nodeType === DOC_NODE_TYPE
	      )));
	
	      if (shouldReuseMarkup) {
	        if (ReactMarkupChecksum.canReuseMarkup(
	          markup,
	          getReactRootElementInContainer(container))) {
	          return;
	        } else {
	          ("production" !== process.env.NODE_ENV ? invariant(
	            container.nodeType !== DOC_NODE_TYPE,
	            'You\'re trying to render a component to the document using ' +
	            'server rendering but the checksum was invalid. This usually ' +
	            'means you rendered a different component type or props on ' +
	            'the client from the one on the server, or your render() ' +
	            'methods are impure. React cannot handle this case due to ' +
	            'cross-browser quirks by rendering at the document root. You ' +
	            'should look for environment dependent code in your components ' +
	            'and ensure the props are the same client and server side.'
	          ) : invariant(container.nodeType !== DOC_NODE_TYPE));
	
	          if ("production" !== process.env.NODE_ENV) {
	            console.warn(
	              'React attempted to use reuse markup in a container but the ' +
	              'checksum was invalid. This generally means that you are ' +
	              'using server rendering and the markup generated on the ' +
	              'server was not what the client was expecting. React injected ' +
	              'new markup to compensate which works but you have lost many ' +
	              'of the benefits of server rendering. Instead, figure out ' +
	              'why the markup being generated is different on the client ' +
	              'or server.'
	            );
	          }
	        }
	      }
	
	      ("production" !== process.env.NODE_ENV ? invariant(
	        container.nodeType !== DOC_NODE_TYPE,
	        'You\'re trying to render a component to the document but ' +
	          'you didn\'t use server rendering. We can\'t do this ' +
	          'without using server rendering due to cross-browser quirks. ' +
	          'See renderComponentToString() for server rendering.'
	      ) : invariant(container.nodeType !== DOC_NODE_TYPE));
	
	      setInnerHTML(container, markup);
	    }
	  )
	};
	
	module.exports = ReactComponentBrowserEnvironment;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 151 */
/*!************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDefaultBatchingStrategy.js ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
	
	"use strict";
	
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	var Transaction = __webpack_require__(/*! ./Transaction */ 104);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b);
	    } else {
	      transaction.perform(callback, null, a, b);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 152 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMButton.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
	
	"use strict";
	
	var AutoFocusMixin = __webpack_require__(/*! ./AutoFocusMixin */ 216);
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 140);
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactDOM = __webpack_require__(/*! ./ReactDOM */ 83);
	
	var keyMirror = __webpack_require__(/*! ./keyMirror */ 130);
	
	// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
	var button = ReactElement.createFactory(ReactDOM.button.type);
	
	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});
	
	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMButton',
	
	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],
	
	  render: function() {
	    var props = {};
	
	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }
	
	    return button(props, this.props.children);
	  }
	
	});
	
	module.exports = ReactDOMButton;


/***/ },
/* 153 */
/*!********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMForm.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var LocalEventTrapMixin = __webpack_require__(/*! ./LocalEventTrapMixin */ 217);
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 140);
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactDOM = __webpack_require__(/*! ./ReactDOM */ 83);
	
	// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
	var form = ReactElement.createFactory(ReactDOM.form.type);
	
	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMForm',
	
	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],
	
	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },
	
	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});
	
	module.exports = ReactDOMForm;


/***/ },
/* 154 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMImg.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var LocalEventTrapMixin = __webpack_require__(/*! ./LocalEventTrapMixin */ 217);
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 140);
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactDOM = __webpack_require__(/*! ./ReactDOM */ 83);
	
	// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
	var img = ReactElement.createFactory(ReactDOM.img.type);
	
	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',
	
	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],
	
	  render: function() {
	    return img(this.props);
	  },
	
	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});
	
	module.exports = ReactDOMImg;


/***/ },
/* 155 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMInput.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
	
	"use strict";
	
	var AutoFocusMixin = __webpack_require__(/*! ./AutoFocusMixin */ 216);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 74);
	var LinkedValueUtils = __webpack_require__(/*! ./LinkedValueUtils */ 218);
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 140);
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactDOM = __webpack_require__(/*! ./ReactDOM */ 83);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
	var input = ReactElement.createFactory(ReactDOM.input.type);
	
	var instancesByReactID = {};
	
	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}
	
	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMInput',
	
	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],
	
	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },
	
	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);
	
	    props.defaultChecked = null;
	    props.defaultValue = null;
	
	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;
	
	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;
	
	    props.onChange = this._handleChange;
	
	    return input(props, this.props.children);
	  },
	
	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },
	
	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },
	
	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }
	
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },
	
	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	
	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;
	
	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }
	
	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }
	
	    return returnValue;
	  }
	
	});
	
	module.exports = ReactDOMInput;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 156 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMOption.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
	
	"use strict";
	
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 140);
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactDOM = __webpack_require__(/*! ./ReactDOM */ 83);
	
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
	var option = ReactElement.createFactory(ReactDOM.option.type);
	
	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMOption',
	
	  mixins: [ReactBrowserComponentMixin],
	
	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },
	
	  render: function() {
	    return option(this.props, this.props.children);
	  }
	
	});
	
	module.exports = ReactDOMOption;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 157 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMSelect.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
	
	"use strict";
	
	var AutoFocusMixin = __webpack_require__(/*! ./AutoFocusMixin */ 216);
	var LinkedValueUtils = __webpack_require__(/*! ./LinkedValueUtils */ 218);
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 140);
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactDOM = __webpack_require__(/*! ./ReactDOM */ 83);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	
	// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
	var select = ReactElement.createFactory(ReactDOM.select.type);
	
	function updateWithPendingValueIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.setState({value: this._pendingValue});
	    this._pendingValue = 0;
	  }
	}
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}
	
	/**
	 * If `value` is supplied, updates <option> elements on mount and update.
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {?*} propValue For uncontrolled components, null/undefined. For
	 * controlled components, a string (or with `multiple`, a list of strings).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var multiple = component.props.multiple;
	  var value = propValue != null ? propValue : component.state.value;
	  var options = component.getDOMNode().options;
	  var selectedValue, i, l;
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0, l = value.length; i < l; ++i) {
	      selectedValue['' + value[i]] = true;
	    }
	  } else {
	    selectedValue = '' + value;
	  }
	  for (i = 0, l = options.length; i < l; i++) {
	    var selected = multiple ?
	      selectedValue.hasOwnProperty(options[i].value) :
	      options[i].value === selectedValue;
	
	    if (selected !== options[i].selected) {
	      options[i].selected = selected;
	    }
	  }
	}
	
	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * string. If `multiple` is true, the prop must be an array of strings.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMSelect',
	
	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],
	
	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },
	
	  getInitialState: function() {
	    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
	  },
	
	  componentWillMount: function() {
	    this._pendingValue = null;
	  },
	
	  componentWillReceiveProps: function(nextProps) {
	    if (!this.props.multiple && nextProps.multiple) {
	      this.setState({value: [this.state.value]});
	    } else if (this.props.multiple && !nextProps.multiple) {
	      this.setState({value: this.state.value[0]});
	    }
	  },
	
	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);
	
	    props.onChange = this._handleChange;
	    props.value = null;
	
	    return select(props, this.props.children);
	  },
	
	  componentDidMount: function() {
	    updateOptions(this, LinkedValueUtils.getValue(this));
	  },
	
	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    var prevMultiple = !!prevProps.multiple;
	    var multiple = !!this.props.multiple;
	    if (value != null || prevMultiple !== multiple) {
	      updateOptions(this, value);
	    }
	  },
	
	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	
	    var selectedValue;
	    if (this.props.multiple) {
	      selectedValue = [];
	      var options = event.target.options;
	      for (var i = 0, l = options.length; i < l; i++) {
	        if (options[i].selected) {
	          selectedValue.push(options[i].value);
	        }
	      }
	    } else {
	      selectedValue = event.target.value;
	    }
	
	    this._pendingValue = selectedValue;
	    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
	    return returnValue;
	  }
	
	});
	
	module.exports = ReactDOMSelect;


/***/ },
/* 158 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMTextarea.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
	
	"use strict";
	
	var AutoFocusMixin = __webpack_require__(/*! ./AutoFocusMixin */ 216);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 74);
	var LinkedValueUtils = __webpack_require__(/*! ./LinkedValueUtils */ 218);
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 140);
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	var ReactDOM = __webpack_require__(/*! ./ReactDOM */ 83);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
	var textarea = ReactElement.createFactory(ReactDOM.textarea.type);
	
	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}
	
	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactCompositeComponent.createClass({
	  displayName: 'ReactDOMTextarea',
	
	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],
	
	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }
	
	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },
	
	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));
	
	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },
	
	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },
	
	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }
	
	});
	
	module.exports = ReactDOMTextarea;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 159 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactEventListener.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventListener = __webpack_require__(/*! ./EventListener */ 219);
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 103);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 86);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var getEventTarget = __webpack_require__(/*! ./getEventTarget */ 182);
	var getUnboundedScrollPosition = __webpack_require__(/*! ./getUnboundedScrollPosition */ 220);
	
	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);
	
	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }
	
	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },
	
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },
	
	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	    EventListener.listen(window, 'resize', callback);
	  },
	
	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;


/***/ },
/* 160 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactInjection.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
	
	"use strict";
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 109);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 113);
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 77);
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactEmptyComponent = __webpack_require__(/*! ./ReactEmptyComponent */ 131);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 115);
	var ReactNativeComponent = __webpack_require__(/*! ./ReactNativeComponent */ 202);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 90);
	var ReactRootIndex = __webpack_require__(/*! ./ReactRootIndex */ 166);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 39);
	
	var ReactInjection = {
	  Component: ReactComponent.injection,
	  CompositeComponent: ReactCompositeComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;


/***/ },
/* 161 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SelectEventPlugin.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 114);
	var ReactInputSelection = __webpack_require__(/*! ./ReactInputSelection */ 209);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 116);
	
	var getActiveElement = __webpack_require__(/*! ./getActiveElement */ 221);
	var isTextInputElement = __webpack_require__(/*! ./isTextInputElement */ 208);
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	var shallowEqual = __webpack_require__(/*! ./shallowEqual */ 98);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};
	
	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement != getActiveElement()) {
	    return;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;


/***/ },
/* 162 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ServerReactRootIndex.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */
	
	"use strict";
	
	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
	
	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};
	
	module.exports = ServerReactRootIndex;


/***/ },
/* 163 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SimpleEventPlugin.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 112);
	var EventPluginUtils = __webpack_require__(/*! ./EventPluginUtils */ 75);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 114);
	var SyntheticClipboardEvent = __webpack_require__(/*! ./SyntheticClipboardEvent */ 222);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 116);
	var SyntheticFocusEvent = __webpack_require__(/*! ./SyntheticFocusEvent */ 223);
	var SyntheticKeyboardEvent = __webpack_require__(/*! ./SyntheticKeyboardEvent */ 224);
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 212);
	var SyntheticDragEvent = __webpack_require__(/*! ./SyntheticDragEvent */ 225);
	var SyntheticTouchEvent = __webpack_require__(/*! ./SyntheticTouchEvent */ 226);
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 227);
	var SyntheticWheelEvent = __webpack_require__(/*! ./SyntheticWheelEvent */ 228);
	
	var getEventCharCode = __webpack_require__(/*! ./getEventCharCode */ 229);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var keyOf = __webpack_require__(/*! ./keyOf */ 108);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};
	
	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};
	
	for (var topLevelType in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);
	
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);
	
	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 164 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SVGDOMPropertyConfig.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
	
	/*jslint bitwise: true*/
	
	"use strict";
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 109);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	
	var SVGDOMPropertyConfig = {
	  Properties: {
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};
	
	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 165 */
/*!*******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/createFullPageComponent.js ***!
  \*******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */
	
	"use strict";
	
	// Defeat circular references by requiring this directly.
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 78);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 81);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);
	
	  var FullPageComponent = ReactCompositeComponent.createClass({
	    displayName: 'ReactFullPageComponent' + tag,
	
	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },
	
	    render: function() {
	      return elementFactory(this.props);
	    }
	  });
	
	  return FullPageComponent;
	}
	
	module.exports = createFullPageComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 166 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactRootIndex.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */
	
	"use strict";
	
	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};
	
	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};
	
	module.exports = ReactRootIndex;


/***/ },
/* 167 */
/*!********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/containsNode.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */
	
	var isTextNode = __webpack_require__(/*! ./isTextNode */ 230);
	
	/*jslint bitwise:true */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;


/***/ },
/* 168 */
/*!**************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getReactRootElementInContainer.js ***!
  \**************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */
	
	"use strict";
	
	var DOC_NODE_TYPE = 9;
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	module.exports = getReactRootElementInContainer;


/***/ },
/* 169 */
/*!**********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactMultiChildUpdateTypes.js ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
	
	"use strict";
	
	var keyMirror = __webpack_require__(/*! ./keyMirror */ 130);
	
	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});
	
	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 170 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/flattenChildren.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
	
	"use strict";
	
	var ReactTextComponent = __webpack_require__(/*! ./ReactTextComponent */ 93);
	
	var traverseAllChildren = __webpack_require__(/*! ./traverseAllChildren */ 128);
	var warning = __webpack_require__(/*! ./warning */ 106);
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  ("production" !== process.env.NODE_ENV ? warning(
	    keyUnique,
	    'flattenChildren(...): Encountered two children with the same key, ' +
	    '`%s`. Child keys must be unique; when two children share a key, only ' +
	    'the first child will be used.',
	    name
	  ) : null);
	  if (keyUnique && child != null) {
	    var type = typeof child;
	    var normalizedValue;
	
	    if (type === 'string') {
	      normalizedValue = ReactTextComponent(child);
	    } else if (type === 'number') {
	      normalizedValue = ReactTextComponent('' + child);
	    } else {
	      normalizedValue = child;
	    }
	
	    result[name] = normalizedValue;
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}
	
	module.exports = flattenChildren;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 171 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactMarkupChecksum.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
	
	"use strict";
	
	var adler32 = __webpack_require__(/*! ./adler32 */ 231);
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;


/***/ },
/* 172 */
/*!***************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactServerRenderingTransaction.js ***!
  \***************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 103);
	var CallbackQueue = __webpack_require__(/*! ./CallbackQueue */ 102);
	var ReactPutListenerQueue = __webpack_require__(/*! ./ReactPutListenerQueue */ 232);
	var Transaction = __webpack_require__(/*! ./Transaction */ 104);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	
	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },
	
	  close: emptyFunction
	};
	
	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },
	
	  close: emptyFunction
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },
	
	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	
	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};
	
	
	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 173 */
/*!***************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/CSSCore.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */
	
	var CSSCore = {
	
	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.addClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));
	
	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));
	
	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className
	          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
	          .replace(/\s+/g, ' ') // multiple spaces to one
	          .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },
	
	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSS.hasClass takes only a single class name.'
	    ) : invariant(!/\s/.test(className)));
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }
	
	};
	
	module.exports = CSSCore;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 174 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactTransitionEvents.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },
	
	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};
	
	var endEvents = [];
	
	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }
	
	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }
	
	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}
	
	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.
	
	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}
	
	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}
	
	var ReactTransitionEvents = {
	  addEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },
	
	  removeEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};
	
	module.exports = ReactTransitionEvents;


/***/ },
/* 175 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/joinClasses.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}
	
	module.exports = joinClasses;


/***/ },
/* 176 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/performance.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}
	
	module.exports = performance || {};


/***/ },
/* 177 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/EventPluginRegistry.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 178 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/accumulateInto.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);
	
	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }
	
	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }
	
	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 179 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/forEachAccumulated.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
	
	"use strict";
	
	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};
	
	module.exports = forEachAccumulated;


/***/ },
/* 180 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactEventEmitterMixin.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
	
	"use strict";
	
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 113);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );
	
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;


/***/ },
/* 181 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ViewportMetrics.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
	
	"use strict";
	
	var getUnboundedScrollPosition = __webpack_require__(/*! ./getUnboundedScrollPosition */ 220);
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function() {
	    var scrollPosition = getUnboundedScrollPosition(window);
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;


/***/ },
/* 182 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getEventTarget.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;


/***/ },
/* 183 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/React.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	module.exports = __webpack_require__(/*! react */ 27);


/***/ },
/* 184 */
/*!*********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/invariant.js ***!
  \*********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
	
	"use strict";
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 185 */
/*!********************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableHelper.js ***!
  \********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableHelper
	 * @typechecks
	 */
	
	"use strict";
	
	var Locale = __webpack_require__(/*! ./Locale */ 186);
	var React = __webpack_require__(/*! ./React */ 183);
	var FixedDataTableColumnGroup = __webpack_require__(/*! ./FixedDataTableColumnGroup.react */ 120);
	var FixedDataTableColumn = __webpack_require__(/*! ./FixedDataTableColumn.react */ 119);
	
	var DIR_SIGN = (Locale.isRTL() ? -1 : +1);
	// A cell up to 5px outside of the visible area will still be considered visible
	var CELL_VISIBILITY_TOLERANCE = 5; // used for flyouts
	
	function renderToString(value) /*string*/ {
	  if (value === null || value === undefined) {
	    return '';
	  } else {
	    return String(value);
	  }
	}
	
	/**
	 * Helper method to execute a callback against all columns given the children
	 * of a table.
	 * @param {object|array} children
	 *    Children of a table.
	 * @param {function} callback
	 *    Function to excecute for each column. It is passed the column.
	 */
	function forEachColumn(children, callback) {
	  React.Children.forEach(children, function(child)  {
	    if (child.type === FixedDataTableColumnGroup.type) {
	      forEachColumn(child.props.children, callback);
	    } else if (child.type === FixedDataTableColumn.type) {
	      callback(child);
	    }
	  });
	}
	
	var FixedDataTableHelper = {
	  DIR_SIGN:DIR_SIGN,
	  CELL_VISIBILITY_TOLERANCE:CELL_VISIBILITY_TOLERANCE,
	  renderToString:renderToString,
	  forEachColumn:forEachColumn,
	};
	
	module.exports = FixedDataTableHelper;


/***/ },
/* 186 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/Locale.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Locale
	 */
	
	"use strict";
	
	// Hard code this for now.
	var Locale = {
	  isRTL: function()  {return false;},
	  getDirection: function()  {return 'LTR';}
	};
	
	module.exports = Locale;


/***/ },
/* 187 */
/*!*********************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/ReactComponentWithPureRenderMixin.js ***!
  \*********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentWithPureRenderMixin
	 */
	
	module.exports = __webpack_require__(/*! react/lib/ReactComponentWithPureRenderMixin */ 36);


/***/ },
/* 188 */
/*!*****************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/ReactWheelHandler.js ***!
  \*****************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWheelHandler
	 * @typechecks
	 */
	
	var normalizeWheel = __webpack_require__(/*! ./normalizeWheel */ 233);
	var requestAnimationFramePolyfill = __webpack_require__(/*! ./requestAnimationFramePolyfill */ 234);
	
	
	  /**
	   * onWheel is the callback that will be called with right frame rate if
	   * any wheel events happened
	   * onWheel should is to be called with two arguments: deltaX and deltaY in
	   * this order
	   */
	  function ReactWheelHandler(
	onWheel,
	    /*boolean*/ handleScrollX,
	    /*boolean*/ handleScrollY,
	    /*?boolean*/ stopPropagation)
	   {"use strict";
	    this.$ReactWheelHandler_animationFrameID = null;
	    this.$ReactWheelHandler_deltaX = 0;
	    this.$ReactWheelHandler_deltaY = 0;
	    this.$ReactWheelHandler_didWheel = this.$ReactWheelHandler_didWheel.bind(this);
	    this.$ReactWheelHandler_handleScrollX = handleScrollX;
	    this.$ReactWheelHandler_handleScrollY = handleScrollY;
	    this.$ReactWheelHandler_stopPropagation = !!stopPropagation;
	    this.$ReactWheelHandler_onWheelCallback = onWheel;
	    this.onWheel = this.onWheel.bind(this);
	  }
	
	  ReactWheelHandler.prototype.onWheel=function(event) {"use strict";
	    if (this.$ReactWheelHandler_handleScrollX || this.$ReactWheelHandler_handleScrollY) {
	      event.preventDefault();
	    }
	    var normalizedEvent = normalizeWheel(event);
	
	    this.$ReactWheelHandler_deltaX += this.$ReactWheelHandler_handleScrollX ? normalizedEvent.pixelX : 0;
	    this.$ReactWheelHandler_deltaY += this.$ReactWheelHandler_handleScrollY ? normalizedEvent.pixelY : 0;
	
	    var changed;
	    if (this.$ReactWheelHandler_deltaX !== 0 || this.$ReactWheelHandler_deltaY !== 0) {
	      if (this.$ReactWheelHandler_stopPropagation) {
	        event.stopPropagation();
	      }
	      changed = true;
	    }
	
	    if (changed === true && this.$ReactWheelHandler_animationFrameID === null) {
	      this.$ReactWheelHandler_animationFrameID = requestAnimationFramePolyfill(this.$ReactWheelHandler_didWheel);
	    }
	  };
	
	  ReactWheelHandler.prototype.$ReactWheelHandler_didWheel=function() {"use strict";
	    this.$ReactWheelHandler_animationFrameID = null;
	    this.$ReactWheelHandler_onWheelCallback(this.$ReactWheelHandler_deltaX, this.$ReactWheelHandler_deltaY);
	    this.$ReactWheelHandler_deltaX = 0;
	    this.$ReactWheelHandler_deltaY = 0;
	  };
	
	
	module.exports = ReactWheelHandler;


/***/ },
/* 189 */
/*!***************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/Scrollbar.react.js ***!
  \***************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Scrollbar.react
	 * @typechecks
	 */
	
	var DOMMouseMoveTracker = __webpack_require__(/*! ./DOMMouseMoveTracker */ 235);
	var Keys = __webpack_require__(/*! ./Keys */ 236);
	var React = __webpack_require__(/*! ./React */ 183);
	var ReactComponentWithPureRenderMixin = __webpack_require__(/*! ./ReactComponentWithPureRenderMixin */ 187);
	var ReactWheelHandler = __webpack_require__(/*! ./ReactWheelHandler */ 188);
	
	var cssVar = __webpack_require__(/*! ./cssVar */ 237);
	var cx = __webpack_require__(/*! ./cx */ 196);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 198);
	var translateDOMPositionXY = __webpack_require__(/*! ./translateDOMPositionXY */ 200);
	
	var PropTypes = React.PropTypes;
	
	var UNSCROLLABLE_STATE = {
	  position: 0,
	  scrollable: false,
	};
	
	var FACE_MARGIN = parseInt(cssVar('scrollbar-face-margin'), 10);
	var FACE_MARGIN_2 = FACE_MARGIN * 2;
	var FACE_SIZE_MIN = 30;
	var KEYBOARD_SCROLL_AMOUNT = 40;
	
	var _lastScrolledScrollbar = null;
	
	var Scrollbar = React.createClass({displayName: "Scrollbar",
	  mixins: [ReactComponentWithPureRenderMixin],
	
	  propTypes: {
	    contentSize: PropTypes.number.isRequired,
	    defaultPosition: PropTypes.number,
	    isOpaque: PropTypes.bool,
	    orientation: PropTypes.oneOf(['vertical', 'horizontal']),
	    onScroll: PropTypes.func,
	    position: PropTypes.number,
	    size: PropTypes.number.isRequired,
	    trackColor: PropTypes.oneOf(['gray']),
	    zIndex: PropTypes.number,
	  },
	
	  getInitialState:function() /*object*/ {
	    var props = this.props;
	    return this._calculateState(
	      props.position || props.defaultPosition || 0,
	      props.size,
	      props.contentSize,
	      props.orientation
	    );
	  },
	
	  componentWillReceiveProps:function(/*object*/ nextProps) {
	    var controlledPosition = nextProps.position;
	    if (controlledPosition === undefined) {
	      this._setNextState(
	        this._calculateState(
	          this.state.position,
	          nextProps.size,
	          nextProps.contentSize,
	          nextProps.orientation
	        )
	      );
	    } else {
	      this._setNextState(
	        this._calculateState(
	          controlledPosition,
	          nextProps.size,
	          nextProps.contentSize,
	          nextProps.orientation
	        ),
	        nextProps
	      );
	    }
	  },
	
	  getDefaultProps:function() /*object*/ {
	    return {
	      defaultPosition: 0,
	      isOpaque: false,
	      onScroll: emptyFunction,
	      orientation: 'vertical',
	      zIndex: 99,
	    };
	  },
	
	  render:function() /*?object*/ {
	    if (!this.state.scrollable) {
	      return null;
	    }
	
	    var size = this.props.size;
	    var mainStyle;
	    var faceStyle;
	    var isHorizontal = this.state.isHorizontal;
	    var isVertical = !isHorizontal;
	    var isActive = this.state.focused || this.state.isDragging;
	    var faceSize = this.state.faceSize;
	    var isOpaque = this.props.isOpaque;
	
	    var mainClassName = cx({
	      'public/Scrollbar/main': true,
	      'public/Scrollbar/mainHorizontal': isHorizontal,
	      'public/Scrollbar/mainVertical': isVertical,
	      'Scrollbar/mainActive': isActive,
	      'Scrollbar/mainOpaque': isOpaque,
	    });
	
	    var faceClassName = cx({
	      'Scrollbar/face': true,
	      'Scrollbar/faceHorizontal': isHorizontal,
	      'Scrollbar/faceVertical': isVertical,
	      'Scrollbar/faceActive': isActive,
	    });
	
	    var position = this.state.position * this.state.scale + FACE_MARGIN;
	
	    if (isHorizontal) {
	      mainStyle = {
	        width: size,
	      };
	      faceStyle = {
	        width: faceSize - FACE_MARGIN_2
	      };
	      translateDOMPositionXY(faceStyle, position, 0);
	    } else {
	      mainStyle = {
	        height: size,
	      };
	      faceStyle = {
	        height: faceSize - FACE_MARGIN_2,
	      };
	      translateDOMPositionXY(faceStyle, 0, position);
	    }
	
	    mainStyle.zIndex = this.props.zIndex;
	
	    if (this.props.trackColor === 'gray') {
	      mainStyle.backgroundColor = cssVar('ads-cf-bg-color-gray');
	    }
	
	    return (
	      React.createElement("div", {
	        onFocus: this._onFocus, 
	        onBlur: this._onBlur, 
	        onKeyDown: this._onKeyDown, 
	        onMouseDown: this._onMouseDown, 
	        onWheel: this._wheelHandler.onWheel, 
	        className: mainClassName, 
	        style: mainStyle, 
	        tabIndex: 0}, 
	        React.createElement("div", {
	          ref: "face", 
	          className: faceClassName, 
	          style: faceStyle}
	        )
	      )
	    );
	  },
	
	  componentWillMount:function() {
	    var isHorizontal = this.props.orientation === 'horizontal';
	    var onWheel = isHorizontal ? this._onWheelX : this._onWheelY;
	
	    this._wheelHandler = new ReactWheelHandler(
	      onWheel,
	      isHorizontal, // Should hanlde horizontal scroll
	      !isHorizontal // Should handle vertical scroll
	    );
	  },
	
	  componentDidMount:function() {
	    this._mouseMoveTracker = new DOMMouseMoveTracker(
	      this._onMouseMove,
	      this._onMouseMoveEnd,
	      document.documentElement
	    );
	
	    if (this.props.position !== undefined &&
	      this.state.position !== this.props.position) {
	      this._didScroll();
	    }
	  },
	
	  componentWillUnmount:function() {
	    this._nextState = null;
	    this._mouseMoveTracker.releaseMouseMoves();
	    if (_lastScrolledScrollbar === this) {
	      _lastScrolledScrollbar = null;
	    }
	    delete this._mouseMoveTracker;
	  },
	
	  scrollBy:function(/*number*/ delta) {
	    this._onWheel(delta);
	  },
	
	  _calculateState:function(
	    /*?number*/ position,
	    /*number*/ size,
	    /*number*/ contentSize,
	    /*string*/ orientation
	    ) /*object*/ {
	
	    if (size < 1 || contentSize <= size) {
	      return UNSCROLLABLE_STATE;
	    }
	
	    position = position || 0;
	
	    // There are two types of positions here.
	    // 1) Phisical position: changed by mouse / keyboard
	    // 2) Logical position: changed by props.
	    // The logical position will be kept as as internal state and the `render()`
	    // function will translate it into physical position to render.
	
	    var isHorizontal = orientation === 'horizontal';
	    var scale = size / contentSize;
	    var faceSize = Math.round(size * scale);
	
	    if (faceSize < FACE_SIZE_MIN) {
	      scale = (size - FACE_SIZE_MIN) / (contentSize - FACE_SIZE_MIN);
	      faceSize = FACE_SIZE_MIN;
	    }
	
	    var scrollable = true;
	    var maxPosition = contentSize - size;
	
	    if (position < 0) {
	      position = 0;
	    } else if (position > maxPosition) {
	      position = maxPosition;
	    }
	
	    var isDragging = this._mouseMoveTracker ?
	      this._mouseMoveTracker.isDragging() :
	      false;
	
	    position = Math.round(position);
	    faceSize = Math.round(faceSize);
	
	    // This function should only return flat values that can be compared quiclky
	    // by `ReactComponentWithPureRenderMixin`.
	    return {
	      faceSize:faceSize,
	      isDragging:isDragging,
	      isHorizontal:isHorizontal,
	      position:position,
	      scale:scale,
	      scrollable:scrollable,
	    };
	  },
	
	  _onWheelY:function(/*number*/ deltaX, /*number*/ deltaY) {
	    this._onWheel(deltaY);
	  },
	
	  _onWheelX:function(/*number*/ deltaX, /*number*/ deltaY) {
	    this._onWheel(deltaX);
	  },
	
	  _onWheel:function(/*number*/ delta){
	    var props = this.props;
	
	    // The mouse may move faster then the animation frame does.
	    // Use `requestAnimationFrame` to avoid over-updating.
	    this._setNextState(
	      this._calculateState(
	        this.state.position + delta,
	        props.size,
	        props.contentSize,
	        props.orientation
	      )
	    );
	  },
	
	  _onMouseDown:function(/*object*/ event) {
	    var nextState;
	
	    if (event.target !== this.refs.face.getDOMNode()) {
	      // Both `offsetX` and `layerX` are non-standard DOM property but they are
	      // magically available for browsers somehow.
	      var nativeEvent = event.nativeEvent;
	      var position = this.state.isHorizontal ?
	        nativeEvent.offsetX || nativeEvent.layerX :
	        nativeEvent.offsetY || nativeEvent.layerY;
	
	      // MouseDown on the scroll-track directly, move the center of the
	      // scroll-face to the mouse position.
	      var props = this.props;
	      position = position / this.state.scale;
	      nextState = this._calculateState(
	        position - (this.state.faceSize * 0.5 / this.state.scale),
	        props.size,
	        props.contentSize,
	        props.orientation
	      );
	    } else {
	      nextState = {};
	    }
	
	    nextState.focused = true;
	    this._setNextState(nextState);
	
	    this._mouseMoveTracker.captureMouseMoves(event);
	    // Focus the node so it may receive keyboard event.
	    this.getDOMNode().focus();
	  },
	
	  _onMouseMove:function(/*number*/ deltaX, /*number*/ deltaY) {
	    var props = this.props;
	    var delta = this.state.isHorizontal ? deltaX : deltaY;
	    delta = delta / this.state.scale;
	
	    this._setNextState(
	      this._calculateState(
	        this.state.position + delta,
	        props.size,
	        props.contentSize,
	        props.orientation
	      )
	    );
	  },
	
	  _onMouseMoveEnd:function() {
	    this._nextState = null;
	    this._mouseMoveTracker.releaseMouseMoves();
	    this.setState({isDragging: false});
	  },
	
	  _onKeyDown:function(/*object*/ event) {
	    var keyCode = event.keyCode;
	
	    if (keyCode === Keys.TAB) {
	      // Let focus move off the scrollbar.
	      return;
	    }
	
	    var distance = KEYBOARD_SCROLL_AMOUNT;
	    var direction = 0;
	
	    if (this.state.isHorizontal) {
	      switch (keyCode) {
	        case Keys.HOME:
	          direction = -1;
	          distance = this.props.contentSize;
	          break;
	
	        case Keys.LEFT:
	          direction = -1;
	          break;
	
	        case Keys.RIGHT:
	          direction = 1;
	          break;
	
	        default:
	          return;
	      }
	    }
	
	    if (!this.state.isHorizontal) {
	      switch (keyCode) {
	        case Keys.SPACE:
	          if (event.shiftKey) {
	            direction = -1;
	          } else {
	            direction = 1;
	          }
	          break;
	
	        case Keys.HOME:
	          direction = -1;
	          distance = this.props.contentSize;
	          break;
	
	        case Keys.UP:
	          direction = -1;
	          break;
	
	        case Keys.DOWN:
	          direction = 1;
	          break;
	
	        case Keys.PAGE_UP:
	          direction = -1;
	          distance = this.props.size;
	          break;
	
	        case Keys.PAGE_DOWN:
	          direction = 1;
	          distance = this.props.size;
	          break;
	
	        default:
	          return;
	      }
	    }
	
	    event.preventDefault();
	
	    var props = this.props;
	    this._setNextState(
	      this._calculateState(
	        this.state.position + (distance * direction),
	        props.size,
	        props.contentSize,
	        props.orientation
	      )
	    );
	  },
	
	  _onFocus:function() {
	    this.setState({
	      focused: true,
	    });
	  },
	
	  _onBlur:function() {
	    this.setState({
	      focused: false,
	    });
	  },
	
	  _blur:function() {
	    if (this.isMounted()) {
	      try {
	        this._onBlur();
	        this.getDOMNode().blur();
	      } catch (oops) {
	        // pass
	      }
	    }
	  },
	
	  _setNextState:function(/*object*/ nextState, /*?object*/ props) {
	    props = props || this.props;
	    var controlledPosition = props.position;
	    var willScroll = this.state.position !== nextState.position;
	    if (controlledPosition === undefined) {
	      var callback = willScroll ? this._didScroll : undefined;
	      this.setState(nextState, callback);
	    } else if (controlledPosition === nextState.position) {
	      this.setState(nextState);
	    } else {
	      // Scrolling is controlled. Don't update the state and let the owner
	      // to update the scrollbar instead.
	      if (nextState.position !== undefined &&
	        nextState.position !== this.state.position) {
	        this.props.onScroll(nextState.position);
	      }
	      return;
	    }
	
	    if (willScroll && _lastScrolledScrollbar !== this) {
	      _lastScrolledScrollbar && _lastScrolledScrollbar._blur();
	      _lastScrolledScrollbar = this;
	    }
	  },
	
	  _didScroll:function() {
	    this.props.onScroll(this.state.position);
	  },
	});
	
	Scrollbar.KEYBOARD_SCROLL_AMOUNT = KEYBOARD_SCROLL_AMOUNT;
	Scrollbar.SIZE = parseInt(cssVar('scrollbar-size'), 10);
	
	module.exports = Scrollbar;


/***/ },
/* 190 */
/*!********************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableBufferedRows.react.js ***!
  \********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableBufferedRows.react
	 * @typechecks
	 */
	
	var React = __webpack_require__(/*! ./React */ 183);
	var FixedDataTableRowBuffer = __webpack_require__(/*! ./FixedDataTableRowBuffer */ 238);
	var FixedDataTableRow = __webpack_require__(/*! ./FixedDataTableRow.react */ 192);
	
	var cx = __webpack_require__(/*! ./cx */ 196);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 198);
	var joinClasses = __webpack_require__(/*! ./joinClasses */ 239);
	
	var PropTypes = React.PropTypes;
	
	var FixedDataTableBufferedRows = React.createClass({displayName: "FixedDataTableBufferedRows",
	
	  propTypes: {
	    defaultRowHeight: PropTypes.number.isRequired,
	    firstRowIndex: PropTypes.number.isRequired,
	    firstRowOffset: PropTypes.number.isRequired,
	    fixedColumns: PropTypes.array.isRequired,
	    height: PropTypes.number.isRequired,
	    offsetTop: PropTypes.number.isRequired,
	    onRowClick: PropTypes.func,
	    onRowMouseDown: PropTypes.func,
	    onRowMouseEnter: PropTypes.func,
	    rowClassNameGetter: PropTypes.func,
	    rowsCount: PropTypes.number.isRequired,
	    rowGetter: PropTypes.func.isRequired,
	    rowHeightGetter: PropTypes.func,
	    scrollLeft: PropTypes.number.isRequired,
	    scrollableColumns: PropTypes.array.isRequired,
	    showLastRowBorder: PropTypes.bool,
	    width: PropTypes.number.isRequired,
	  },
	
	  getInitialState:function() /*object*/ {
	    this._rowBuffer =
	      new FixedDataTableRowBuffer(
	        this.props.rowsCount,
	        this.props.defaultRowHeight,
	        this.props.height,
	        this._getRowHeight
	      );
	    return ({
	      rowsToRender: this._rowBuffer.getRows(
	        this.props.firstRowIndex,
	        this.props.firstRowOffset
	      ),
	    });
	  },
	
	  componentWillMount:function() {
	    this._staticRowArray = [];
	    this._bufferUpdateTimer = setTimeout(this._updateBuffer, 500);
	  },
	
	  componentWillReceiveProps:function(/*object*/ nextProps) {
	    if (nextProps.rowsCount !== this.props.rowsCount ||
	        nextProps.defaultRowHeight !== this.props.defaultRowHeight ||
	        nextProps.height !== this.props.height) {
	      this._rowBuffer =
	        new FixedDataTableRowBuffer(
	          nextProps.rowsCount,
	          nextProps.defaultRowHeight,
	          nextProps.height,
	          this._getRowHeight
	        );
	    }
	    this.setState({
	      rowsToRender: this._rowBuffer.getRows(
	        nextProps.firstRowIndex,
	        nextProps.firstRowOffset
	      ),
	    });
	    if (this._bufferUpdateTimer) {
	      clearTimeout(this._bufferUpdateTimer);
	    }
	    this._bufferUpdateTimer = setTimeout(this._updateBuffer, 400);
	  },
	
	  _updateBuffer:function() {
	    this._bufferUpdateTimer = null;
	    if (this.isMounted()) {
	      this.setState({
	        rowsToRender: this._rowBuffer.getRowsWithUpdatedBuffer(),
	      });
	    }
	  },
	
	  shouldComponentUpdate:function() /*boolean*/ {
	    // Don't add PureRenderMixin to this component please.
	    return true;
	  },
	
	  componentWillUnmount:function() {
	    this._staticRowArray.length = 0;
	  },
	
	  render:function() /*object*/ {
	    var props = this.props;
	    var offsetTop = props.offsetTop;
	    var rowClassNameGetter = props.rowClassNameGetter || emptyFunction;
	    var rowGetter = props.rowGetter;
	
	    var rowsToRender = this.state.rowsToRender;
	    this._staticRowArray.length = rowsToRender.length;
	
	    for (var i = 0; i < rowsToRender.length; ++i) {
	      var rowInfo = rowsToRender[i];
	      var rowIndex = rowInfo.rowIndex;
	      var rowOffsetTop = rowInfo.offsetTop;
	      var currentRowHeight = this._getRowHeight(rowIndex);
	
	      var hasBottomBorder =
	        rowIndex === props.rowsCount - 1 && props.showLastRowBorder;
	
	      this._staticRowArray[i] =
	        React.createElement(FixedDataTableRow, {
	          key: i, 
	          index: rowIndex, 
	          data: rowGetter(rowIndex), 
	          width: props.width, 
	          height: currentRowHeight, 
	          scrollLeft: Math.round(props.scrollLeft), 
	          offsetTop: Math.round(offsetTop + rowOffsetTop), 
	          fixedColumns: props.fixedColumns, 
	          scrollableColumns: props.scrollableColumns, 
	          onClick: props.onRowClick, 
	          onMouseDown: props.onRowMouseDown, 
	          onMouseEnter: props.onRowMouseEnter, 
	          className: joinClasses(
	            rowClassNameGetter(rowIndex),
	            cx('public/fixedDataTable/bodyRow'),
	            hasBottomBorder ? cx('fixedDataTable/hasBottomBorder') : null
	          )}
	        );
	    }
	
	    return React.createElement("div", null, this._staticRowArray);
	  },
	
	  _getRowHeight:function(/*number*/ index) /*number*/ {
	    return this.props.rowHeightGetter ?
	      this.props.rowHeightGetter(index) :
	      this.props.defaultRowHeight;
	  },
	});
	
	module.exports = FixedDataTableBufferedRows;


/***/ },
/* 191 */
/*!**************************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableColumnResizeHandle.react.js ***!
  \**************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * This is to be used with the FixedDataTable. It is a read line
	 * that when you click on a column that is resizable appears and allows
	 * you to resize the corresponding column.
	 *
	 * @providesModule FixedDataTableColumnResizeHandle.react
	 * @typechecks
	 */
	
	var DOMMouseMoveTracker = __webpack_require__(/*! ./DOMMouseMoveTracker */ 235);
	var Locale = __webpack_require__(/*! ./Locale */ 186);
	var React = __webpack_require__(/*! ./React */ 183);
	var ReactComponentWithPureRenderMixin = __webpack_require__(/*! ./ReactComponentWithPureRenderMixin */ 187);
	
	var clamp = __webpack_require__(/*! ./clamp */ 240);
	var cx = __webpack_require__(/*! ./cx */ 196);
	
	var PropTypes = React.PropTypes;
	
	var FixedDataTableColumnResizeHandle = React.createClass({displayName: "FixedDataTableColumnResizeHandle",
	  mixins: [ReactComponentWithPureRenderMixin],
	
	  propTypes: {
	    visible: PropTypes.bool.isRequired,
	
	    /**
	     * This is the height of the line
	     */
	    height: PropTypes.number.isRequired,
	
	    /**
	     * Offset from left border of the table, please note
	     * that the line is a border on diff. So this is really the
	     * offset of the column itself.
	     */
	    leftOffset: PropTypes.number.isRequired,
	
	    /**
	     * Height of the clickable region of the line.
	     * This is assumed to be at the top of the line.
	     */
	    knobHeight: PropTypes.number.isRequired,
	
	    /**
	     * The line is a border on a diff, so this is essentially
	     * the width of column.
	     */
	    initialWidth: PropTypes.number,
	
	    /**
	     * The minimum width this dragger will collapse to
	     */
	    minWidth: PropTypes.number,
	
	    /**
	     * The maximum width this dragger will collapse to
	     */
	    maxWidth: PropTypes.number,
	
	    /**
	     * Initial click event on the header cell.
	     */
	    initialEvent: PropTypes.object,
	
	    /**
	     * When resizing is complete this is called.
	     */
	    onColumnResizeEnd: PropTypes.func,
	
	    /**
	     * Column key for the column being resized.
	     */
	    columnKey: PropTypes.oneOfType([
	      PropTypes.string,
	      PropTypes.number
	    ]),
	  },
	
	  getInitialState:function() /*object*/ {
	    return {
	      width: 0,
	      cursorDelta: 0
	    };
	  },
	
	  componentWillReceiveProps:function(/*object*/ newProps) {
	    if (newProps.initialEvent && !this._mouseMoveTracker.isDragging()) {
	      this._mouseMoveTracker.captureMouseMoves(newProps.initialEvent);
	      this.setState({
	        width: newProps.initialWidth,
	        cursorDelta: newProps.initialWidth
	      });
	    }
	  },
	
	  componentWillMount:function() {
	    this._mouseMoveTracker = new DOMMouseMoveTracker(
	      this._onMove,
	      this._onColumnResizeEnd,
	      document.body
	    );
	  },
	
	  componentWillUnmount:function() {
	    this._mouseMoveTracker.releaseMouseMoves();
	    this._mouseMoveTracker = null;
	  },
	
	  render:function() /*object*/ {
	    var style = {
	      width: this.state.width,
	      height: this.props.height,
	    };
	    if (Locale.isRTL()) {
	      style.right = this.props.leftOffset;
	    } else {
	      style.left = this.props.leftOffset;
	    }
	    return (
	      React.createElement("div", {
	        className: cx({
	          'fixedDataTableColumnResizerLine/main': true,
	          'fixedDataTableColumnResizerLine/hiddenElem': !this.props.visible
	        }), 
	        style: style}, 
	        React.createElement("div", {
	          className: cx('fixedDataTableColumnResizerLine/mouseArea'), 
	          style: {height: this.props.height}}
	        )
	      )
	    );
	  },
	
	  _onMove:function(/*number*/ deltaX) {
	    if (Locale.isRTL()) {
	      deltaX = -deltaX;
	    }
	    var newWidth = this.state.cursorDelta + deltaX;
	    var newColumnWidth =
	      clamp(this.props.minWidth, newWidth, this.props.maxWidth);
	
	    // Please note cursor delta is the different between the currently width
	    // and the new width.
	    this.setState({
	      width: newColumnWidth,
	      cursorDelta: newWidth
	    });
	  },
	
	  _onColumnResizeEnd:function() {
	    this._mouseMoveTracker.releaseMouseMoves();
	    this.props.onColumnResizeEnd(
	      this.state.width,
	      this.props.columnKey
	    );
	  },
	});
	
	module.exports = FixedDataTableColumnResizeHandle;


/***/ },
/* 192 */
/*!***********************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableRow.react.js ***!
  \***********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableRow.react
	 * @typechecks
	 */
	
	"use strict";
	
	var FixedDataTableHelper = __webpack_require__(/*! ./FixedDataTableHelper */ 185);
	var React = __webpack_require__(/*! ./React */ 183);
	var ReactComponentWithPureRenderMixin = __webpack_require__(/*! ./ReactComponentWithPureRenderMixin */ 187);
	var FixedDataTableCellGroup = __webpack_require__(/*! ./FixedDataTableCellGroup.react */ 241);
	
	var cx = __webpack_require__(/*! ./cx */ 196);
	var joinClasses = __webpack_require__(/*! ./joinClasses */ 239);
	var translateDOMPositionXY = __webpack_require__(/*! ./translateDOMPositionXY */ 200);
	
	var DIR_SIGN = FixedDataTableHelper.DIR_SIGN;
	var PropTypes = React.PropTypes;
	
	/**
	 * Component that renders the row for <FixedDataTable />.
	 * This component should not be used directly by developer. Instead,
	 * only <FixedDataTable /> should use the component internally.
	 */
	var FixedDataTableRowImpl = React.createClass({displayName: "FixedDataTableRowImpl",
	  mixins: [ReactComponentWithPureRenderMixin],
	
	  propTypes: {
	    /**
	     * The row data to render. The data format can be a simple Map object
	     * or an Array of data.
	     */
	    data: PropTypes.oneOfType([
	      PropTypes.object,
	      PropTypes.array
	    ]),
	
	    /**
	     * Array of <FixedDataTableColumn /> for the fixed columns.
	     */
	    fixedColumns: PropTypes.array.isRequired,
	
	    /**
	     * Height of the row.
	     */
	    height: PropTypes.number.isRequired,
	
	    /**
	     * The row index.
	     */
	    index: PropTypes.number.isRequired,
	
	    /**
	     * Array of <FixedDataTableColumn /> for the scrollable columns.
	     */
	    scrollableColumns: PropTypes.array.isRequired,
	
	    /**
	     * The distance between the left edge of the table and the leftmost portion
	     * of the row currently visible in the table.
	     */
	    scrollLeft: PropTypes.number.isRequired,
	
	    /**
	     * Width of the row.
	     */
	    width: PropTypes.number.isRequired,
	
	    /**
	     * Fire when a row is clicked.
	     */
	    onClick: PropTypes.func,
	
	    /**
	     * Callback for when resizer knob (in FixedDataTableCell) is clicked
	     * to initialize resizing. Please note this is only on the cells
	     * in the header.
	     * @param number combinedWidth
	     * @param number leftOffset
	     * @param number cellWidth
	     * @param number|string columnKey
	     * @param object event
	     */
	    onColumnResize: PropTypes.func,
	  },
	
	  render:function() /*object*/ {
	    var style = {
	      width: this.props.width,
	      height: this.props.height,
	    };
	
	    var className = cx({
	      'public/fixedDataTableRow/main': true,
	      'public/fixedDataTableRow/highlighted': (this.props.index % 2 === 1)
	    });
	
	    if (!this.props.data) {
	      return (
	        React.createElement("div", {
	          className: joinClasses(className, this.props.className), 
	          style: style}
	        )
	      );
	    }
	
	    var fixedColumns =
	      React.createElement(FixedDataTableCellGroup, {
	        key: "fixed_cells", 
	        height: this.props.height, 
	        left: 0, 
	        zIndex: 2, 
	        columns: this.props.fixedColumns, 
	        data: this.props.data, 
	        onColumnResize: this.props.onColumnResize, 
	        rowHeight: this.props.height, 
	        rowIndex: this.props.index}
	      );
	    var fixedColumnsWidth = this._getColumnsWidth(this.props.fixedColumns);
	    var columnsShadow = this._renderColumnsShadow(fixedColumnsWidth);
	    var scrollableColumns =
	      React.createElement(FixedDataTableCellGroup, {
	        key: "scrollable_cells", 
	        height: this.props.height, 
	        left: (fixedColumnsWidth - this.props.scrollLeft) * DIR_SIGN, 
	        zIndex: 0, 
	        columns: this.props.scrollableColumns, 
	        data: this.props.data, 
	        onColumnResize: this.props.onColumnResize, 
	        rowHeight: this.props.height, 
	        rowIndex: this.props.index}
	      );
	
	    return (
	      React.createElement("div", {
	        className: joinClasses(className, this.props.className), 
	        onClick: this.props.onClick ? this._onClick : null, 
	        onMouseDown: this.props.onMouseDown ? this._onMouseDown : null, 
	        onMouseEnter: this.props.onMouseEnter ? this._onMouseEnter : null, 
	        style: style}, 
	        React.createElement("div", {className: cx('fixedDataTableRow/body')}, 
	          fixedColumns, 
	          scrollableColumns, 
	          columnsShadow
	        )
	      )
	    );
	  },
	
	  _getColumnsWidth:function(/*array*/ columns) /*number*/ {
	    var width = 0;
	    for (var i = 0; i < columns.length; ++i) {
	      width += columns[i].props.width;
	    }
	    return width;
	  },
	
	  _renderColumnsShadow:function(/*number*/ left) /*?object*/ {
	    if (left > 0) {
	      var className = cx({
	        'fixedDataTableRow/fixedColumnsDivider': true,
	        'fixedDataTableRow/columnsShadow': this.props.scrollLeft > 0,
	      });
	      var style = {
	        left: left,
	        height: this.props.height
	      };
	      return React.createElement("div", {className: className, style: style});
	    }
	  },
	
	  _onClick:function(/*object*/ event) {
	    this.props.onClick(event, this.props.index, this.props.data);
	  },
	
	  _onMouseDown:function(/*object*/ event) {
	    this.props.onMouseDown(event, this.props.index, this.props.data);
	  },
	
	  _onMouseEnter:function(/*object*/ event) {
	    this.props.onMouseEnter(event, this.props.index, this.props.data);
	  },
	});
	
	var FixedDataTableRow = React.createClass({displayName: "FixedDataTableRow",
	  mixins: [ReactComponentWithPureRenderMixin],
	
	  propTypes: {
	    /**
	     * Height of the row.
	     */
	    height: PropTypes.number.isRequired,
	
	    /**
	     * Z-index on which the row will be displayed. Used e.g. for keeping
	     * header and footer in front of other rows.
	     */
	    zIndex: PropTypes.number,
	
	    /**
	     * The vertical position where the row should render itself
	     */
	    offsetTop: PropTypes.number.isRequired,
	
	    /**
	     * Width of the row.
	     */
	    width: PropTypes.number.isRequired,
	  },
	
	  render:function() /*object*/ {
	    var style = {
	      width: this.props.width,
	      height: this.props.height,
	      zIndex: (this.props.zIndex ? this.props.zIndex : 0),
	    };
	    translateDOMPositionXY(style, 0, this.props.offsetTop);
	
	    return (
	      React.createElement("div", {
	        style: style, 
	        className: cx('fixedDataTableRow/rowWrapper')}, 
	        React.createElement(FixedDataTableRowImpl, React.__spread({}, 
	          this.props, 
	          {offsetTop: undefined, 
	          zIndex: undefined})
	        )
	      )
	    );
	  },
	});
	
	
	module.exports = FixedDataTableRow;


/***/ },
/* 193 */
/*!**************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableScrollHelper.js ***!
  \**************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableScrollHelper
	 * @typechecks
	 */
	'use strict';
	
	var PrefixIntervalTree = __webpack_require__(/*! ./PrefixIntervalTree */ 242);
	var clamp = __webpack_require__(/*! ./clamp */ 240);
	
	var BUFFER_ROWS = 5;
	
	
	  function FixedDataTableScrollHelper(
	rowCount,
	    /*number*/ defaultRowHeight,
	    /*number*/ viewportHeight,
	    /*?function*/ rowHeightGetter)
	   {
	    this.$FixedDataTableScrollHelper_rowOffsets = new PrefixIntervalTree(rowCount, defaultRowHeight);
	    this.$FixedDataTableScrollHelper_storedHeights = new Array(rowCount);
	    for (var i = 0; i < rowCount; ++i) {
	      this.$FixedDataTableScrollHelper_storedHeights[i] = defaultRowHeight;
	    }
	    this.$FixedDataTableScrollHelper_rowCount = rowCount;
	    this.$FixedDataTableScrollHelper_position = 0;
	    this.$FixedDataTableScrollHelper_contentHeight = rowCount * defaultRowHeight;
	    this.$FixedDataTableScrollHelper_defaultRowHeight = defaultRowHeight;
	    this.$FixedDataTableScrollHelper_rowHeightGetter = rowHeightGetter ?
	      rowHeightGetter :
	      function()  {return defaultRowHeight;};
	    this.$FixedDataTableScrollHelper_viewportHeight = viewportHeight;
	    this.scrollRowIntoView = this.scrollRowIntoView.bind(this);
	    this.setViewportHeight = this.setViewportHeight.bind(this);
	    this.scrollBy = this.scrollBy.bind(this);
	    this.scrollTo = this.scrollTo.bind(this);
	    this.scrollToRow = this.scrollToRow.bind(this);
	    this.setRowHeightGetter = this.setRowHeightGetter.bind(this);
	    this.getContentHeight = this.getContentHeight.bind(this);
	
	    this.$FixedDataTableScrollHelper_updateHeightsInViewport(0, 0);
	  }
	
	  FixedDataTableScrollHelper.prototype.setRowHeightGetter=function(rowHeightGetter) {
	    this.$FixedDataTableScrollHelper_rowHeightGetter = rowHeightGetter;
	  };
	
	  FixedDataTableScrollHelper.prototype.setViewportHeight=function(viewportHeight) {
	    this.$FixedDataTableScrollHelper_viewportHeight = viewportHeight;
	  };
	
	  FixedDataTableScrollHelper.prototype.getContentHeight=function()  {
	    return this.$FixedDataTableScrollHelper_contentHeight;
	  };
	
	  FixedDataTableScrollHelper.prototype.$FixedDataTableScrollHelper_updateHeightsInViewport=function(
	firstRowIndex,
	    /*number*/ firstRowOffset)
	   {
	    var top = firstRowOffset;
	    var index = firstRowIndex;
	    while (top <= this.$FixedDataTableScrollHelper_viewportHeight && index < this.$FixedDataTableScrollHelper_rowCount) {
	      this.$FixedDataTableScrollHelper_updateRowHeight(index);
	      top += this.$FixedDataTableScrollHelper_storedHeights[index];
	      index++;
	    }
	  };
	
	  FixedDataTableScrollHelper.prototype.$FixedDataTableScrollHelper_updateHeightsAboveViewport=function(firstRowIndex) {
	    var index = firstRowIndex - 1;
	    while (index >= 0 && index >= firstRowIndex - BUFFER_ROWS) {
	      var delta = this.$FixedDataTableScrollHelper_updateRowHeight(index);
	      this.$FixedDataTableScrollHelper_position += delta;
	      index--;
	    }
	  };
	
	  FixedDataTableScrollHelper.prototype.$FixedDataTableScrollHelper_updateRowHeight=function(rowIndex)  {
	    if (rowIndex < 0 || rowIndex >= this.$FixedDataTableScrollHelper_rowCount) {
	      return 0;
	    }
	    var newHeight = this.$FixedDataTableScrollHelper_rowHeightGetter(rowIndex);
	    if (newHeight !== this.$FixedDataTableScrollHelper_storedHeights[rowIndex]) {
	      var change = newHeight - this.$FixedDataTableScrollHelper_storedHeights[rowIndex];
	      this.$FixedDataTableScrollHelper_rowOffsets.set(rowIndex, newHeight);
	      this.$FixedDataTableScrollHelper_storedHeights[rowIndex] = newHeight;
	      this.$FixedDataTableScrollHelper_contentHeight += change;
	      return change;
	    }
	    return 0;
	  };
	
	  FixedDataTableScrollHelper.prototype.scrollBy=function(delta)  {
	    var firstRow = this.$FixedDataTableScrollHelper_rowOffsets.upperBound(this.$FixedDataTableScrollHelper_position);
	    var firstRowPosition =
	      firstRow.value - this.$FixedDataTableScrollHelper_storedHeights[firstRow.index];
	    var rowIndex = firstRow.index;
	    var position = this.$FixedDataTableScrollHelper_position;
	
	    var rowHeightChange = this.$FixedDataTableScrollHelper_updateRowHeight(rowIndex);
	    if (firstRowPosition !== 0) {
	      position += rowHeightChange;
	    }
	    var visibleRowHeight = this.$FixedDataTableScrollHelper_storedHeights[rowIndex] -
	      (position - firstRowPosition);
	
	    if (delta >= 0) {
	
	      while (delta > 0 && rowIndex < this.$FixedDataTableScrollHelper_rowCount) {
	        if (delta < visibleRowHeight) {
	          position += delta;
	          delta = 0;
	        } else {
	          delta -= visibleRowHeight;
	          position += visibleRowHeight;
	          rowIndex++;
	        }
	        if (rowIndex < this.$FixedDataTableScrollHelper_rowCount) {
	          this.$FixedDataTableScrollHelper_updateRowHeight(rowIndex);
	          visibleRowHeight = this.$FixedDataTableScrollHelper_storedHeights[rowIndex];
	        }
	      }
	    } else if (delta < 0) {
	      delta = -delta;
	      var invisibleRowHeight = this.$FixedDataTableScrollHelper_storedHeights[rowIndex] - visibleRowHeight;
	
	      while (delta > 0 && rowIndex >= 0) {
	        if (delta < invisibleRowHeight) {
	          position -= delta;
	          delta = 0;
	        } else {
	          position -= invisibleRowHeight;
	          delta -= invisibleRowHeight;
	          rowIndex--;
	        }
	        if (rowIndex >= 0) {
	          var change = this.$FixedDataTableScrollHelper_updateRowHeight(rowIndex);
	          invisibleRowHeight = this.$FixedDataTableScrollHelper_storedHeights[rowIndex];
	          position += change;
	        }
	      }
	    }
	
	    var maxPosition = this.$FixedDataTableScrollHelper_contentHeight - this.$FixedDataTableScrollHelper_viewportHeight;
	    position = clamp(0, position, maxPosition);
	    this.$FixedDataTableScrollHelper_position = position;
	    var firstVisibleRow = this.$FixedDataTableScrollHelper_rowOffsets.upperBound(position);
	    var firstRowIndex = firstVisibleRow.index;
	    firstRowPosition =
	      firstVisibleRow.value - this.$FixedDataTableScrollHelper_rowHeightGetter(firstRowIndex);
	    var firstRowOffset = firstRowPosition - position;
	
	    this.$FixedDataTableScrollHelper_updateHeightsInViewport(firstRowIndex, firstRowOffset);
	    this.$FixedDataTableScrollHelper_updateHeightsAboveViewport(firstRowIndex);
	
	    return {
	      index: firstRowIndex,
	      offset: firstRowOffset,
	      position: this.$FixedDataTableScrollHelper_position,
	      contentHeight: this.$FixedDataTableScrollHelper_contentHeight,
	    };
	  };
	
	  FixedDataTableScrollHelper.prototype.$FixedDataTableScrollHelper_getRowAtEndPosition=function(rowIndex)  {
	    // We need to update enough rows above the selected one to be sure that when
	    // we scroll to selected position all rows between first shown and selected
	    // one have most recent heights computed and will not resize
	    this.$FixedDataTableScrollHelper_updateRowHeight(rowIndex);
	    var currentRowIndex = rowIndex;
	    var top = this.$FixedDataTableScrollHelper_storedHeights[currentRowIndex];
	    while (top < this.$FixedDataTableScrollHelper_viewportHeight && currentRowIndex >= 0) {
	      currentRowIndex--;
	      if (currentRowIndex >= 0) {
	        this.$FixedDataTableScrollHelper_updateRowHeight(currentRowIndex);
	        top += this.$FixedDataTableScrollHelper_storedHeights[currentRowIndex];
	      }
	    }
	    var position = this.$FixedDataTableScrollHelper_rowOffsets.get(rowIndex).value - this.$FixedDataTableScrollHelper_viewportHeight;
	    if (position < 0) {
	      position = 0;
	    }
	    return position;
	  };
	
	  FixedDataTableScrollHelper.prototype.scrollTo=function(position)  {
	    if (position <= 0) {
	      // If position less than or equal to 0 first row should be fully visible
	      // on top
	      this.$FixedDataTableScrollHelper_position = 0;
	      this.$FixedDataTableScrollHelper_updateHeightsInViewport(0, 0);
	
	      return {
	        index: 0,
	        offset: 0,
	        position: this.$FixedDataTableScrollHelper_position,
	        contentHeight: this.$FixedDataTableScrollHelper_contentHeight,
	      };
	    } else if (position >= this.$FixedDataTableScrollHelper_contentHeight - this.$FixedDataTableScrollHelper_viewportHeight) {
	      // If position is equal to or greater than max scroll value, we need
	      // to make sure to have bottom border of last row visible.
	      var rowIndex = this.$FixedDataTableScrollHelper_rowCount - 1;
	      position = this.$FixedDataTableScrollHelper_getRowAtEndPosition(rowIndex);
	    }
	    this.$FixedDataTableScrollHelper_position = position;
	
	    var firstVisibleRow = this.$FixedDataTableScrollHelper_rowOffsets.upperBound(position);
	    var firstRowIndex = Math.max(firstVisibleRow.index, 0);
	    var firstRowPosition =
	      firstVisibleRow.value - this.$FixedDataTableScrollHelper_rowHeightGetter(firstRowIndex);
	    var firstRowOffset = firstRowPosition - position;
	
	    this.$FixedDataTableScrollHelper_updateHeightsInViewport(firstRowIndex, firstRowOffset);
	    this.$FixedDataTableScrollHelper_updateHeightsAboveViewport(firstRowIndex);
	
	    return {
	      index: firstRowIndex,
	      offset: firstRowOffset,
	      position: this.$FixedDataTableScrollHelper_position,
	      contentHeight: this.$FixedDataTableScrollHelper_contentHeight,
	    };
	  };
	
	  /**
	   * Allows to scroll to selected row with specified offset. It always
	   * brings that row to top of viewport with that offset
	   */
	  FixedDataTableScrollHelper.prototype.scrollToRow=function(rowIndex, /*number*/ offset)  {
	    rowIndex = clamp(0, rowIndex, this.$FixedDataTableScrollHelper_rowCount - 1);
	    offset = clamp(-this.$FixedDataTableScrollHelper_storedHeights[rowIndex], offset, 0);
	    var firstRow = this.$FixedDataTableScrollHelper_rowOffsets.get(rowIndex);
	    return this.scrollTo(
	      firstRow.value - this.$FixedDataTableScrollHelper_storedHeights[rowIndex] - offset
	    );
	  };
	
	  /**
	   * Allows to scroll to selected row by bringing it to viewport with minimal
	   * scrolling. This that if row is fully visible, scroll will not be changed.
	   * If top border of row is above top of viewport it will be scrolled to be
	   * fully visible on the top of viewport. If the bottom border of row is
	   * below end of viewport, it will be scrolled up to be fully visible on the
	   * bottom of viewport.
	   */
	  FixedDataTableScrollHelper.prototype.scrollRowIntoView=function(rowIndex)  {
	    rowIndex = clamp(0, rowIndex, this.$FixedDataTableScrollHelper_rowCount - 1);
	    var rowEnd = this.$FixedDataTableScrollHelper_rowOffsets.get(rowIndex).value;
	    var rowBegin = rowEnd - this.$FixedDataTableScrollHelper_storedHeights[rowIndex];
	    if (rowBegin < this.$FixedDataTableScrollHelper_position) {
	      return this.scrollTo(rowBegin);
	    } else if (rowEnd > this.$FixedDataTableScrollHelper_position + this.$FixedDataTableScrollHelper_viewportHeight) {
	      var position = this.$FixedDataTableScrollHelper_getRowAtEndPosition(rowIndex);
	      return this.scrollTo(position);
	    }
	    return this.scrollTo(this.$FixedDataTableScrollHelper_position);
	  };
	
	
	module.exports = FixedDataTableScrollHelper;


/***/ },
/* 194 */
/*!*************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableWidthHelper.js ***!
  \*************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableWidthHelper
	 * @typechecks
	 */
	'use strict';
	
	var React = __webpack_require__(/*! ./React */ 183);
	
	var cloneWithProps = __webpack_require__(/*! ./cloneWithProps */ 195);
	
	function getTotalWidth(/*array*/ columns) /*number*/ {
	  var totalWidth = 0;
	  for (var i = 0; i < columns.length; ++i) {
	    totalWidth += columns[i].props.width;
	  }
	  return totalWidth;
	}
	
	function getTotalFlexGrow(/*array*/ columns) /*number*/ {
	  var totalFlexGrow = 0;
	  for (var i = 0; i < columns.length; ++i) {
	    totalFlexGrow += columns[i].props.flexGrow || 0;
	  }
	  return totalFlexGrow;
	}
	
	function distributeFlexWidth(
	  /*array*/ columns,
	  /*number*/ flexWidth
	) /*object*/ {
	  if (flexWidth <= 0) {
	    return {
	      columns: columns,
	      width: getTotalWidth(columns),
	    };
	  }
	  var columnsFlexGrow = getTotalFlexGrow(columns);
	  var flexGrowUnit = flexWidth / columnsFlexGrow;
	  var newColumns = [];
	  var totalWidth = 0;
	  for (var i = 0; i < columns.length; ++i) {
	    var column = columns[i];
	    if (!column.props.flexGrow) {
	      totalWidth += column.props.width;
	      newColumns.push(column);
	      continue;
	    }
	    var newColumnWidth =
	      Math.floor(column.props.width + column.props.flexGrow * flexGrowUnit);
	    totalWidth += newColumnWidth;
	
	    newColumns.push(cloneWithProps(
	      column,
	      {width: newColumnWidth}
	    ));
	  }
	
	  return {
	    columns: newColumns,
	    width: totalWidth,
	  };
	}
	
	function adjustColumnGroupWidths(
	  /*array*/ columnGroups,
	  /*number*/ expectedWidth
	) /*object*/ {
	  var allColumns = [];
	  var i;
	  for (i = 0; i < columnGroups.length; ++i) {
	    React.Children.forEach(
	      columnGroups[i].props.children,
	      function(column)  {allColumns.push(column);}
	    );
	  }
	  var columnsWidth = getTotalWidth(allColumns);
	  var totalFlexGrow = getTotalFlexGrow(allColumns);
	  var totalFlexWidth = Math.max(expectedWidth - columnsWidth, 0);
	  var flexGrowUnit = totalFlexWidth / totalFlexGrow;
	
	  var newAllColumns = [];
	  var newColumnGroups = [];
	
	  for (i = 0; i < columnGroups.length; ++i) {
	    var columnGroup = columnGroups[i];
	    var currentColumns = [];
	
	    React.Children.forEach(
	      columnGroup.props.children,
	      function(column)  {currentColumns.push(column);}
	    );
	
	    var columnGroupFlexGrow = getTotalFlexGrow(currentColumns);
	    var columnGroupFlexWidth = Math.floor(columnGroupFlexGrow * flexGrowUnit);
	    var newColumnSettings = distributeFlexWidth(
	      currentColumns,
	      columnGroupFlexWidth
	    );
	
	    for (var j = 0; j < newColumnSettings.columns.length; ++j) {
	      newAllColumns.push(newColumnSettings.columns[j]);
	    }
	
	    newColumnGroups.push(cloneWithProps(
	      columnGroup,
	      {width: newColumnSettings.width}
	    ));
	  }
	
	  return {
	    columns: newAllColumns,
	    columnGroups: newColumnGroups,
	  };
	}
	
	function adjustColumnWidths(
	  /*array*/ columns,
	  /*number*/ expectedWidth
	) /*array*/ {
	  var columnsWidth = getTotalWidth(columns);
	  if (columnsWidth < expectedWidth) {
	    return distributeFlexWidth(columns, expectedWidth - columnsWidth).columns;
	  }
	  return columns;
	}
	
	var FixedDataTableWidthHelper = {
	  getTotalWidth:getTotalWidth,
	  getTotalFlexGrow:getTotalFlexGrow,
	  distributeFlexWidth:distributeFlexWidth,
	  adjustColumnWidths:adjustColumnWidths,
	  adjustColumnGroupWidths:adjustColumnGroupWidths,
	};
	
	module.exports = FixedDataTableWidthHelper;


/***/ },
/* 195 */
/*!**************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/cloneWithProps.js ***!
  \**************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cloneWithProps
	 */
	
	module.exports = __webpack_require__(/*! react/lib/cloneWithProps */ 41);


/***/ },
/* 196 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/cx.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cx
	 */
	
	var slashReplaceRegex = /\//g;
	var cache = {};
	
	function getClassName(className) {
	  if (cache[className]) {
	    return cache[className];
	  }
	
	  cache[className] = className.replace(slashReplaceRegex, '_');
	  return cache[className];
	}
	
	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */
	function cx(classNames) {
	  var classNamesArray;
	  if (typeof classNames == 'object') {
	    classNamesArray = Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    });
	  } else {
	    classNamesArray = Array.prototype.slice.call(arguments);
	  }
	
	  return classNamesArray.map(getClassName).join(' ');
	}
	
	module.exports = cx;


/***/ },
/* 197 */
/*!************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/debounceCore.js ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule debounceCore
	 * @typechecks
	 */
	
	/**
	 * Invokes the given callback after a specified number of milliseconds have
	 * elapsed, ignoring subsequent calls.
	 *
	 * For example, if you wanted to update a preview after the user stops typing
	 * you could do the following:
	 *
	 *   elem.addEventListener('keyup', debounce(this.updatePreview, 250), false);
	 *
	 * The returned function has a reset method which can be called to cancel a
	 * pending invocation.
	 *
	 *   var debouncedUpdatePreview = debounce(this.updatePreview, 250);
	 *   elem.addEventListener('keyup', debouncedUpdatePreview, false);
	 *
	 *   // later, to cancel pending calls
	 *   debouncedUpdatePreview.reset();
	 *
	 * @param {function} func - the function to debounce
	 * @param {number} wait - how long to wait in milliseconds
	 * @param {*} context - optional context to invoke the function in
	 * @param {?function} setTimeoutFunc - an implementation of setTimeout
	 *  if nothing is passed in the default setTimeout function is used
	  * @param {?function} clearTimeoutFunc - an implementation of clearTimeout
	 *  if nothing is passed in the default clearTimeout function is used
	 */
	function debounce(func, wait, context, setTimeoutFunc, clearTimeoutFunc) {
	  setTimeoutFunc = setTimeoutFunc || setTimeout;
	  clearTimeoutFunc = clearTimeoutFunc || clearTimeout;
	  var timeout;
	
	  function debouncer() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    debouncer.reset();
	
	    timeout = setTimeoutFunc(function() {
	      func.apply(context, args);
	    }, wait);
	  }
	
	  debouncer.reset = function() {
	    clearTimeoutFunc(timeout);
	  };
	
	  return debouncer;
	}
	
	module.exports = debounce;


/***/ },
/* 198 */
/*!*************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/emptyFunction.js ***!
  \*************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
	
	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };
	
	module.exports = emptyFunction;


/***/ },
/* 199 */
/*!************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/shallowEqual.js ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */
	
	'use strict';
	
	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = shallowEqual;


/***/ },
/* 200 */
/*!**********************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/translateDOMPositionXY.js ***!
  \**********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule translateDOMPositionXY
	 * @typechecks
	 */
	
	"use strict";
	
	var BrowserSupportCore = __webpack_require__(/*! ./BrowserSupportCore */ 243);
	
	var getVendorPrefixedName = __webpack_require__(/*! ./getVendorPrefixedName */ 244);
	
	var TRANSFORM = getVendorPrefixedName('transform');
	var BACKFACE_VISIBILITY = getVendorPrefixedName('backfaceVisibility');
	
	var translateDOMPositionXY = (function() {
	  if (BrowserSupportCore.hasCSSTransforms()) {
	    var ua = global.window ? global.window.navigator.userAgent : 'UNKNOWN';
	    var isSafari = (/Safari\//).test(ua) && !(/Chrome\//).test(ua);
	    // It appears that Safari messes up the composition order
	    // of GPU-accelerated layers
	    // (see bug https://bugs.webkit.org/show_bug.cgi?id=61824).
	    // Use 2D translation instead.
	    if (!isSafari && BrowserSupportCore.hasCSS3DTransforms()) {
	      return function(/*object*/ style, /*number*/ x, /*number*/ y) {
	        style[TRANSFORM] ='translate3d(' + x + 'px,' + y + 'px,0)';
	        style[BACKFACE_VISIBILITY] = 'hidden';
	      };
	    } else {
	      return function(/*object*/ style, /*number*/ x, /*number*/ y) {
	        style[TRANSFORM] = 'translate(' + x + 'px,' + y + 'px)';
	      };
	    }
	  } else {
	    return function(/*object*/ style, /*number*/ x, /*number*/ y) {
	      style.left = x + 'px';
	      style.top = y + 'px';
	    };
	  }
	})();
	
	module.exports = translateDOMPositionXY;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 201 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/emptyObject.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */
	
	"use strict";
	
	var emptyObject = {};
	
	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 202 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactNativeComponent.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
	
	"use strict";
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	
	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Create an internal class for a specific tag.
	 *
	 * @param {string} tag The tag for which to create an internal instance.
	 * @param {any} props The props passed to the instance constructor.
	 * @return {ReactComponent} component The injected empty component.
	 */
	function createInstanceForTag(tag, props, parentType) {
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      genericComponentClass,
	      'There is no registered component for the tag %s',
	      tag
	    ) : invariant(genericComponentClass));
	    return new genericComponentClass(tag, props);
	  }
	  if (parentType === tag) {
	    // Avoid recursion
	    ("production" !== process.env.NODE_ENV ? invariant(
	      genericComponentClass,
	      'There is no registered component for the tag %s',
	      tag
	    ) : invariant(genericComponentClass));
	    return new genericComponentClass(tag, props);
	  }
	  // Unwrap legacy factories
	  return new componentClass.type(props);
	}
	
	var ReactNativeComponent = {
	  createInstanceForTag: createInstanceForTag,
	  injection: ReactNativeComponentInjection,
	};
	
	module.exports = ReactNativeComponent;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 203 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/CSSProperty.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
	
	"use strict";
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  columnCount: true,
	  fillOpacity: true,
	  flex: true,
	  flexGrow: true,
	  flexShrink: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;


/***/ },
/* 204 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/camelizeStyleName.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */
	
	"use strict";
	
	var camelize = __webpack_require__(/*! ./camelize */ 245);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;


/***/ },
/* 205 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/dangerousStyleValue.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var CSSProperty = __webpack_require__(/*! ./CSSProperty */ 203);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;


/***/ },
/* 206 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/hyphenateStyleName.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */
	
	"use strict";
	
	var hyphenate = __webpack_require__(/*! ./hyphenate */ 246);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;


/***/ },
/* 207 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticInputEvent.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 116);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);
	
	module.exports = SyntheticInputEvent;
	


/***/ },
/* 208 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/isTextInputElement.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
	
	"use strict";
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
	    elem.nodeName === 'TEXTAREA'
	  );
	}
	
	module.exports = isTextInputElement;


/***/ },
/* 209 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactInputSelection.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
	
	"use strict";
	
	var ReactDOMSelection = __webpack_require__(/*! ./ReactDOMSelection */ 247);
	
	var containsNode = __webpack_require__(/*! ./containsNode */ 167);
	var focusNode = __webpack_require__(/*! ./focusNode */ 248);
	var getActiveElement = __webpack_require__(/*! ./getActiveElement */ 221);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' ||
	      elem.contentEditable === 'true'
	    );
	  },
	
	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || {start: 0, end: 0};
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;


/***/ },
/* 210 */
/*!*********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticCompositionEvent.js ***!
  \*********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 116);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);
	
	module.exports = SyntheticCompositionEvent;
	


/***/ },
/* 211 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getTextContentAccessor.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;


/***/ },
/* 212 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticMouseEvent.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 227);
	var ViewportMetrics = __webpack_require__(/*! ./ViewportMetrics */ 181);
	
	var getEventModifierState = __webpack_require__(/*! ./getEventModifierState */ 249);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      event.fromElement === event.srcElement ?
	        event.toElement :
	        event.fromElement
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;


/***/ },
/* 213 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMIDOperations.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */
	
	/*jslint evil: true */
	
	"use strict";
	
	var CSSPropertyOperations = __webpack_require__(/*! ./CSSPropertyOperations */ 139);
	var DOMChildrenOperations = __webpack_require__(/*! ./DOMChildrenOperations */ 250);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 74);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 88);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 90);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	var setInnerHTML = __webpack_require__(/*! ./setInnerHTML */ 215);
	
	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};
	
	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updatePropertyByID',
	    function(id, name, value) {
	      var node = ReactMount.getNode(id);
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	        'updatePropertyByID(...): %s',
	        INVALID_PROPERTY_ERRORS[name]
	      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	
	      // If we're updating to null or undefined, we should remove the property
	      // from the DOM node instead of inadvertantly setting to a string. This
	      // brings us in line with the same behavior we have on initial render.
	      if (value != null) {
	        DOMPropertyOperations.setValueForProperty(node, name, value);
	      } else {
	        DOMPropertyOperations.deleteValueForProperty(node, name);
	      }
	    }
	  ),
	
	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'deletePropertyByID',
	    function(id, name, value) {
	      var node = ReactMount.getNode(id);
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	        'updatePropertyByID(...): %s',
	        INVALID_PROPERTY_ERRORS[name]
	      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	      DOMPropertyOperations.deleteValueForProperty(node, name, value);
	    }
	  ),
	
	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updateStylesByID',
	    function(id, styles) {
	      var node = ReactMount.getNode(id);
	      CSSPropertyOperations.setValueForStyles(node, styles);
	    }
	  ),
	
	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updateInnerHTMLByID',
	    function(id, html) {
	      var node = ReactMount.getNode(id);
	      setInnerHTML(node, html);
	    }
	  ),
	
	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'updateTextContentByID',
	    function(id, content) {
	      var node = ReactMount.getNode(id);
	      DOMChildrenOperations.updateTextContent(node, content);
	    }
	  ),
	
	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'dangerouslyReplaceNodeWithMarkupByID',
	    function(id, markup) {
	      var node = ReactMount.getNode(id);
	      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	    }
	  ),
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
	    'ReactDOMIDOperations',
	    'dangerouslyProcessChildrenUpdates',
	    function(updates, markup) {
	      for (var i = 0; i < updates.length; i++) {
	        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	      }
	      DOMChildrenOperations.processUpdates(updates, markup);
	    }
	  )
	};
	
	module.exports = ReactDOMIDOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 214 */
/*!*********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactReconcileTransaction.js ***!
  \*********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var CallbackQueue = __webpack_require__(/*! ./CallbackQueue */ 102);
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 103);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 115);
	var ReactInputSelection = __webpack_require__(/*! ./ReactInputSelection */ 209);
	var ReactPutListenerQueue = __webpack_require__(/*! ./ReactPutListenerQueue */ 232);
	var Transaction = __webpack_require__(/*! ./Transaction */ 104);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },
	
	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },
	
	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	
	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};
	
	
	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;


/***/ },
/* 215 */
/*!********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/setInnerHTML.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}
	
	module.exports = setInnerHTML;


/***/ },
/* 216 */
/*!**********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/AutoFocusMixin.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var focusNode = __webpack_require__(/*! ./focusNode */ 248);
	
	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};
	
	module.exports = AutoFocusMixin;


/***/ },
/* 217 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/LocalEventTrapMixin.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */
	
	"use strict";
	
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 115);
	
	var accumulateInto = __webpack_require__(/*! ./accumulateInto */ 178);
	var forEachAccumulated = __webpack_require__(/*! ./forEachAccumulated */ 179);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	function remove(event) {
	  event.remove();
	}
	
	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      this.getDOMNode()
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },
	
	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.
	
	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};
	
	module.exports = LocalEventTrapMixin;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 218 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/LinkedValueUtils.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var ReactPropTypes = __webpack_require__(/*! ./ReactPropTypes */ 91);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}
	
	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}
	
	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}
	
	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },
	
	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },
	
	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },
	
	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};
	
	module.exports = LinkedValueUtils;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 219 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/EventListener.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },
	
	  registerDefault: function() {}
	};
	
	module.exports = EventListener;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 220 */
/*!**********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getUnboundedScrollPosition.js ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */
	
	"use strict";
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;


/***/ },
/* 221 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getActiveElement.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;


/***/ },
/* 222 */
/*!*******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticClipboardEvent.js ***!
  \*******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 116);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;
	


/***/ },
/* 223 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticFocusEvent.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 227);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;


/***/ },
/* 224 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticKeyboardEvent.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 227);
	
	var getEventCharCode = __webpack_require__(/*! ./getEventCharCode */ 229);
	var getEventKey = __webpack_require__(/*! ./getEventKey */ 251);
	var getEventModifierState = __webpack_require__(/*! ./getEventModifierState */ 249);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 225 */
/*!**************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticDragEvent.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 212);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;


/***/ },
/* 226 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticTouchEvent.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 227);
	
	var getEventModifierState = __webpack_require__(/*! ./getEventModifierState */ 249);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;


/***/ },
/* 227 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticUIEvent.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 116);
	
	var getEventTarget = __webpack_require__(/*! ./getEventTarget */ 182);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;


/***/ },
/* 228 */
/*!***************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/SyntheticWheelEvent.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 212);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;


/***/ },
/* 229 */
/*!************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getEventCharCode.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;


/***/ },
/* 230 */
/*!******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/isTextNode.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(/*! ./isNode */ 252);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;


/***/ },
/* 231 */
/*!***************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/adler32.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
	
	/* jslint bitwise:true */
	
	"use strict";
	
	var MOD = 65521;
	
	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}
	
	module.exports = adler32;


/***/ },
/* 232 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactPutListenerQueue.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */
	
	"use strict";
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 103);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 115);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 94);
	
	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}
	
	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },
	
	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },
	
	  reset: function() {
	    this.listenersToPut.length = 0;
	  },
	
	  destructor: function() {
	    this.reset();
	  }
	});
	
	PooledClass.addPoolingTo(ReactPutListenerQueue);
	
	module.exports = ReactPutListenerQueue;


/***/ },
/* 233 */
/*!**************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/normalizeWheel.js ***!
  \**************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule normalizeWheel
	 * @typechecks
	 */
	
	var UserAgent_DEPRECATED = __webpack_require__(/*! ./UserAgent_DEPRECATED */ 253);
	
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 254);
	
	
	// Reasonable defaults
	var PIXEL_STEP  = 10;
	var LINE_HEIGHT = 40;
	var PAGE_HEIGHT = 800;
	
	/**
	 * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
	 * complicated, thus this doc is long and (hopefully) detailed enough to answer
	 * your questions.
	 *
	 * If you need to react to the mouse wheel in a predictable way, this code is
	 * like your bestest friend. * hugs *
	 *
	 * As of today, there are 4 DOM event types you can listen to:
	 *
	 *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
	 *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
	 *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
	 *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
	 *
	 * So what to do?  The is the best:
	 *
	 *   normalizeWheel.getEventType();
	 *
	 * In your event callback, use this code to get sane interpretation of the
	 * deltas.  This code will return an object with properties:
	 *
	 *   spinX   -- normalized spin speed (use for zoom) - x plane
	 *   spinY   -- " - y plane
	 *   pixelX  -- normalized distance (to pixels) - x plane
	 *   pixelY  -- " - y plane
	 *
	 * Wheel values are provided by the browser assuming you are using the wheel to
	 * scroll a web page by a number of lines or pixels (or pages).  Values can vary
	 * significantly on different platforms and browsers, forgetting that you can
	 * scroll at different speeds.  Some devices (like trackpads) emit more events
	 * at smaller increments with fine granularity, and some emit massive jumps with
	 * linear speed or acceleration.
	 *
	 * This code does its best to normalize the deltas for you:
	 *
	 *   - spin is trying to normalize how far the wheel was spun (or trackpad
	 *     dragged).  This is super useful for zoom support where you want to
	 *     throw away the chunky scroll steps on the PC and make those equal to
	 *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
	 *     resolve a single slow step on a wheel to 1.
	 *
	 *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
	 *     get the crazy differences between browsers, but at least it'll be in
	 *     pixels!
	 *
	 *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
	 *     should translate to positive value zooming IN, negative zooming OUT.
	 *     This matches the newer 'wheel' event.
	 *
	 * Why are there spinX, spinY (or pixels)?
	 *
	 *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
	 *     with a mouse.  It results in side-scrolling in the browser by default.
	 *
	 *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
	 *
	 *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
	 *     probably is by browsers in conjunction with fancy 3D controllers .. but
	 *     you know.
	 *
	 * Implementation info:
	 *
	 * Examples of 'wheel' event if you scroll slowly (down) by one step with an
	 * average mouse:
	 *
	 *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
	 *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
	 *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
	 *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
	 *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
	 *
	 * On the trackpad:
	 *
	 *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
	 *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
	 *
	 * On other/older browsers.. it's more complicated as there can be multiple and
	 * also missing delta values.
	 *
	 * The 'wheel' event is more standard:
	 *
	 * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
	 *
	 * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
	 * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
	 * backward compatibility with older events.  Those other values help us
	 * better normalize spin speed.  Example of what the browsers provide:
	 *
	 *                          | event.wheelDelta | event.detail
	 *        ------------------+------------------+--------------
	 *          Safari v5/OS X  |       -120       |       0
	 *          Safari v5/Win7  |       -120       |       0
	 *         Chrome v17/OS X  |       -120       |       0
	 *         Chrome v17/Win7  |       -120       |       0
	 *                IE9/Win7  |       -120       |   undefined
	 *         Firefox v4/OS X  |     undefined    |       1
	 *         Firefox v4/Win7  |     undefined    |       3
	 *
	 */
	function normalizeWheel(/*object*/ event) /*object*/ {
	  var sX = 0, sY = 0,       // spinX, spinY
	      pX = 0, pY = 0;       // pixelX, pixelY
	
	  // Legacy
	  if ('detail'      in event) { sY = event.detail; }
	  if ('wheelDelta'  in event) { sY = -event.wheelDelta / 120; }
	  if ('wheelDeltaY' in event) { sY = -event.wheelDeltaY / 120; }
	  if ('wheelDeltaX' in event) { sX = -event.wheelDeltaX / 120; }
	
	  // side scrolling on FF with DOMMouseScroll
	  if ( 'axis' in event && event.axis === event.HORIZONTAL_AXIS ) {
	    sX = sY;
	    sY = 0;
	  }
	
	  pX = sX * PIXEL_STEP;
	  pY = sY * PIXEL_STEP;
	
	  if ('deltaY' in event) { pY = event.deltaY; }
	  if ('deltaX' in event) { pX = event.deltaX; }
	
	  if ((pX || pY) && event.deltaMode) {
	    if (event.deltaMode == 1) {          // delta in LINE units
	      pX *= LINE_HEIGHT;
	      pY *= LINE_HEIGHT;
	    } else {                             // delta in PAGE units
	      pX *= PAGE_HEIGHT;
	      pY *= PAGE_HEIGHT;
	    }
	  }
	
	  // Fall-back if spin cannot be determined
	  if (pX && !sX) { sX = (pX < 1) ? -1 : 1; }
	  if (pY && !sY) { sY = (pY < 1) ? -1 : 1; }
	
	  return { spinX  : sX,
	           spinY  : sY,
	           pixelX : pX,
	           pixelY : pY };
	}
	
	
	/**
	 * The best combination if you prefer spinX + spinY normalization.  It favors
	 * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with
	 * 'wheel' event, making spin speed determination impossible.
	 */
	normalizeWheel.getEventType = function() /*string*/ {
	  return (UserAgent_DEPRECATED.firefox())
	           ? 'DOMMouseScroll'
	           : (isEventSupported('wheel'))
	               ? 'wheel'
	               : 'mousewheel';
	};
	
	module.exports = normalizeWheel;


/***/ },
/* 234 */
/*!*****************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/requestAnimationFramePolyfill.js ***!
  \*****************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule requestAnimationFramePolyfill
	 */
	
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 198);
	var nativeRequestAnimationFrame = __webpack_require__(/*! ./nativeRequestAnimationFrame */ 255);
	
	var lastTime = 0;
	
	/**
	 * Here is the native and polyfill version of requestAnimationFrame.
	 * Please don't use it directly and use requestAnimationFrame module instead.
	 */
	var requestAnimationFrame =
	  nativeRequestAnimationFrame ||
	  function(callback) {
	    var currTime = Date.now();
	    var timeDelay = Math.max(0, 16 - (currTime - lastTime));
	    lastTime = currTime + timeDelay;
	    return global.setTimeout(function() {
	      callback(Date.now());
	    }, timeDelay);
	  };
	
	// Works around a rare bug in Safari 6 where the first request is never invoked.
	requestAnimationFrame(emptyFunction);
	
	module.exports = requestAnimationFrame;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 235 */
/*!*******************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/DOMMouseMoveTracker.js ***!
  \*******************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMMouseMoveTracker
	 * @typechecks
	 */
	
	var EventListener = __webpack_require__(/*! ./EventListener */ 256);
	
	var cancelAnimationFramePolyfill = __webpack_require__(/*! ./cancelAnimationFramePolyfill */ 257);
	var requestAnimationFramePolyfill = __webpack_require__(/*! ./requestAnimationFramePolyfill */ 234);
	
	
	  /**
	   * onMove is the callback that will be called on every mouse move.
	   * onMoveEnd is called on mouse up when movement has ended.
	   */
	  function DOMMouseMoveTracker(
	onMove,
	    /*function*/ onMoveEnd,
	    /*DOMElement*/ domNode) {"use strict";
	    this.$DOMMouseMoveTracker_isDragging = false;
	    this.$DOMMouseMoveTracker_animationFrameID = null;
	    this.$DOMMouseMoveTracker_domNode = domNode;
	    this.$DOMMouseMoveTracker_onMove = onMove;
	    this.$DOMMouseMoveTracker_onMoveEnd = onMoveEnd;
	    this.$DOMMouseMoveTracker_onMouseMove = this.$DOMMouseMoveTracker_onMouseMove.bind(this);
	    this.$DOMMouseMoveTracker_onMouseUp = this.$DOMMouseMoveTracker_onMouseUp.bind(this);
	    this.$DOMMouseMoveTracker_didMouseMove = this.$DOMMouseMoveTracker_didMouseMove.bind(this);
	  }
	
	  /**
	   * This is to set up the listeners for listening to mouse move
	   * and mouse up signaling the movement has ended. Please note that these
	   * listeners are added at the document.body level. It takes in an event
	   * in order to grab inital state.
	   */
	  DOMMouseMoveTracker.prototype.captureMouseMoves=function(event) {"use strict";
	    if (!this.$DOMMouseMoveTracker_eventMoveToken && !this.$DOMMouseMoveTracker_eventUpToken) {
	      this.$DOMMouseMoveTracker_eventMoveToken = EventListener.listen(
	        this.$DOMMouseMoveTracker_domNode,
	        'mousemove',
	        this.$DOMMouseMoveTracker_onMouseMove
	      );
	      this.$DOMMouseMoveTracker_eventUpToken = EventListener.listen(
	        this.$DOMMouseMoveTracker_domNode,
	        'mouseup',
	        this.$DOMMouseMoveTracker_onMouseUp
	      );
	    }
	
	    if (!this.$DOMMouseMoveTracker_isDragging) {
	      this.$DOMMouseMoveTracker_deltaX = 0;
	      this.$DOMMouseMoveTracker_deltaY = 0;
	      this.$DOMMouseMoveTracker_isDragging = true;
	      this.$DOMMouseMoveTracker_x = event.clientX;
	      this.$DOMMouseMoveTracker_y = event.clientY;
	    }
	    event.preventDefault();
	  };
	
	  /**
	   * These releases all of the listeners on document.body.
	   */
	  DOMMouseMoveTracker.prototype.releaseMouseMoves=function() {"use strict";
	    if (this.$DOMMouseMoveTracker_eventMoveToken && this.$DOMMouseMoveTracker_eventUpToken) {
	      this.$DOMMouseMoveTracker_eventMoveToken.remove();
	      this.$DOMMouseMoveTracker_eventMoveToken = null;
	      this.$DOMMouseMoveTracker_eventUpToken.remove();
	      this.$DOMMouseMoveTracker_eventUpToken = null;
	    }
	
	    if (this.$DOMMouseMoveTracker_animationFrameID !== null) {
	      cancelAnimationFramePolyfill(this.$DOMMouseMoveTracker_animationFrameID);
	      this.$DOMMouseMoveTracker_animationFrameID = null;
	    }
	
	    if (this.$DOMMouseMoveTracker_isDragging) {
	      this.$DOMMouseMoveTracker_isDragging = false;
	      this.$DOMMouseMoveTracker_x = null;
	      this.$DOMMouseMoveTracker_y = null;
	    }
	  };
	
	  /**
	   * Returns whether or not if the mouse movement is being tracked.
	   */
	  DOMMouseMoveTracker.prototype.isDragging=function() {"use strict";
	    return this.$DOMMouseMoveTracker_isDragging;
	  };
	
	  /**
	   * Calls onMove passed into constructor and updates internal state.
	   */
	  DOMMouseMoveTracker.prototype.$DOMMouseMoveTracker_onMouseMove=function(event) {"use strict";
	    var x = event.clientX;
	    var y = event.clientY;
	
	    this.$DOMMouseMoveTracker_deltaX += (x - this.$DOMMouseMoveTracker_x);
	    this.$DOMMouseMoveTracker_deltaY += (y - this.$DOMMouseMoveTracker_y);
	
	    if (this.$DOMMouseMoveTracker_animationFrameID === null) {
	      // The mouse may move faster then the animation frame does.
	      // Use `requestAnimationFramePolyfill` to avoid over-updating.
	      this.$DOMMouseMoveTracker_animationFrameID =
	        requestAnimationFramePolyfill(this.$DOMMouseMoveTracker_didMouseMove);
	    }
	
	    this.$DOMMouseMoveTracker_x = x;
	    this.$DOMMouseMoveTracker_y = y;
	    event.preventDefault();
	  };
	
	  DOMMouseMoveTracker.prototype.$DOMMouseMoveTracker_didMouseMove=function() {"use strict";
	    this.$DOMMouseMoveTracker_animationFrameID = null;
	    this.$DOMMouseMoveTracker_onMove(this.$DOMMouseMoveTracker_deltaX, this.$DOMMouseMoveTracker_deltaY);
	    this.$DOMMouseMoveTracker_deltaX = 0;
	    this.$DOMMouseMoveTracker_deltaY = 0;
	  };
	
	  /**
	   * Calls onMoveEnd passed into constructor and updates internal state.
	   */
	  DOMMouseMoveTracker.prototype.$DOMMouseMoveTracker_onMouseUp=function() {"use strict";
	    if (this.$DOMMouseMoveTracker_animationFrameID) {
	      this.$DOMMouseMoveTracker_didMouseMove();
	    }
	    this.$DOMMouseMoveTracker_onMoveEnd();
	  };
	
	
	module.exports = DOMMouseMoveTracker;


/***/ },
/* 236 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/Keys.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Keys
	 */
	
	module.exports = {
	  BACKSPACE:  8,
	  TAB:        9,
	  RETURN:    13,
	  ALT:       18,
	  ESC:       27,
	  SPACE:     32,
	  PAGE_UP:   33,
	  PAGE_DOWN: 34,
	  END:       35,
	  HOME:      36,
	  LEFT:      37,
	  UP:        38,
	  RIGHT:     39,
	  DOWN:      40,
	  DELETE:    46,
	  COMMA:    188,
	  PERIOD:   190,
	  A:         65,
	  Z:         90,
	  ZERO:      48,
	  NUMPAD_0:  96,
	  NUMPAD_9: 105
	};


/***/ },
/* 237 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/cssVar.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cssVar
	 * @typechecks
	 */
	
	"use strict";
	
	var CSS_VARS = {
	  'scrollbar-face-active-color': '#7d7d7d',
	  'scrollbar-face-color': '#c2c2c2',
	  'scrollbar-face-margin': '4px',
	  'scrollbar-face-radius': '6px',
	  'scrollbar-size': '15px',
	  'scrollbar-size-large': '17px',
	  'scrollbar-track-color': 'rgba(255, 255, 255, 0.8)',
	};
	
	/**
	 * @param {string} name
	 */
	function cssVar(name) {
	  if (CSS_VARS.hasOwnProperty(name)) {
	    return CSS_VARS[name];
	  }
	
	  throw new Error(
	    'cssVar' + '("' + name + '"): Unexpected class transformation.'
	  );
	}
	
	cssVar.CSS_VARS = CSS_VARS;
	
	module.exports = cssVar;


/***/ },
/* 238 */
/*!***********************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableRowBuffer.js ***!
  \***********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableRowBuffer
	 * @typechecks
	 */
	'use strict';
	
	var IntegerBufferSet = __webpack_require__(/*! ./IntegerBufferSet */ 258);
	
	var clamp = __webpack_require__(/*! ./clamp */ 240);
	var invariant = __webpack_require__(/*! ./invariant */ 184);
	var MIN_BUFFER_ROWS = 5;
	var MAX_BUFFER_ROWS = 15;
	
	// FixedDataTableRowBuffer is a helper class that executes row buffering
	// logic for FixedDataTable. It figures out which rows should be rendered
	// and in which positions.
	
	  function FixedDataTableRowBuffer(
	rowsCount,
	    /*number*/  defaultRowHeight,
	    /*number*/ viewportHeight,
	    /*?function*/ rowHeightGetter)
	   {
	    invariant(
	      defaultRowHeight !== 0,
	      "defaultRowHeight musn't be equal 0 in FixedDataTableRowBuffer"
	    );
	
	    this.$FixedDataTableRowBuffer_bufferSet = new IntegerBufferSet();
	    this.$FixedDataTableRowBuffer_defaultRowHeight = defaultRowHeight;
	    this.$FixedDataTableRowBuffer_viewportRowsBegin = 0;
	    this.$FixedDataTableRowBuffer_viewportRowsEnd = 0;
	    this.$FixedDataTableRowBuffer_maxVisibleRowCount = Math.ceil(viewportHeight / defaultRowHeight) + 1;
	    this.$FixedDataTableRowBuffer_bufferRowsCount = clamp(
	      MIN_BUFFER_ROWS,
	      Math.floor(this.$FixedDataTableRowBuffer_maxVisibleRowCount/2),
	      MAX_BUFFER_ROWS
	    );
	    this.$FixedDataTableRowBuffer_rowsCount = rowsCount;
	    this.$FixedDataTableRowBuffer_rowHeightGetter = rowHeightGetter;
	    this.$FixedDataTableRowBuffer_rows = [];
	    this.$FixedDataTableRowBuffer_viewportHeight = viewportHeight;
	
	    this.getRows = this.getRows.bind(this);
	    this.getRowsWithUpdatedBuffer = this.getRowsWithUpdatedBuffer.bind(this);
	  }
	
	  FixedDataTableRowBuffer.prototype.getRowsWithUpdatedBuffer=function()  {
	    var remainingBufferRows = 2 * this.$FixedDataTableRowBuffer_bufferRowsCount;
	    var bufferRowIndex =
	      Math.max(this.$FixedDataTableRowBuffer_viewportRowsBegin - this.$FixedDataTableRowBuffer_bufferRowsCount, 0);
	    while (bufferRowIndex < this.$FixedDataTableRowBuffer_viewportRowsBegin) {
	      this.$FixedDataTableRowBuffer_addRowToBuffer(
	        bufferRowIndex,
	        this.$FixedDataTableRowBuffer_viewportHeight,
	        this.$FixedDataTableRowBuffer_viewportRowsBegin,
	        this.$FixedDataTableRowBuffer_viewportRowsEnd -1
	      );
	      bufferRowIndex++;
	      remainingBufferRows--;
	    }
	    bufferRowIndex = this.$FixedDataTableRowBuffer_viewportRowsEnd;
	    while (bufferRowIndex < this.$FixedDataTableRowBuffer_rowsCount && remainingBufferRows > 0) {
	      this.$FixedDataTableRowBuffer_addRowToBuffer(
	        bufferRowIndex,
	        this.$FixedDataTableRowBuffer_viewportHeight,
	        this.$FixedDataTableRowBuffer_viewportRowsBegin,
	        this.$FixedDataTableRowBuffer_viewportRowsEnd -1
	      );
	      bufferRowIndex++;
	      remainingBufferRows--;
	    }
	    return this.$FixedDataTableRowBuffer_rows;
	  };
	
	  FixedDataTableRowBuffer.prototype.getRows=function(
	firstRowIndex,
	    /*number*/ firstRowOffset)
	    {
	    // Update offsets of all rows to move them outside of viewport. Later we
	    // will bring rows that we should show to their right offsets.
	    this.$FixedDataTableRowBuffer_hideAllRows();
	
	    var top = firstRowOffset;
	    var totalHeight = top;
	    var rowIndex = firstRowIndex;
	    var endIndex =
	      Math.min(firstRowIndex + this.$FixedDataTableRowBuffer_maxVisibleRowCount, this.$FixedDataTableRowBuffer_rowsCount);
	
	    this.$FixedDataTableRowBuffer_viewportRowsBegin = firstRowIndex;
	    while (rowIndex < endIndex ||
	        (totalHeight < this.$FixedDataTableRowBuffer_viewportHeight && rowIndex < this.$FixedDataTableRowBuffer_rowsCount)) {
	      this.$FixedDataTableRowBuffer_addRowToBuffer(
	        rowIndex,
	        totalHeight,
	        firstRowIndex,
	        endIndex - 1
	      );
	      totalHeight += this.$FixedDataTableRowBuffer_rowHeightGetter(rowIndex);
	      ++rowIndex;
	      // Store index after the last viewport row as end, to be able to
	      // distinguish when there are no rows rendered in viewport
	      this.$FixedDataTableRowBuffer_viewportRowsEnd = rowIndex;
	    }
	
	    return this.$FixedDataTableRowBuffer_rows;
	  };
	
	  FixedDataTableRowBuffer.prototype.$FixedDataTableRowBuffer_addRowToBuffer=function(
	rowIndex,
	    /*number*/ offsetTop,
	    /*number*/ firstViewportRowIndex,
	    /*number*/ lastViewportRowIndex)
	   {
	      var rowPosition = this.$FixedDataTableRowBuffer_bufferSet.getValuePosition(rowIndex);
	      var viewportRowsCount = lastViewportRowIndex - firstViewportRowIndex + 1;
	      var allowedRowsCount = viewportRowsCount + this.$FixedDataTableRowBuffer_bufferRowsCount * 2;
	      if (rowPosition === null &&
	          this.$FixedDataTableRowBuffer_bufferSet.getSize() >= allowedRowsCount) {
	        rowPosition =
	          this.$FixedDataTableRowBuffer_bufferSet.replaceFurthestValuePosition(
	            firstViewportRowIndex,
	            lastViewportRowIndex,
	            rowIndex
	          );
	      }
	      if (rowPosition === null) {
	        // We can't reuse any of existing positions for this row. We have to
	        // create new position
	        rowPosition = this.$FixedDataTableRowBuffer_bufferSet.getNewPositionForValue(rowIndex);
	        this.$FixedDataTableRowBuffer_rows[rowPosition] = {
	          rowIndex:rowIndex,
	          offsetTop:offsetTop,
	        };
	      } else {
	        // This row already is in the table with rowPosition position or it
	        // can replace row that is in that position
	        this.$FixedDataTableRowBuffer_rows[rowPosition].rowIndex = rowIndex;
	        this.$FixedDataTableRowBuffer_rows[rowPosition].offsetTop = offsetTop;
	      }
	  };
	
	  FixedDataTableRowBuffer.prototype.$FixedDataTableRowBuffer_hideAllRows=function() {
	    var i = this.$FixedDataTableRowBuffer_rows.length - 1;
	    while (i > -1) {
	      this.$FixedDataTableRowBuffer_rows[i].offsetTop = this.$FixedDataTableRowBuffer_viewportHeight;
	      i--;
	    }
	  };
	
	
	module.exports = FixedDataTableRowBuffer;


/***/ },
/* 239 */
/*!***********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/joinClasses.js ***!
  \***********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}
	
	module.exports = joinClasses;


/***/ },
/* 240 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/clamp.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule clamp
	 * @typechecks
	 */
	
	 /**
	  * @param {number} min
	  * @param {number} value
	  * @param {number} max
	  * @return {number}
	  */
	function clamp(min, value, max) {
	  if (value < min) {
	    return min;
	  }
	  if (value > max) {
	    return max;
	  }
	  return value;
	}
	
	module.exports = clamp;


/***/ },
/* 241 */
/*!*****************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableCellGroup.react.js ***!
  \*****************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableCellGroup.react
	 * @typechecks
	 */
	
	"use strict";
	
	var FixedDataTableHelper = __webpack_require__(/*! ./FixedDataTableHelper */ 185);
	var ImmutableObject = __webpack_require__(/*! ./ImmutableObject */ 259);
	var React = __webpack_require__(/*! ./React */ 183);
	var ReactComponentWithPureRenderMixin = __webpack_require__(/*! ./ReactComponentWithPureRenderMixin */ 187);
	var FixedDataTableCell = __webpack_require__(/*! ./FixedDataTableCell.react */ 260);
	
	var cx = __webpack_require__(/*! ./cx */ 196);
	var renderToString = FixedDataTableHelper.renderToString;
	var translateDOMPositionXY = __webpack_require__(/*! ./translateDOMPositionXY */ 200);
	
	var PropTypes = React.PropTypes;
	
	var EMPTY_OBJECT = new ImmutableObject({});
	
	var FixedDataTableCellGroupImpl = React.createClass({displayName: "FixedDataTableCellGroupImpl",
	  mixins: [ReactComponentWithPureRenderMixin],
	
	  propTypes: {
	
	    /**
	     * Array of <FixedDataTableColumn />.
	     */
	    columns: PropTypes.array.isRequired,
	
	    /**
	     * The row data to render. The data format can be a simple Map object
	     * or an Array of data.
	     */
	    data: PropTypes.oneOfType([
	      PropTypes.object,
	      PropTypes.array
	    ]),
	
	    onColumnResize: PropTypes.func,
	
	    rowHeight: PropTypes.number.isRequired,
	
	    rowIndex: PropTypes.number.isRequired,
	
	    zIndex: PropTypes.number.isRequired,
	  },
	
	  render:function() /*object*/ {
	    var props = this.props;
	    var columns = props.columns;
	    var cells = {};
	    var width = 0;
	
	    for (var i = 0, j = columns.length; i < j; i++) {
	      var columnProps = columns[i].props;
	      width += columnProps.width;
	      var key = 'cell_' + i;
	      cells[key] = this._renderCell(
	        props.data,
	        props.rowIndex,
	        props.rowHeight,
	        columnProps,
	        width,
	        key
	      );
	    }
	
	    var style = {
	      width: width,
	      height: props.height,
	      zIndex: props.zIndex
	    };
	
	    return (
	      React.createElement("div", {className: cx('fixedDataTableCellGroup/cellGroup'), style: style}, 
	        cells
	      )
	    );
	  },
	
	  _renderCell:function(
	    /*object|array*/ rowData,
	    /*number*/ rowIndex,
	    /*number*/ height,
	    /*object*/ columnProps,
	    /*?number*/ widthOffset,
	    /*string*/ key
	  ) /*object*/ {
	    var cellRenderer = columnProps.cellRenderer || renderToString;
	    var columnData = columnProps.columnData || EMPTY_OBJECT;
	    var cellDataKey = columnProps.dataKey;
	    var isFooterCell = columnProps.isFooterCell;
	    var isHeaderCell = columnProps.isHeaderCell;
	    var cellData;
	
	    if (isHeaderCell || isFooterCell) {
	      cellData = columnProps.label;
	    } else {
	      var cellDataGetter = columnProps.cellDataGetter;
	      cellData = cellDataGetter ?
	        cellDataGetter(cellDataKey, rowData) :
	        rowData[cellDataKey];
	    }
	
	    var cellIsResizable = columnProps.isResizable &&
	      this.props.onColumnResize;
	    var onColumnResize = cellIsResizable ? this.props.onColumnResize : null;
	
	    return (
	      React.createElement(FixedDataTableCell, {
	        align: columnProps.align, 
	        cellData: cellData, 
	        cellDataKey: cellDataKey, 
	        cellRenderer: cellRenderer, 
	        className: columnProps.cellClassName, 
	        columnData: columnData, 
	        height: height, 
	        isFooterCell: isFooterCell, 
	        isHeaderCell: isHeaderCell, 
	        key: key, 
	        maxWidth: columnProps.maxWidth, 
	        minWidth: columnProps.minWidth, 
	        onColumnResize: onColumnResize, 
	        rowData: rowData, 
	        rowIndex: rowIndex, 
	        width: columnProps.width, 
	        widthOffset: widthOffset}
	      )
	    );
	  },
	});
	
	var FixedDataTableCellGroup = React.createClass({displayName: "FixedDataTableCellGroup",
	  mixins: [ReactComponentWithPureRenderMixin],
	
	  propTypes: {
	    /**
	     * Height of the row.
	     */
	    height: PropTypes.number.isRequired,
	
	    left: PropTypes.number,
	
	    /**
	     * Z-index on which the row will be displayed. Used e.g. for keeping
	     * header and footer in front of other rows.
	     */
	    zIndex: PropTypes.number.isRequired,
	  },
	
	  render:function() /*object*/ {
	    var $__0=   this.props,left=$__0.left,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{left:1});
	
	    var style = {
	      height: props.height,
	    };
	
	    if (left) {
	      translateDOMPositionXY(style, left, 0);
	    }
	
	    var onColumnResize = props.onColumnResize ? this._onColumnResize : null;
	
	    return (
	      React.createElement("div", {
	        style: style, 
	        className: cx('fixedDataTableCellGroup/cellGroupWrapper')}, 
	        React.createElement(FixedDataTableCellGroupImpl, React.__spread({}, 
	          props, 
	          {onColumnResize: onColumnResize})
	        )
	      )
	    );
	  },
	
	  _onColumnResize:function(
	    /*number*/ widthOffset,
	    /*number*/ width,
	    /*?number*/ minWidth,
	    /*?number*/ maxWidth,
	    /*string|number*/ cellDataKey,
	    /*object*/ event
	  ) {
	    this.props.onColumnResize && this.props.onColumnResize(
	      widthOffset,
	      this.props.left,
	      width,
	      minWidth,
	      maxWidth,
	      cellDataKey,
	      event
	    );
	  },
	});
	
	
	module.exports = FixedDataTableCellGroup;


/***/ },
/* 242 */
/*!******************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/PrefixIntervalTree.js ***!
  \******************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PrefixIntervalTree
	 * @typechecks
	 */
	"use strict";
	
	/**
	 * An interval tree that allows to set a number at index and given the value
	 * find the largest index for which prefix sum is greater than or equal to value
	 * (lower bound) or greater than value (upper bound)
	 * Complexity:
	 *   construct: O(n)
	 *   query: O(log(n))
	 *   memory: O(log(n)),
	 * where n is leafCount from the constructor
	 */
	
	  function PrefixIntervalTree(leafCount, /*?number*/ initialLeafValue) {
	    var internalLeafCount = this.getInternalLeafCount(leafCount);
	    this.$PrefixIntervalTree_leafCount = leafCount;
	    this.$PrefixIntervalTree_internalLeafCount = internalLeafCount;
	    var nodeCount = 2 * internalLeafCount;
	    var Int32Array = global.Int32Array || Array;
	    this.$PrefixIntervalTree_value = new Int32Array(nodeCount);
	    this.$PrefixIntervalTree_initTables(initialLeafValue || 0);
	
	    this.get = this.get.bind(this);
	    this.set = this.set.bind(this);
	    this.lowerBound = this.lowerBound.bind(this);
	    this.upperBound = this.upperBound.bind(this);
	  }
	
	  PrefixIntervalTree.prototype.getInternalLeafCount=function(leafCount)  {
	    var internalLeafCount = 1;
	    while (internalLeafCount < leafCount) {
	      internalLeafCount *= 2;
	    }
	    return internalLeafCount;
	  };
	
	  PrefixIntervalTree.prototype.$PrefixIntervalTree_initTables=function(initialLeafValue) {
	    var firstLeaf = this.$PrefixIntervalTree_internalLeafCount;
	    var lastLeaf = this.$PrefixIntervalTree_internalLeafCount + this.$PrefixIntervalTree_leafCount - 1;
	    var i;
	    for (i = firstLeaf; i <= lastLeaf; ++i) {
	      this.$PrefixIntervalTree_value[i] = initialLeafValue;
	    }
	    var lastInternalNode = this.$PrefixIntervalTree_internalLeafCount - 1;
	    for (i = lastInternalNode; i > 0; --i) {
	      this.$PrefixIntervalTree_value[i] =  this.$PrefixIntervalTree_value[2 * i] + this.$PrefixIntervalTree_value[2 * i + 1];
	    }
	  };
	
	  PrefixIntervalTree.prototype.set=function(position, /*number*/ value) {
	    var nodeIndex = position + this.$PrefixIntervalTree_internalLeafCount;
	    this.$PrefixIntervalTree_value[nodeIndex] = value;
	    nodeIndex = Math.floor(nodeIndex / 2);
	    while (nodeIndex !== 0) {
	      this.$PrefixIntervalTree_value[nodeIndex] =
	        this.$PrefixIntervalTree_value[2 * nodeIndex] + this.$PrefixIntervalTree_value[2 * nodeIndex + 1];
	      nodeIndex = Math.floor(nodeIndex / 2);
	    }
	  };
	
	  /**
	   * Returns an object {index, value} for given position (including value at
	   * specified position), or the same for last position if provided position
	   * is out of range
	   */
	  PrefixIntervalTree.prototype.get=function(position)  {
	    position = Math.min(position, this.$PrefixIntervalTree_leafCount);
	    var nodeIndex = position + this.$PrefixIntervalTree_internalLeafCount;
	    var result = this.$PrefixIntervalTree_value[nodeIndex];
	    while (nodeIndex > 1) {
	      if (nodeIndex % 2 === 1) {
	        result = this.$PrefixIntervalTree_value[nodeIndex - 1] + result;
	      }
	      nodeIndex = Math.floor(nodeIndex / 2);
	    }
	    return {index: position, value: result};
	  };
	
	  /**
	   * Returns an object {index, value} where index is index of leaf that was
	   * found by upper bound algorithm. Upper bound finds first element for which
	   * value is greater than argument
	   */
	  PrefixIntervalTree.prototype.upperBound=function(value)  {
	    var result = this.$PrefixIntervalTree_upperBoundImpl(1, 0, this.$PrefixIntervalTree_internalLeafCount - 1, value);
	    if (result.index > this.$PrefixIntervalTree_leafCount - 1) {
	      result.index = this.$PrefixIntervalTree_leafCount - 1;
	    }
	    return result;
	  };
	
	  /**
	   * Returns result in the same format as upperBound, but finds first element
	   * for which value is greater than or equal to argument
	   */
	  PrefixIntervalTree.prototype.lowerBound=function(value)  {
	    var result = this.upperBound(value);
	    if (result.value > value && result.index > 0) {
	      var previousValue =
	        result.value - this.$PrefixIntervalTree_value[this.$PrefixIntervalTree_internalLeafCount + result.index];
	      if (previousValue === value) {
	        result.value = previousValue;
	        result.index--;
	      }
	    }
	    return result;
	  };
	
	  PrefixIntervalTree.prototype.$PrefixIntervalTree_upperBoundImpl=function(
	nodeIndex,
	    /*number*/ nodeIntervalBegin,
	    /*number*/ nodeIntervalEnd,
	    /*number*/ value)
	    {
	    if (nodeIntervalBegin === nodeIntervalEnd) {
	      return {
	        index: nodeIndex - this.$PrefixIntervalTree_internalLeafCount,
	        value: this.$PrefixIntervalTree_value[nodeIndex],
	      };
	    }
	
	    var nodeIntervalMidpoint =
	      Math.floor((nodeIntervalBegin + nodeIntervalEnd + 1) / 2);
	    if (value < this.$PrefixIntervalTree_value[nodeIndex * 2]) {
	      return this.$PrefixIntervalTree_upperBoundImpl(
	        2 * nodeIndex,
	        nodeIntervalBegin,
	        nodeIntervalMidpoint - 1,
	        value
	      );
	    } else {
	      var result = this.$PrefixIntervalTree_upperBoundImpl(
	        2 * nodeIndex + 1,
	        nodeIntervalMidpoint,
	        nodeIntervalEnd,
	        value - this.$PrefixIntervalTree_value[2 * nodeIndex]
	      );
	      result.value += this.$PrefixIntervalTree_value[2 * nodeIndex];
	      return result;
	    }
	  };
	
	
	module.exports = PrefixIntervalTree;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 243 */
/*!******************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/BrowserSupportCore.js ***!
  \******************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BrowserSupportCore
	 */
	
	
	var getVendorPrefixedName = __webpack_require__(/*! ./getVendorPrefixedName */ 244);
	
	var BrowserSupportCore = {
	  /**
	   * @return {bool} True if browser supports css animations.
	   */
	  hasCSSAnimations: function() {
	    return !!getVendorPrefixedName('animationName');
	  },
	
	  /**
	   * @return {bool} True if browser supports css transforms.
	   */
	  hasCSSTransforms: function() {
	    return !!getVendorPrefixedName('transform');
	  },
	
	  /**
	   * @return {bool} True if browser supports css 3d transforms.
	   */
	  hasCSS3DTransforms: function() {
	    return !!getVendorPrefixedName('perspective');
	  },
	
	  /**
	   * @return {bool} True if browser supports css transitions.
	   */
	  hasCSSTransitions: function() {
	    return !!getVendorPrefixedName('transition');
	  },
	};
	
	module.exports = BrowserSupportCore;


/***/ },
/* 244 */
/*!*********************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/getVendorPrefixedName.js ***!
  \*********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getVendorPrefixedName
	 * @typechecks
	 */
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 117);
	
	var camelize = __webpack_require__(/*! ./camelize */ 261);
	var invariant = __webpack_require__(/*! ./invariant */ 184);
	
	var memoized = {};
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	var prefixRegex = new RegExp('^(' + prefixes.join('|') + ')');
	var testStyle =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div').style : {};
	
	function getWithPrefix(name) {
	  for (var i = 0; i < prefixes.length; i++) {
	    var prefixedName = prefixes[i] + name;
	    if (prefixedName in testStyle) {
	      return prefixedName;
	    }
	  }
	  return null;
	}
	
	/**
	 * @param {string} property Name of a css property to check for.
	 * @return {?string} property name supported in the browser, or null if not
	 * supported.
	 */
	function getVendorPrefixedName(property) {
	  var name = camelize(property);
	  if (memoized[name] === undefined) {
	    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);
	    if (prefixRegex.test(capitalizedName)) {
	      invariant(
	        false,
	        'getVendorPrefixedName must only be called with unprefixed' +
	        'CSS property names. It was called with %s', property
	      );
	    }
	    memoized[name] =
	      (name in testStyle) ? name : getWithPrefix(capitalizedName);
	  }
	  return memoized[name];
	}
	
	module.exports = getVendorPrefixedName;


/***/ },
/* 245 */
/*!****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/camelize.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;


/***/ },
/* 246 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/hyphenate.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;


/***/ },
/* 247 */
/*!*************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/ReactDOMSelection.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var getNodeForCharacterOffset = __webpack_require__(/*! ./getNodeForCharacterOffset */ 262);
	var getTextContentAccessor = __webpack_require__(/*! ./getTextContentAccessor */ 211);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;


/***/ },
/* 248 */
/*!*****************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/focusNode.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */
	
	"use strict";
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}
	
	module.exports = focusNode;


/***/ },
/* 249 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getEventModifierState.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */
	
	"use strict";
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;


/***/ },
/* 250 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/DOMChildrenOperations.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var Danger = __webpack_require__(/*! ./Danger */ 263);
	var ReactMultiChildUpdateTypes = __webpack_require__(/*! ./ReactMultiChildUpdateTypes */ 169);
	
	var getTextContentAccessor = __webpack_require__(/*! ./getTextContentAccessor */ 211);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * The DOM property to use when setting text content.
	 *
	 * @type {string}
	 * @private
	 */
	var textContentAccessor = getTextContentAccessor();
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}
	
	var updateTextContent;
	if (textContentAccessor === 'textContent') {
	  /**
	   * Sets the text content of `node` to `text`.
	   *
	   * @param {DOMElement} node Node to change
	   * @param {string} text New text content
	   */
	  updateTextContent = function(node, text) {
	    node.textContent = text;
	  };
	} else {
	  /**
	   * Sets the text content of `node` to `text`.
	   *
	   * @param {DOMElement} node Node to change
	   * @param {string} text New text content
	   */
	  updateTextContent = function(node, text) {
	    // In order to preserve newlines correctly, we can't use .innerText to set
	    // the contents (see #1080), so we empty the element then append a text node
	    while (node.firstChild) {
	      node.removeChild(node.firstChild);
	    }
	    if (text) {
	      var doc = node.ownerDocument || document;
	      node.appendChild(doc.createTextNode(text));
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
	
	  updateTextContent: updateTextContent,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;
	
	    for (var i = 0; update = updates[i]; i++) {
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;
	
	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));
	
	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;
	
	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }
	
	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	
	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }
	
	    for (var k = 0; update = updates[k]; k++) {
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          updateTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 251 */
/*!*******************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getEventKey.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var getEventCharCode = __webpack_require__(/*! ./getEventCharCode */ 229);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;


/***/ },
/* 252 */
/*!**************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/isNode.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    typeof Node === 'function' ? object instanceof Node :
	      typeof object === 'object' &&
	      typeof object.nodeType === 'number' &&
	      typeof object.nodeName === 'string'
	  ));
	}
	
	module.exports = isNode;


/***/ },
/* 253 */
/*!********************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/UserAgent_DEPRECATED.js ***!
  \********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule UserAgent_DEPRECATED
	 */
	
	/**
	 *  Provides entirely client-side User Agent and OS detection. You should prefer
	 *  the non-deprecated UserAgent module when possible, which exposes our
	 *  authoritative server-side PHP-based detection to the client.
	 *
	 *  Usage is straightforward:
	 *
	 *    if (UserAgent_DEPRECATED.ie()) {
	 *      //  IE
	 *    }
	 *
	 *  You can also do version checks:
	 *
	 *    if (UserAgent_DEPRECATED.ie() >= 7) {
	 *      //  IE7 or better
	 *    }
	 *
	 *  The browser functions will return NaN if the browser does not match, so
	 *  you can also do version compares the other way:
	 *
	 *    if (UserAgent_DEPRECATED.ie() < 7) {
	 *      //  IE6 or worse
	 *    }
	 *
	 *  Note that the version is a float and may include a minor version number,
	 *  so you should always use range operators to perform comparisons, not
	 *  strict equality.
	 *
	 *  **Note:** You should **strongly** prefer capability detection to browser
	 *  version detection where it's reasonable:
	 *
	 *    http://www.quirksmode.org/js/support.html
	 *
	 *  Further, we have a large number of mature wrapper functions and classes
	 *  which abstract away many browser irregularities. Check the documentation,
	 *  grep for things, or ask on javascript@lists.facebook.com before writing yet
	 *  another copy of "event || window.event".
	 *
	 */
	
	var _populated = false;
	
	// Browsers
	var _ie, _firefox, _opera, _webkit, _chrome;
	
	// Actual IE browser for compatibility mode
	var _ie_real_version;
	
	// Platforms
	var _osx, _windows, _linux, _android;
	
	// Architectures
	var _win64;
	
	// Devices
	var _iphone, _ipad, _native;
	
	var _mobile;
	
	function _populate() {
	  if (_populated) {
	    return;
	  }
	
	  _populated = true;
	
	  // To work around buggy JS libraries that can't handle multi-digit
	  // version numbers, Opera 10's user agent string claims it's Opera
	  // 9, then later includes a Version/X.Y field:
	  //
	  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10
	  var uas = navigator.userAgent;
	  var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
	  var os    = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
	
	  _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
	  _ipad = /\b(iP[ao]d)/.exec(uas);
	  _android = /Android/i.exec(uas);
	  _native = /FBAN\/\w+;/i.exec(uas);
	  _mobile = /Mobile/i.exec(uas);
	
	  // Note that the IE team blog would have you believe you should be checking
	  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming
	  // from either x64 or ia64;  so ultimately, you should just check for Win64
	  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit
	  // Windows will send 'WOW64' instead.
	  _win64 = !!(/Win64/.exec(uas));
	
	  if (agent) {
	    _ie = agent[1] ? parseFloat(agent[1]) : (
	          agent[5] ? parseFloat(agent[5]) : NaN);
	    // IE compatibility mode
	    if (_ie && document && document.documentMode) {
	      _ie = document.documentMode;
	    }
	    // grab the "true" ie version from the trident token if available
	    var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
	    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;
	
	    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
	    _opera   = agent[3] ? parseFloat(agent[3]) : NaN;
	    _webkit  = agent[4] ? parseFloat(agent[4]) : NaN;
	    if (_webkit) {
	      // We do not add the regexp to the above test, because it will always
	      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in
	      // the userAgent string.
	      agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
	      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
	    } else {
	      _chrome = NaN;
	    }
	  } else {
	    _ie = _firefox = _opera = _chrome = _webkit = NaN;
	  }
	
	  if (os) {
	    if (os[1]) {
	      // Detect OS X version.  If no version number matches, set _osx to true.
	      // Version examples:  10, 10_6_1, 10.7
	      // Parses version number as a float, taking only first two sets of
	      // digits.  If only one set of digits is found, returns just the major
	      // version number.
	      var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
	
	      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;
	    } else {
	      _osx = false;
	    }
	    _windows = !!os[2];
	    _linux   = !!os[3];
	  } else {
	    _osx = _windows = _linux = false;
	  }
	}
	
	var UserAgent_DEPRECATED = {
	
	  /**
	   *  Check if the UA is Internet Explorer.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  ie: function() {
	    return _populate() || _ie;
	  },
	
	  /**
	   * Check if we're in Internet Explorer compatibility mode.
	   *
	   * @return bool true if in compatibility mode, false if
	   * not compatibility mode or not ie
	   */
	  ieCompatibilityMode: function() {
	    return _populate() || (_ie_real_version > _ie);
	  },
	
	
	  /**
	   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
	   * only need this because Skype can't handle 64-bit IE yet.  We need to remove
	   * this when we don't need it -- tracked by #601957.
	   */
	  ie64: function() {
	    return UserAgent_DEPRECATED.ie() && _win64;
	  },
	
	  /**
	   *  Check if the UA is Firefox.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  firefox: function() {
	    return _populate() || _firefox;
	  },
	
	
	  /**
	   *  Check if the UA is Opera.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  opera: function() {
	    return _populate() || _opera;
	  },
	
	
	  /**
	   *  Check if the UA is WebKit.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  webkit: function() {
	    return _populate() || _webkit;
	  },
	
	  /**
	   *  For Push
	   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
	   */
	  safari: function() {
	    return UserAgent_DEPRECATED.webkit();
	  },
	
	  /**
	   *  Check if the UA is a Chrome browser.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  chrome : function() {
	    return _populate() || _chrome;
	  },
	
	
	  /**
	   *  Check if the user is running Windows.
	   *
	   *  @return bool `true' if the user's OS is Windows.
	   */
	  windows: function() {
	    return _populate() || _windows;
	  },
	
	
	  /**
	   *  Check if the user is running Mac OS X.
	   *
	   *  @return float|bool   Returns a float if a version number is detected,
	   *                       otherwise true/false.
	   */
	  osx: function() {
	    return _populate() || _osx;
	  },
	
	  /**
	   * Check if the user is running Linux.
	   *
	   * @return bool `true' if the user's OS is some flavor of Linux.
	   */
	  linux: function() {
	    return _populate() || _linux;
	  },
	
	  /**
	   * Check if the user is running on an iPhone or iPod platform.
	   *
	   * @return bool `true' if the user is running some flavor of the
	   *    iPhone OS.
	   */
	  iphone: function() {
	    return _populate() || _iphone;
	  },
	
	  mobile: function() {
	    return _populate() || (_iphone || _ipad || _android || _mobile);
	  },
	
	  nativeApp: function() {
	    // webviews inside of the native apps
	    return _populate() || _native;
	  },
	
	  android: function() {
	    return _populate() || _android;
	  },
	
	  ipad: function() {
	    return _populate() || _ipad;
	  }
	};
	
	module.exports = UserAgent_DEPRECATED;


/***/ },
/* 254 */
/*!****************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/isEventSupported.js ***!
  \****************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 117);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;


/***/ },
/* 255 */
/*!***************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/nativeRequestAnimationFrame.js ***!
  \***************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule nativeRequestAnimationFrame
	 */
	
	var nativeRequestAnimationFrame =
	  global.requestAnimationFrame       ||
	  global.webkitRequestAnimationFrame ||
	  global.mozRequestAnimationFrame    ||
	  global.oRequestAnimationFrame      ||
	  global.msRequestAnimationFrame;
	
	module.exports = nativeRequestAnimationFrame;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 256 */
/*!*************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/EventListener.js ***!
  \*************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 198);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },
	
	  registerDefault: function() {}
	};
	
	module.exports = EventListener;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 257 */
/*!****************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/cancelAnimationFramePolyfill.js ***!
  \****************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cancelAnimationFramePolyfill
	 */
	
	/**
	 * Here is the native and polyfill version of cancelAnimationFrame.
	 * Please don't use it directly and use cancelAnimationFrame module instead.
	 */
	var cancelAnimationFrame =
	  global.cancelAnimationFrame       ||
	  global.webkitCancelAnimationFrame ||
	  global.mozCancelAnimationFrame    ||
	  global.oCancelAnimationFrame      ||
	  global.msCancelAnimationFrame     ||
	  global.clearTimeout;
	
	module.exports = cancelAnimationFrame;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 258 */
/*!****************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/IntegerBufferSet.js ***!
  \****************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule IntegerBufferSet
	 * @typechecks
	 */
	'use strict';
	
	var Heap = __webpack_require__(/*! ./Heap */ 264);
	
	var invariant = __webpack_require__(/*! ./invariant */ 184);
	
	// Data structure that allows to store values and assign positions to them
	// in a way to minimize changing positions of stored values when new ones are
	// added or when some values are replaced. Stored elements are alwasy assigned
	// a consecutive set of positoins startin from 0 up to count of elements less 1
	// Following actions can be executed
	// * get position assigned to given value (null if value is not stored)
	// * create new entry for new value and get assigned position back
	// * replace value that is furthest from specified value range with new value
	//   and get it's position back
	// All operations take amortized log(n) time where n is number of elements in
	// the set.
	
	  function IntegerBufferSet() {
	    this.$IntegerBufferSet_valueToPositionMap = {};
	    this.$IntegerBufferSet_size = 0;
	    this.$IntegerBufferSet_smallValues = new Heap(
	      [], // Initial data in the heap
	      this.$IntegerBufferSet_smallerComparator
	    );
	    this.$IntegerBufferSet_largeValues = new Heap(
	      [], // Initial data in the heap
	      this.$IntegerBufferSet_greaterComparator
	    );
	
	    this.getNewPositionForValue = this.getNewPositionForValue.bind(this);
	    this.getValuePosition = this.getValuePosition.bind(this);
	    this.getSize = this.getSize.bind(this);
	    this.replaceFurthestValuePosition =
	      this.replaceFurthestValuePosition.bind(this);
	  }
	
	  IntegerBufferSet.prototype.getSize=function()  {
	    return this.$IntegerBufferSet_size;
	  };
	
	  IntegerBufferSet.prototype.getValuePosition=function(value)  {
	    if (this.$IntegerBufferSet_valueToPositionMap[value] === undefined) {
	      return null;
	    }
	    return this.$IntegerBufferSet_valueToPositionMap[value];
	  };
	
	  IntegerBufferSet.prototype.getNewPositionForValue=function(value)  {
	    invariant(
	      this.$IntegerBufferSet_valueToPositionMap[value] === undefined,
	      "Shouldn't try to find new position for value already stored in BufferSet"
	    );
	    var newPosition = this.$IntegerBufferSet_size;
	    this.$IntegerBufferSet_size++;
	    this.$IntegerBufferSet_pushToHeaps(newPosition, value);
	    this.$IntegerBufferSet_valueToPositionMap[value] = newPosition;
	    return newPosition;
	  };
	
	  IntegerBufferSet.prototype.replaceFurthestValuePosition=function(
	lowValue,
	    /*number*/ highValue,
	    /*number*/ newValue)
	    {
	    invariant(
	      this.$IntegerBufferSet_valueToPositionMap[newValue] === undefined,
	      "Shouldn't try to replace values with value already stored value in " +
	      "BufferSet"
	    );
	
	    this.$IntegerBufferSet_cleanHeaps();
	    if (this.$IntegerBufferSet_smallValues.empty() || this.$IntegerBufferSet_largeValues.empty()) {
	      // Threre are currently no values stored. We will have to create new
	      // position for this value.
	      return null;
	    }
	
	    var minValue = this.$IntegerBufferSet_smallValues.peek().value;
	    var maxValue = this.$IntegerBufferSet_largeValues.peek().value;
	    if (minValue >= lowValue && maxValue <= highValue) {
	      // All values currently stored are necessary, we can't reuse any of them.
	      return null;
	    }
	
	    var valueToReplace;
	    if (lowValue - minValue > maxValue - highValue) {
	      // minValue is further from provided range. We will reuse it's position.
	      valueToReplace = minValue;
	      this.$IntegerBufferSet_smallValues.pop();
	    } else {
	      valueToReplace = maxValue;
	      this.$IntegerBufferSet_largeValues.pop();
	    }
	    var position = this.$IntegerBufferSet_valueToPositionMap[valueToReplace];
	    delete this.$IntegerBufferSet_valueToPositionMap[valueToReplace];
	    this.$IntegerBufferSet_valueToPositionMap[newValue] = position;
	    this.$IntegerBufferSet_pushToHeaps(position, newValue);
	
	    return position;
	  };
	
	  IntegerBufferSet.prototype.$IntegerBufferSet_pushToHeaps=function(position, /*number*/ value) {
	    var element = {
	      position:position,
	      value:value,
	    };
	    // We can reuse the same object in both heaps, because we don't mutate them
	    this.$IntegerBufferSet_smallValues.push(element);
	    this.$IntegerBufferSet_largeValues.push(element);
	  };
	
	  IntegerBufferSet.prototype.$IntegerBufferSet_cleanHeaps=function() {
	    // We not usually only remove object from one heap while moving value.
	    // Here we make sure that there is no stale data on top of heaps.
	    this.$IntegerBufferSet_cleanHeap(this.$IntegerBufferSet_smallValues);
	    this.$IntegerBufferSet_cleanHeap(this.$IntegerBufferSet_largeValues);
	    var minHeapSize =
	      Math.min(this.$IntegerBufferSet_smallValues.size(), this.$IntegerBufferSet_largeValues.size());
	    var maxHeapSize =
	      Math.max(this.$IntegerBufferSet_smallValues.size(), this.$IntegerBufferSet_largeValues.size());
	    if (maxHeapSize > 10 * minHeapSize) {
	      // There are many old values in one of heaps. We nned to get rid of them
	      // to not use too avoid memory leaks
	      this.$IntegerBufferSet_recreateHeaps();
	    }
	  };
	
	  IntegerBufferSet.prototype.$IntegerBufferSet_recreateHeaps=function() {
	    var sourceHeap = this.$IntegerBufferSet_smallValues.size() < this.$IntegerBufferSet_largeValues.size() ?
	      this.$IntegerBufferSet_smallValues :
	      this.$IntegerBufferSet_largeValues;
	    var newSmallValues = new Heap(
	      [], // Initial data in the heap
	      this.$IntegerBufferSet_smallerComparator
	    );
	    var newLargeValues = new Heap(
	      [], // Initial datat in the heap
	      this.$IntegerBufferSet_greaterComparator
	    );
	    while (!sourceHeap.empty()) {
	      var element = sourceHeap.pop();
	      // Push all stil valid elements to new heaps
	      if (this.$IntegerBufferSet_valueToPositionMap[element.value] !== undefined) {
	        newSmallValues.push(element);
	        newLargeValues.push(element);
	      }
	    }
	    this.$IntegerBufferSet_smallValues = newSmallValues;
	    this.$IntegerBufferSet_largeValues = newLargeValues;
	  };
	
	  IntegerBufferSet.prototype.$IntegerBufferSet_cleanHeap=function(heap) {
	    while (!heap.empty() &&
	        this.$IntegerBufferSet_valueToPositionMap[heap.peek().value] === undefined) {
	      heap.pop();
	    }
	  };
	
	  IntegerBufferSet.prototype.$IntegerBufferSet_smallerComparator=function(lhs, /*object*/ rhs)  {
	    return lhs.value < rhs.value;
	  };
	
	  IntegerBufferSet.prototype.$IntegerBufferSet_greaterComparator=function(lhs, /*object*/ rhs)  {
	    return lhs.value > rhs.value;
	  };
	
	
	
	module.exports = IntegerBufferSet;


/***/ },
/* 259 */
/*!***************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/ImmutableObject.js ***!
  \***************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ImmutableObject
	 * @typechecks
	 */
	
	"use strict";
	
	var ImmutableValue = __webpack_require__(/*! ./ImmutableValue */ 265);
	
	var invariant = __webpack_require__(/*! ./invariant */ 184);
	var keyOf = __webpack_require__(/*! ./keyOf */ 266);
	var mergeHelpers = __webpack_require__(/*! ./mergeHelpers */ 267);
	
	var checkMergeObjectArgs = mergeHelpers.checkMergeObjectArgs;
	var isTerminal = mergeHelpers.isTerminal;
	
	var SECRET_KEY = keyOf({_DONT_EVER_TYPE_THIS_SECRET_KEY: null});
	
	/**
	 * Static methods creating and operating on instances of `ImmutableValue`.
	 */
	function assertImmutable(immutable) {
	  invariant(
	    immutable instanceof ImmutableValue,
	    'ImmutableObject: Attempted to set fields on an object that is not an ' +
	    'instance of ImmutableValue.'
	  );
	}
	
	/**
	 * Static methods for reasoning about instances of `ImmutableObject`. Execute
	 * the freeze commands in `process.env.NODE_ENV !== 'production'` mode to alert the programmer that something
	 * is attempting to mutate. Since freezing is very expensive, we avoid doing it
	 * at all in production.
	 */
	for(var ImmutableValue____Key in ImmutableValue){if(ImmutableValue.hasOwnProperty(ImmutableValue____Key)){ImmutableObject[ImmutableValue____Key]=ImmutableValue[ImmutableValue____Key];}}var ____SuperProtoOfImmutableValue=ImmutableValue===null?null:ImmutableValue.prototype;ImmutableObject.prototype=Object.create(____SuperProtoOfImmutableValue);ImmutableObject.prototype.constructor=ImmutableObject;ImmutableObject.__superConstructor__=ImmutableValue;
	  /**
	   * @arguments {array<object>} The arguments is an array of objects that, when
	   * merged together, will form the immutable objects.
	   */
	  function ImmutableObject() {
	    ImmutableValue.call(this,ImmutableValue[SECRET_KEY]);
	    ImmutableValue.mergeAllPropertiesInto(this, arguments);
	    if (process.env.NODE_ENV !== 'production') {
	      ImmutableValue.deepFreezeRootNode(this);
	    }
	  }
	
	  /**
	   * DEPRECATED - prefer to instantiate with new ImmutableObject().
	   *
	   * @arguments {array<object>} The arguments is an array of objects that, when
	   * merged together, will form the immutable objects.
	   */
	  ImmutableObject.create=function() {
	    var obj = Object.create(ImmutableObject.prototype);
	    ImmutableObject.apply(obj, arguments);
	    return obj;
	  };
	
	  /**
	   * Returns a new `ImmutableValue` that is identical to the supplied
	   * `ImmutableValue` but with the specified changes, `put`. Any keys that are
	   * in the intersection of `immutable` and `put` retain the ordering of
	   * `immutable`. New keys are placed after keys that exist in `immutable`.
	   *
	   * @param {ImmutableValue} immutable Starting object.
	   * @param {?object} put Fields to merge into the object.
	   * @return {ImmutableValue} The result of merging in `put` fields.
	   */
	  ImmutableObject.set=function(immutable, put) {
	    assertImmutable(immutable);
	    invariant(
	      typeof put === 'object' && put !== undefined && !Array.isArray(put),
	      'Invalid ImmutableMap.set argument `put`'
	    );
	    return new ImmutableObject(immutable, put);
	  };
	
	  /**
	   * Sugar for `ImmutableObject.set(ImmutableObject, {fieldName: putField})`.
	   * Look out for key crushing: Use `keyOf()` to guard against it.
	   *
	   * @param {ImmutableValue} immutableObject Object on which to set properties.
	   * @param {string} fieldName Name of the field to set.
	   * @param {*} putField Value of the field to set.
	   * @return {ImmutableValue} new ImmutableValue as described in `set`.
	   */
	  ImmutableObject.setProperty=function(immutableObject, fieldName, putField) {
	    var put = {};
	    put[fieldName] = putField;
	    return ImmutableObject.set(immutableObject, put);
	  };
	
	  /**
	   * Returns a new immutable object with the given field name removed.
	   * Look out for key crushing: Use `keyOf()` to guard against it.
	   *
	   * @param {ImmutableObject} immutableObject from which to delete the key.
	   * @param {string} droppedField Name of the field to delete.
	   * @return {ImmutableObject} new ImmutableObject without the key
	   */
	  ImmutableObject.deleteProperty=function(immutableObject, droppedField) {
	    var copy = {};
	    for (var key in immutableObject) {
	      if (key !== droppedField && immutableObject.hasOwnProperty(key)) {
	        copy[key] = immutableObject[key];
	      }
	    }
	    return new ImmutableObject(copy);
	  };
	
	  /**
	   * Returns a new `ImmutableValue` that is identical to the supplied object but
	   * with the supplied changes recursively applied.
	   *
	   * Experimental. Likely does not handle `Arrays` correctly.
	   *
	   * @param {ImmutableValue} immutable Object on which to set fields.
	   * @param {object} put Fields to merge into the object.
	   * @return {ImmutableValue} The result of merging in `put` fields.
	   */
	  ImmutableObject.setDeep=function(immutable, put) {
	    assertImmutable(immutable);
	    return _setDeep(immutable, put);
	  };
	
	  /**
	   * Retrieves an ImmutableObject's values as an array.
	   *
	   * @param {ImmutableValue} immutable
	   * @return {array}
	   */
	  ImmutableObject.values=function(immutable) {
	    return Object.keys(immutable).map(function(key)  {return immutable[key];});
	  };
	
	
	function _setDeep(obj, put) {
	  checkMergeObjectArgs(obj, put);
	  var totalNewFields = {};
	
	  // To maintain the order of the keys, copy the base object's entries first.
	  var keys = Object.keys(obj);
	  for (var ii = 0; ii < keys.length; ii++) {
	    var key = keys[ii];
	    if (!put.hasOwnProperty(key)) {
	      totalNewFields[key] = obj[key];
	    } else if (isTerminal(obj[key]) || isTerminal(put[key])) {
	      totalNewFields[key] = put[key];
	    } else {
	      totalNewFields[key] = _setDeep(obj[key], put[key]);
	    }
	  }
	
	  // Apply any new keys that the base obj didn't have.
	  var newKeys = Object.keys(put);
	  for (ii = 0; ii < newKeys.length; ii++) {
	    var newKey = newKeys[ii];
	    if (obj.hasOwnProperty(newKey)) {
	      continue;
	    }
	    totalNewFields[newKey] = put[newKey];
	  }
	
	  return (
	    obj instanceof ImmutableValue ? new ImmutableObject(totalNewFields) :
	    put instanceof ImmutableValue ? new ImmutableObject(totalNewFields) :
	    totalNewFields
	  );
	}
	
	module.exports = ImmutableObject;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 260 */
/*!************************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/FixedDataTableCell.react.js ***!
  \************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FixedDataTableCell.react
	 * @typechecks
	 */
	
	var ImmutableObject = __webpack_require__(/*! ./ImmutableObject */ 259);
	var React = __webpack_require__(/*! ./React */ 183);
	
	var cloneWithProps = __webpack_require__(/*! ./cloneWithProps */ 195);
	var cx = __webpack_require__(/*! ./cx */ 196);
	var joinClasses = __webpack_require__(/*! ./joinClasses */ 239);
	
	var PropTypes = React.PropTypes;
	
	var DEFAULT_PROPS = new ImmutableObject({
	  align: 'left',
	  highlighted: false,
	  isFooterCell: false,
	  isHeaderCell: false,
	});
	
	var FixedDataTableCell = React.createClass({displayName: "FixedDataTableCell",
	
	  propTypes: {
	    align: PropTypes.oneOf(['left', 'center', 'right']),
	    className: PropTypes.string,
	    highlighted: PropTypes.bool,
	    isFooterCell: PropTypes.bool,
	    isHeaderCell: PropTypes.bool,
	    width: PropTypes.number.isRequired,
	    minWidth: PropTypes.number,
	    maxWidth: PropTypes.number,
	    height: PropTypes.number.isRequired,
	
	    /**
	     * The cell data that will be passed to `cellRenderer` to render.
	     */
	    cellData: PropTypes.any,
	
	    /**
	     * The key to retrieve the cell data from the `rowData`.
	     */
	    cellDataKey: PropTypes.oneOfType([
	      PropTypes.string.isRequired,
	      PropTypes.number.isRequired,
	    ]),
	
	    /**
	     * The function to render the `cellData`.
	     */
	    cellRenderer: PropTypes.func.isRequired,
	
	    /**
	     * The column data that will be passed to `cellRenderer` to render.
	     */
	    columnData: PropTypes.any,
	
	    /**
	     * The row data that will be passed to `cellRenderer` to render.
	     */
	    rowData: PropTypes.oneOfType([
	      PropTypes.object.isRequired,
	      PropTypes.array.isRequired,
	    ]),
	
	    /**
	     * The row index that will be passed to `cellRenderer` to render.
	     */
	    rowIndex: PropTypes.number.isRequired,
	
	    /**
	     * Callback for when resizer knob (in FixedDataTableCell) is clicked
	     * to initialize resizing. Please note this is only on the cells
	     * in the header.
	     * @param number combinedWidth
	     * @param number leftOffset
	     * @param number width
	     * @param number minWidth
	     * @param number maxWidth
	     * @param number|string columnKey
	     * @param object event
	     */
	    onColumnResize: PropTypes.func,
	
	    /**
	     * Width of the all the cells preceding this cell that
	     * are in its column group.
	     */
	    widthOffset: PropTypes.number,
	
	    /**
	     * The left offset in pixels of the cell.
	     */
	    left: PropTypes.number,
	  },
	
	  shouldComponentUpdate:function(/*object*/ nextProps) /*boolean*/ {
	    var props = this.props;
	    var key;
	    for (key in props) {
	      if (props[key] !== nextProps[key] &&
	          key !== 'left') {
	        return true;
	      }
	    }
	    for (key in nextProps) {
	      if (props[key] !== nextProps[key] &&
	          key !== 'left') {
	        return true;
	      }
	    }
	
	    return false;
	  },
	
	  getDefaultProps:function() /*object*/ {
	    return DEFAULT_PROPS;
	  },
	
	  render:function() /*object*/ {
	    var props = this.props;
	
	    var style = {
	      width: props.width,
	      height: props.height
	    };
	
	    var className = joinClasses(
	      cx({
	        'public/fixedDataTableCell/main': true,
	        'public/fixedDataTableCell/highlighted': props.highlighted,
	        'public/fixedDataTableCell/lastChild': props.lastChild,
	        'public/fixedDataTableCell/alignRight': props.align === 'right',
	        'public/fixedDataTableCell/alignCenter': props.align === 'center'
	      }),
	      props.className
	    );
	
	    var content;
	    if (props.isHeaderCell || props.isFooterCell) {
	      content = props.cellRenderer(
	        props.cellData,
	        props.cellDataKey,
	        props.columnData,
	        props.rowData
	      );
	    } else {
	      content = props.cellRenderer(
	        props.cellData,
	        props.cellDataKey,
	        props.rowData,
	        props.rowIndex,
	        props.columnData,
	        props.width
	      );
	    }
	
	    var contentClass = cx('public/fixedDataTableCell/cellContent');
	    if (React.isValidElement(content)) {
	      content = cloneWithProps(content, {className: contentClass});
	    } else {
	      content = React.createElement("div", {className: contentClass}, content);
	    }
	
	    var columnResizerComponent;
	    if (props.onColumnResize) {
	      var columnResizerStyle = {
	        height: props.height
	      };
	      columnResizerComponent = (
	        React.createElement("div", {
	          className: cx('fixedDataTableCell/columnResizerContainer'), 
	          style: columnResizerStyle, 
	          onMouseDown: this._onColumnResizerMouseDown}, 
	          React.createElement("div", {
	            className: cx('fixedDataTableCell/columnResizerKnob'), 
	            style: columnResizerStyle}
	          )
	        )
	      );
	    }
	    return (
	      React.createElement("div", {className: className, style: style}, 
	        columnResizerComponent, 
	        React.createElement("div", {className: cx('public/fixedDataTableCell/wrap1'), style: style}, 
	          React.createElement("div", {className: cx('public/fixedDataTableCell/wrap2')}, 
	            React.createElement("div", {className: cx('public/fixedDataTableCell/wrap3')}, 
	              content
	            )
	          )
	        )
	      )
	    );
	  },
	
	  _onColumnResizerMouseDown:function(/*object*/ event) {
	    this.props.onColumnResize(
	      this.props.widthOffset,
	      this.props.width,
	      this.props.minWidth,
	      this.props.maxWidth,
	      this.props.cellDataKey,
	      event
	    );
	  },
	});
	
	module.exports = FixedDataTableCell;


/***/ },
/* 261 */
/*!********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/camelize.js ***!
  \********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;


/***/ },
/* 262 */
/*!*********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getNodeForCharacterOffset.js ***!
  \*********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
	
	"use strict";
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType == 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;


/***/ },
/* 263 */
/*!**************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/Danger.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */
	
	/*jslint evil: true, sub: true */
	
	"use strict";
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var createNodesFromMarkup = __webpack_require__(/*! ./createNodesFromMarkup */ 268);
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 101);
	var getMarkupWrap = __webpack_require__(/*! ./getMarkupWrap */ 269);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';
	
	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}
	
	var Danger = {
	
	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];
	
	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      for (var resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];
	
	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }
	
	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );
	
	      for (i = 0; i < renderNodes.length; ++i) {
	        var renderNode = renderNodes[i];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
	
	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);
	
	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));
	
	          resultList[resultIndex] = renderNode;
	
	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	
	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            "Danger: Discarding unexpected node:",
	            renderNode
	          );
	        }
	      }
	    }
	
	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));
	
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));
	
	    return resultList;
	  },
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See renderComponentToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));
	
	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }
	
	};
	
	module.exports = Danger;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 264 */
/*!****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/Heap.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Heap
	 * @typechecks
	 * @preventMunge
	 */
	"use strict";
	
	/*
	 * @param {*} a
	 * @param {*} b
	 * @return {boolean}
	 */
	function defaultComparator(a, b) {
	  return a < b;
	}
	
	
	  function Heap(items, comparator) {
	    this._items = items || [];
	    this._size = this._items.length;
	    this._comparator = comparator || defaultComparator;
	    this._heapify();
	  }
	
	  /*
	   * @return {boolean}
	   */
	  Heap.prototype.empty=function() {
	    return this._size === 0;
	  };
	
	  /*
	   * @return {*}
	   */
	  Heap.prototype.pop=function() {
	    if (this._size === 0){
	      return;
	    }
	
	    var elt = this._items[0];
	
	    var lastElt = this._items.pop();
	    this._size--;
	
	    if (this._size > 0) {
	      this._items[0] = lastElt;
	      this._sinkDown(0);
	    }
	
	    return elt;
	  };
	
	  /*
	   * @param {*} item
	   */
	  Heap.prototype.push=function(item) {
	    this._items[this._size++] = item;
	    this._bubbleUp(this._size - 1);
	  };
	
	  /*
	   * @return {number}
	   */
	  Heap.prototype.size=function() {
	    return this._size;
	  };
	
	  /*
	   * @return {*}
	   */
	  Heap.prototype.peek=function() {
	    if (this._size === 0) {
	      return;
	    }
	
	    return this._items[0];
	  };
	
	  Heap.prototype._heapify=function() {
	    for (var index = Math.floor((this._size + 1)/ 2); index >= 0; index--) {
	      this._sinkDown(index);
	    }
	  };
	
	  /*
	   * @parent {number} index
	   */
	  Heap.prototype._bubbleUp=function(index) {
	    var elt = this._items[index];
	    while (index > 0) {
	      var parentIndex = Math.floor((index + 1) / 2) - 1;
	      var parentElt = this._items[parentIndex];
	
	      // if parentElt < elt, stop
	      if (this._comparator(parentElt, elt)) {
	        return;
	      }
	
	      // swap
	      this._items[parentIndex] = elt;
	      this._items[index] = parentElt;
	      index = parentIndex;
	    }
	  };
	
	  /*
	   * @parent {number} index
	   */
	  Heap.prototype._sinkDown=function(index) {
	    var elt = this._items[index];
	
	    while (true) {
	      var leftChildIndex = 2 * (index + 1) - 1;
	      var rightChildIndex = 2 * (index + 1);
	      var swapIndex = -1;
	
	      if (leftChildIndex < this._size) {
	        var leftChild = this._items[leftChildIndex];
	        if (this._comparator(leftChild, elt)) {
	          swapIndex = leftChildIndex;
	        }
	      }
	
	      if (rightChildIndex < this._size) {
	        var rightChild = this._items[rightChildIndex];
	        if (this._comparator(rightChild, elt)) {
	          if (swapIndex === -1 ||
	              this._comparator(rightChild, this._items[swapIndex])) {
	            swapIndex = rightChildIndex;
	          }
	        }
	      }
	
	      // if we don't have a swap, stop
	      if (swapIndex === -1) {
	        return;
	      }
	
	      this._items[index] = this._items[swapIndex];
	      this._items[swapIndex] = elt;
	      index = swapIndex;
	    }
	  };
	
	
	module.exports = Heap;


/***/ },
/* 265 */
/*!**************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/ImmutableValue.js ***!
  \**************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ImmutableValue
	 * @typechecks
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(/*! ./invariant */ 184);
	var isNode = __webpack_require__(/*! ./isNode */ 270);
	var keyOf = __webpack_require__(/*! ./keyOf */ 266);
	
	var SECRET_KEY = keyOf({_DONT_EVER_TYPE_THIS_SECRET_KEY: null});
	
	/**
	 * `ImmutableValue` provides a guarantee of immutability at developer time when
	 * strict mode is used. The extra computations required to enforce immutability
	 * are stripped out in production for performance reasons. `ImmutableValue`
	 * guarantees to enforce immutability for enumerable, own properties. This
	 * allows easy wrapping of `ImmutableValue` with the ability to store
	 * non-enumerable properties on the instance that only your static methods
	 * reason about. In order to achieve IE8 compatibility (which doesn't have the
	 * ability to define non-enumerable properties), modules that want to build
	 * their own reasoning of `ImmutableValue`s and store computations can define
	 * their non-enumerable properties under the name `toString`, and in IE8 only
	 * define a standard property called `toString` which will mistakenly be
	 * considered not enumerable due to its name (but only in IE8). The only
	 * limitation is that no one can store their own `toString` property.
	 * https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug
	 */
	
	  /**
	   * An instance of `ImmutableValue` appears to be a plain JavaScript object,
	   * except `instanceof ImmutableValue` evaluates to `true`, and it is deeply
	   * frozen in development mode.
	   *
	   * @param {number} secret Ensures this isn't accidentally constructed outside
	   * of convenience constructors. If created outside of a convenience
	   * constructor, may not be frozen. Forbidding that use case for now until we
	   * have a better API.
	   */
	  function ImmutableValue(secret) {
	    invariant(
	      secret === ImmutableValue[SECRET_KEY],
	      'Only certain classes should create instances of `ImmutableValue`.' +
	      'You probably want something like ImmutableValueObject.create.'
	    );
	  }
	
	  /**
	   * Helper method for classes that make use of `ImmutableValue`.
	   * @param {ImmutableValue} destination Object to merge properties into.
	   * @param {object} propertyObjects List of objects to merge into
	   * `destination`.
	   */
	  ImmutableValue.mergeAllPropertiesInto=function(destination, propertyObjects) {
	    var argLength = propertyObjects.length;
	    for (var i = 0; i < argLength; i++) {
	      Object.assign(destination, propertyObjects[i]);
	    }
	  };
	
	
	  /**
	   * Freezes the supplied object deeply. Other classes may implement their own
	   * version based on this.
	   *
	   * @param {*} object The object to freeze.
	   */
	  ImmutableValue.deepFreezeRootNode=function(object) {
	    if (isNode(object)) {
	      return; // Don't try to freeze DOM nodes.
	    }
	    Object.freeze(object); // First freeze the object.
	    for (var prop in object) {
	      if (object.hasOwnProperty(prop)) {
	        ImmutableValue.recurseDeepFreeze(object[prop]);
	      }
	    }
	    Object.seal(object);
	  };
	
	  /**
	   * Differs from `deepFreezeRootNode`, in that we first check if this is a
	   * necessary recursion. If the object is already an `ImmutableValue`, then the
	   * recursion is unnecessary as it is already frozen. That check obviously
	   * wouldn't work for the root node version `deepFreezeRootNode`!
	   */
	  ImmutableValue.recurseDeepFreeze=function(object) {
	    if (isNode(object) || !ImmutableValue.shouldRecurseFreeze(object)) {
	      return; // Don't try to freeze DOM nodes.
	    }
	    Object.freeze(object); // First freeze the object.
	    for (var prop in object) {
	      if (object.hasOwnProperty(prop)) {
	        ImmutableValue.recurseDeepFreeze(object[prop]);
	      }
	    }
	    Object.seal(object);
	  };
	
	  /**
	   * Checks if an object should be deep frozen. Instances of `ImmutableValue`
	   * are assumed to have already been deep frozen, so we can have large
	   * `process.env.NODE_ENV !== 'production'` time savings by skipping freezing of them.
	   *
	   * @param {*} object The object to check.
	   * @return {boolean} Whether or not deep freeze is needed.
	   */
	  ImmutableValue.shouldRecurseFreeze=function(object) {
	    return (
	      typeof object === 'object' &&
	      !(object instanceof ImmutableValue) &&
	      object !== null
	    );
	  };
	
	
	ImmutableValue._DONT_EVER_TYPE_THIS_SECRET_KEY = Math.random();
	
	module.exports = ImmutableValue;


/***/ },
/* 266 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/keyOf.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	
	module.exports = keyOf;


/***/ },
/* 267 */
/*!************************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/mergeHelpers.js ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mergeHelpers
	 *
	 * requiresPolyfills: Array.isArray
	 */
	
	"use strict";
	
	var invariant = __webpack_require__(/*! ./invariant */ 184);
	var keyMirror = __webpack_require__(/*! ./keyMirror */ 271);
	
	/**
	 * Maximum number of levels to traverse. Will catch circular structures.
	 * @const
	 */
	var MAX_MERGE_DEPTH = 36;
	
	/**
	 * We won't worry about edge cases like new String('x') or new Boolean(true).
	 * Functions and Dates are considered terminals, and arrays are not.
	 * @param {*} o The item/object/value to test.
	 * @return {boolean} true iff the argument is a terminal.
	 */
	var isTerminal = function(o) {
	  return typeof o !== 'object' || o instanceof Date || o === null;
	};
	
	var mergeHelpers = {
	
	  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
	
	  isTerminal: isTerminal,
	
	  /**
	   * Converts null/undefined values into empty object.
	   *
	   * @param {?Object=} arg Argument to be normalized (nullable optional)
	   * @return {!Object}
	   */
	  normalizeMergeArg: function(arg) {
	    return arg === undefined || arg === null ? {} : arg;
	  },
	
	  /**
	   * If merging Arrays, a merge strategy *must* be supplied. If not, it is
	   * likely the caller's fault. If this function is ever called with anything
	   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.
	   *
	   * @param {*} one Array to merge into.
	   * @param {*} two Array to merge from.
	   */
	  checkMergeArrayArgs: function(one, two) {
	    invariant(
	      Array.isArray(one) && Array.isArray(two),
	      'Tried to merge arrays, instead got %s and %s.',
	      one,
	      two
	    );
	  },
	
	  /**
	   * @param {*} one Object to merge into.
	   * @param {*} two Object to merge from.
	   */
	  checkMergeObjectArgs: function(one, two) {
	    mergeHelpers.checkMergeObjectArg(one);
	    mergeHelpers.checkMergeObjectArg(two);
	  },
	
	  /**
	   * @param {*} arg
	   */
	  checkMergeObjectArg: function(arg) {
	    invariant(
	      !isTerminal(arg) && !Array.isArray(arg),
	      'Tried to merge an object, instead got %s.',
	      arg
	    );
	  },
	
	  /**
	   * @param {*} arg
	   */
	  checkMergeIntoObjectArg: function(arg) {
	    invariant(
	      (!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg),
	      'Tried to merge into an object, instead got %s.',
	      arg
	    );
	  },
	
	  /**
	   * Checks that a merge was not given a circular object or an object that had
	   * too great of depth.
	   *
	   * @param {number} Level of recursion to validate against maximum.
	   */
	  checkMergeLevel: function(level) {
	    invariant(
	      level < MAX_MERGE_DEPTH,
	      'Maximum deep merge depth exceeded. You may be attempting to merge ' +
	      'circular structures in an unsupported way.'
	    );
	  },
	
	  /**
	   * Checks that the supplied merge strategy is valid.
	   *
	   * @param {string} Array merge strategy.
	   */
	  checkArrayStrategy: function(strategy) {
	    invariant(
	      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,
	      'You must provide an array strategy to deep merge functions to ' +
	      'instruct the deep merge how to resolve merging two arrays.'
	    );
	  },
	
	  /**
	   * Set of possible behaviors of merge algorithms when encountering two Arrays
	   * that must be merged together.
	   * - `clobber`: The left `Array` is ignored.
	   * - `indexByIndex`: The result is achieved by recursively deep merging at
	   *   each index. (not yet supported.)
	   */
	  ArrayStrategies: keyMirror({
	    Clobber: true,
	    IndexByIndex: true
	  })
	
	};
	
	module.exports = mergeHelpers;


/***/ },
/* 268 */
/*!*****************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/createNodesFromMarkup.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */
	
	/*jslint evil: true, sub: true */
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var createArrayFrom = __webpack_require__(/*! ./createArrayFrom */ 272);
	var getMarkupWrap = __webpack_require__(/*! ./getMarkupWrap */ 269);
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFrom(scripts).forEach(handleScript);
	  }
	
	  var nodes = createArrayFrom(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 269 */
/*!*********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/getMarkupWrap.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 97);
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg>', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap,
	
	  'circle': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	
	module.exports = getMarkupWrap;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ },
/* 270 */
/*!******************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/isNode.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    typeof Node === 'function' ? object instanceof Node :
	      typeof object === 'object' &&
	      typeof object.nodeType === 'number' &&
	      typeof object.nodeName === 'string'
	  ));
	}
	
	module.exports = isNode;


/***/ },
/* 271 */
/*!*********************************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/fixed-data-table/internal/keyMirror.js ***!
  \*********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! ./invariant */ 184);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  );
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;


/***/ },
/* 272 */
/*!***********************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/createArrayFrom.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFrom
	 * @typechecks
	 */
	
	var toArray = __webpack_require__(/*! ./toArray */ 273);
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFrom = require('createArrayFrom');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFrom(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFrom(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFrom;


/***/ },
/* 273 */
/*!***************************************************************!*\
  !*** /Users/steve/Dropbox/git/heswell/~/react/lib/toArray.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(/*! ./invariant */ 105);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFrom.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));
	
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));
	
	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	module.exports = toArray;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 46)))

/***/ }
/******/ ])
//# sourceMappingURL=bundle.js.map